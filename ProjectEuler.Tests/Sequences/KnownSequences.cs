using Lokad;


namespace ProjectEuler.Tests.Sequences
{
    public static class KnownSequences
    {
        public static readonly ulong[] FirstPrimeNumbers = new ulong[]
            {
                2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97,
                101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193,
                197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307,
                311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421,
                431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547,
                557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659,
                661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797,
                809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929,
                937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049,
                1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163,
                1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283,
                1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423,
                1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511,
                1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619,
                1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747,
                1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877,
                1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003,
                2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129,
                2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267,
                2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377,
                2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503,
                2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657,
                2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741,
                2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861,
                2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011,
                3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167,
                3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301,
                3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413,
                3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541,
                3547, 3557, 3559, 3571
            };


        public static readonly ulong[] FirstFibonacciNumbers = new ulong[]
            {
                0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 
                17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 
                5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 
                433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 
                20365011074, 32951280099, 53316291173, 86267571272, 139583862445, 225851433717, 365435296162, 
                591286729879, 956722026041, 1548008755920, 2504730781961, 4052739537881, 6557470319842, 
                10610209857723, 17167680177565, 27777890035288, 44945570212853, 72723460248141, 117669030460994, 
                190392490709135, 308061521170129, 498454011879264, 806515533049393, 1304969544928657, 
                2111485077978050, 3416454622906707, 5527939700884757, 8944394323791464, 14472334024676221, 
                23416728348467685, 37889062373143906, 61305790721611591, 99194853094755497, 
                160500643816367088, 259695496911122585, 420196140727489673, 679891637638612258, 
                1100087778366101931, 1779979416004714189, 2880067194370816120, 4660046610375530309, 
                7540113804746346429, 12200160415121876738, 
            };


        public static readonly int[] FirstTriangleNumbers = new[] { 1, 3, 6, 10, 15, 21, 28, 36, 45, 55 };


        public static readonly Triple<ulong, ulong, ulong>[] FirstPythagoreanTriplets = new[]
            {
                Tuple.From(3UL, 4UL, 5UL),
                Tuple.From(6UL, 8UL, 10UL),
                Tuple.From(5UL, 12UL, 13UL),
                Tuple.From(9UL, 12UL, 15UL),
                Tuple.From(8UL, 15UL, 17UL),
                Tuple.From(12UL, 16UL, 20UL),
                Tuple.From(7UL, 24UL, 25UL),
                Tuple.From(15UL, 20UL, 25UL),
                Tuple.From(10UL, 24UL, 26UL),
                Tuple.From(20UL, 21UL, 29UL),
                Tuple.From(18UL, 24UL, 30UL),
                Tuple.From(16UL, 30UL, 34UL),
                Tuple.From(21UL, 28UL, 35UL),
                Tuple.From(12UL, 35UL, 37UL),
                Tuple.From(15UL, 36UL, 39UL),
                Tuple.From(24UL, 32UL, 40UL),
                Tuple.From(9UL, 40UL, 41UL),
                Tuple.From(27UL, 36UL, 45UL),
                Tuple.From(14UL, 48UL, 50UL),
                Tuple.From(30UL, 40UL, 50UL),
                Tuple.From(24UL, 45UL, 51UL),
                Tuple.From(20UL, 48UL, 52UL),
                Tuple.From(28UL, 45UL, 53UL),
                Tuple.From(33UL, 44UL, 55UL),
                Tuple.From(40UL, 42UL, 58UL),
                Tuple.From(36UL, 48UL, 60UL),
                Tuple.From(11UL, 60UL, 61UL),
                Tuple.From(16UL, 63UL, 65UL),
                Tuple.From(25UL, 60UL, 65UL),
                Tuple.From(33UL, 56UL, 65UL),
                Tuple.From(39UL, 52UL, 65UL),
                Tuple.From(32UL, 60UL, 68UL),
                Tuple.From(42UL, 56UL, 70UL),
                Tuple.From(48UL, 55UL, 73UL),
                Tuple.From(24UL, 70UL, 74UL),
                Tuple.From(21UL, 72UL, 75UL),
                Tuple.From(45UL, 60UL, 75UL),
                Tuple.From(30UL, 72UL, 78UL),
                Tuple.From(48UL, 64UL, 80UL),
                Tuple.From(18UL, 80UL, 82UL),
                Tuple.From(13UL, 84UL, 85UL),
                Tuple.From(36UL, 77UL, 85UL),
                Tuple.From(40UL, 75UL, 85UL),
                Tuple.From(51UL, 68UL, 85UL),
                Tuple.From(60UL, 63UL, 87UL),
                Tuple.From(39UL, 80UL, 89UL),
                Tuple.From(54UL, 72UL, 90UL),
                Tuple.From(35UL, 84UL, 91UL),
                Tuple.From(57UL, 76UL, 95UL),
                Tuple.From(65UL, 72UL, 97UL),
            };
    }
}