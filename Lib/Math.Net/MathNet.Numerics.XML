<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MathNet.Numerics</name>
    </assembly>
    <members>
        <member name="T:MathNet.Numerics.Interpolation.Interpolate">
            <summary>
            Interpolation Factory.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Interpolate.Common(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Creates an interpolation based on arbitrary points.
            </summary>
            <param name="points">The sample points t. Supports both lists and arrays.</param>
            <param name="values">The sample point values x(t). Supports both lists and arrays.</param>
            <returns>
            An interpolation scheme optimized for the given sample points and values,
            which can then be used to compute interpolations and extrapolations
            on arbitrary points.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Interpolate.LinearBetweenPoints(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Create a linear spline interpolation based on arbitrary points (sorted ascending).
            </summary>
            <param name="points">The sample points t, sorted ascending. Supports both lists and arrays.</param>
            <param name="values">The sample point values x(t). Supports both lists and arrays.</param>
            <returns>
            An interpolation scheme optimized for the given sample points and values,
            which can then be used to compute interpolations and extrapolations
            on arbitrary points.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Interpolate.RationalWithoutPoles(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Create a floater hormann rational pole-free interpolation based on arbitrary points.
            </summary>
            <param name="points">The sample points t. Supports both lists and arrays.</param>
            <param name="values">The sample point values x(t). Supports both lists and arrays.</param>
            <returns>
            An interpolation scheme optimized for the given sample points and values,
            which can then be used to compute interpolations and extrapolations
            on arbitrary points.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Interpolate.RationalWithPoles(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Create a burlish stoer rational interpolation based on arbitrary points.
            </summary>
            <param name="points">The sample points t. Supports both lists and arrays.</param>
            <param name="values">The sample point values x(t). Supports both lists and arrays.</param>
            <returns>
            An interpolation scheme optimized for the given sample points and values,
            which can then be used to compute interpolations and extrapolations
            on arbitrary points.
            </returns>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.Algorithms.FloaterHormannRationalInterpolation">
            <summary>
            Barycentric Rational Interpolation without poles, using Mike Floater and Kai Hormann's Algorithm.
            </summary>
            <remarks>
            This algorithm neither supports differentiation nor integration.
            </remarks>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.IInterpolation">
            <summary>
            Interpolation within the range of a discrete set of known data points.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.IInterpolation.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.IInterpolation.Differentiate(System.Double)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated first derivative at point t.</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsDifferentiation"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.IInterpolation.Differentiate(System.Double,System.Double@,System.Double@)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <param name="interpolatedValue">Interpolated value x(t)</param>
            <param name="secondDerivative">Interpolated second derivative at point t.</param>
            <returns>Interpolated first derivative at point t.</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsDifferentiation"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Differentiate(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.IInterpolation.Integrate(System.Double)">
            <summary>
            Integrate up to point t.
            </summary>
            <param name="t">Right bound of the integration interval [a,t].</param>
            <returns>Interpolated definite integral over the interval [a,t].</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsIntegration"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsDifferentiation">
            <summary>
            Gets a value indicating whether the algorithm supports differentiation (interpolated derivative).
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Differentiate(System.Double)"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsIntegration">
            <summary>
            Gets a value indicating whether the algorithm supports integration (interpolated quadrature).
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Integrate(System.Double)"/>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.Algorithms.FloaterHormannRationalInterpolation._barycentric">
            <summary>
            Internal Barycentric Interpolation
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.FloaterHormannRationalInterpolation.#ctor">
            <summary>
            Initializes a new instance of the FloaterHormannRationalInterpolation class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.FloaterHormannRationalInterpolation.#ctor(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initializes a new instance of the FloaterHormannRationalInterpolation class.
            </summary>
            <param name="samplePoints">Sample Points t</param>
            <param name="sampleValues">Sample Values x(t)</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.FloaterHormannRationalInterpolation.#ctor(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            Initializes a new instance of the FloaterHormannRationalInterpolation class.
            </summary>
            <param name="samplePoints">Sample Points t</param>
            <param name="sampleValues">Sample Values x(t)</param>
            <param name="order">
            Order of the interpolation scheme, 0 &lt;= order &lt;= N.
            In most cases a value between 3 and 8 gives good results.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.FloaterHormannRationalInterpolation.Initialize(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initialize the interpolation method with the given sample set.
            </summary>
            <remarks>
            The interpolation scheme order will be set to 3.
            </remarks>
            <param name="samplePoints">Sample Points t (no sorting assumed)</param>
            <param name="sampleValues">Sample Values x(t)</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.FloaterHormannRationalInterpolation.Initialize(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            Initialize the interpolation method with the given sample set (no sorting assumed).
            </summary>
            <param name="samplePoints">Sample Points t</param>
            <param name="sampleValues">Sample Values x(t)</param>
            <param name="order">
            Order of the interpolation scheme, 0 &lt;= order &lt;= N.
            In most cases a value between 3 and 8 gives good results.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.FloaterHormannRationalInterpolation.EvaluateBarycentricWeights(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            Evaluate the barycentric weights as used
            internally by this interpolation algorithm.
            </summary>
            <param name="samplePoints">Sample Points t</param>
            <param name="sampleValues">Sample Values x(t)</param>
            <param name="order">
            Order of the interpolation scheme, 0 &lt;= order &lt;= N.
            In most cases a value between 3 and 8 gives good results.
            </param>
            <returns>Barycentric Weight Vector</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.FloaterHormannRationalInterpolation.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.FloaterHormannRationalInterpolation.MathNet#Numerics#Interpolation#IInterpolation#Differentiate(System.Double)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated first derivative at point t.</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsDifferentiation"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.FloaterHormannRationalInterpolation.MathNet#Numerics#Interpolation#IInterpolation#Differentiate(System.Double,System.Double@,System.Double@)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <param name="interpolatedValue">Interpolated value x(t)</param>
            <param name="secondDerivative">Interpolated second derivative at point t.</param>
            <returns>Interpolated first derivative at point t.</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsDifferentiation"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Differentiate(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.FloaterHormannRationalInterpolation.MathNet#Numerics#Interpolation#IInterpolation#Integrate(System.Double)">
            <summary>
            Integrate up to point t.
            </summary>
            <param name="t">Right bound of the integration interval [a,t].</param>
            <returns>Interpolated definite integral over the interval [a,t].</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsIntegration"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.FloaterHormannRationalInterpolation.MathNet#Numerics#Interpolation#IInterpolation#SupportsDifferentiation">
            <summary>
            Gets a value indicating whether the algorithm supports differentiation (interpolated derivative).
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Differentiate(System.Double)"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.FloaterHormannRationalInterpolation.MathNet#Numerics#Interpolation#IInterpolation#SupportsIntegration">
            <summary>
            Gets a value indicating whether the algorithm supports integration (interpolated quadrature).
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Integrate(System.Double)"/>
        </member>
        <member name="T:MathNet.Numerics.Integration.Algorithms.DoubleExponentialTransformation">
            <summary>
            Analytic integration algorithm for smooth functions with no discontinuities
            or derivative discontinuities and no poles inside the interval.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Integration.Algorithms.DoubleExponentialTransformation.NumberOfMaximumLevels">
            <summary>
            Maximum number of iterations, until the asked
            maximum error is (likely to be) satisfied.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Integration.Algorithms.DoubleExponentialTransformation.PrecomputedAbscissas">
            <summary>
            Precomputed abscissa vector per level.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Integration.Algorithms.DoubleExponentialTransformation.PrecomputedWeights">
            <summary>
            Precomputed weight vector per level.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Integration.Algorithms.DoubleExponentialTransformation._levelAbcissas">
            <summary>
            Abscissa vector per level provider.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Integration.Algorithms.DoubleExponentialTransformation._levelWeights">
            <summary>
            Weight vector per level provider.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Integration.Algorithms.DoubleExponentialTransformation.Integrate(System.Func{System.Double,System.Double},System.Double,System.Double,System.Double)">
            <summary>
            Approximate the integral by the double exponential transformation
            </summary>
            <param name="f">The analytic smooth function to integrate.</param>
            <param name="intervalBegin">Where the interval starts, inclusive and finite.</param>
            <param name="intervalEnd">Where the interval stops, inclusive and finite.</param>
            <param name="targetRelativeError">The expected relative accuracy of the approximation.</param>
            <returns>Approximation of the finite integral in the given interval.</returns>
        </member>
        <member name="M:MathNet.Numerics.Integration.Algorithms.DoubleExponentialTransformation.ProvideLevelAbcissas">
            <summary>
            Abscissa vector per level provider.
            </summary>
            <returns>Level Enumerator.</returns>
        </member>
        <member name="M:MathNet.Numerics.Integration.Algorithms.DoubleExponentialTransformation.ProvideLevelWeights">
            <summary>
            Weight vector per level provider.
            </summary>
            <returns>Level Enumerator.</returns>
        </member>
        <member name="M:MathNet.Numerics.Integration.Algorithms.DoubleExponentialTransformation.EvaluateAbcissas(System.Int32)">
            <summary>
            Compute the abscissa vector for a single level.
            </summary>
            <param name="level">The level to evaluate the abscissa vector for.</param>
            <returns>Abscissa Vector.</returns>
        </member>
        <member name="M:MathNet.Numerics.Integration.Algorithms.DoubleExponentialTransformation.EvaluateWeights(System.Int32)">
            <summary>
            Compute the weight vector for a single level.
            </summary>
            <param name="level">The level to evaluate the weight vector for.</param>
            <returns>Weight Vector.</returns>
        </member>
        <member name="T:MathNet.Numerics.IntegralTransforms.FourierOptions">
            <summary>
            Fourier Transform Convention
            </summary>
        </member>
        <member name="F:MathNet.Numerics.IntegralTransforms.FourierOptions.InverseExponent">
            <summary>
            Inverse integrand exponent (forward: positive sign; inverse: negative sign).
            </summary>
        </member>
        <member name="F:MathNet.Numerics.IntegralTransforms.FourierOptions.AsymmetricScaling">
            <summary>
            Only scale by 1/N in the inverse direction; No scaling in forward direction.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.IntegralTransforms.FourierOptions.NoScaling">
            <summary>
            Don't scale at all (neither on forward nor on inverse transformation).
            </summary>
        </member>
        <member name="F:MathNet.Numerics.IntegralTransforms.FourierOptions.Default">
            <summary>
            Universal; Symmetric scaling and common exponent (used in Maple).
            </summary>
        </member>
        <member name="F:MathNet.Numerics.IntegralTransforms.FourierOptions.Matlab">
            <summary>
            Only scale by 1/N in the inverse direction; No scaling in forward direction (used in Matlab). [= AsymmetricScaling]
            </summary>
        </member>
        <member name="F:MathNet.Numerics.IntegralTransforms.FourierOptions.NumericalRecipes">
            <summary>
            Inverse integrand exponent; No scaling at all (used in all Numerical Recipes based implementations). [= InverseExponent | NoScaling]
            </summary>
        </member>
        <member name="T:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteFourierTransform">
            <summary>
            Complex Fast (FFT) Implementation of the Discrete Fourier Transform (DFT).
            </summary>
            <summary>
            Complex Fast (FFT) Implementation of the Discrete Fourier Transform (DFT).
            </summary>
            <summary>
            Complex Fast (FFT) Implementation of the Discrete Fourier Transform (DFT).
            </summary>
            <summary>
            Complex Fast (FFT) Implementation of the Discrete Fourier Transform (DFT).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteFourierTransform.Radix2Reorder``1(``0[])">
            <summary>
            Radix-2 Reorder Helper Method
            </summary>
            <typeparam name="T">Sample type</typeparam>
            <param name="samples">Sample vector</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteFourierTransform.Radix2Step(MathNet.Numerics.Complex[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Radix-2 Step Helper Method
            </summary>
            <param name="samples">Sample vector.</param>
            <param name="exponentSign">Fourier series exponent sign.</param>
            <param name="levelSize">Level Group Size.</param>
            <param name="k">Index inside of the level.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteFourierTransform.Radix2(MathNet.Numerics.Complex[],System.Int32)">
            <summary>
            Radix-2 generic FFT for power-of-two sized sample vectors.
            </summary>
            <param name="samples">Sample vector, where the FFT is evaluated in place.</param>
            <param name="exponentSign">Fourier series exponent sign.</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteFourierTransform.Radix2Parallel(MathNet.Numerics.Complex[],System.Int32)">
            <summary>
            Radix-2 generic FFT for power-of-two sample vectors (Parallel Version).
            </summary>
            <param name="samples">Sample vector, where the FFT is evaluated in place.</param>
            <param name="exponentSign">Fourier series exponent sign.</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteFourierTransform.Radix2Forward(MathNet.Numerics.Complex[],MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Radix-2 forward FFT for power-of-two sized sample vectors.
            </summary>
            <param name="samples">Sample vector, where the FFT is evaluated in place.</param>
            <param name="options">Fourier Transform Convention Options.</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteFourierTransform.Radix2Inverse(MathNet.Numerics.Complex[],MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Radix-2 inverse FFT for power-of-two sized sample vectors.
            </summary>
            <param name="samples">Sample vector, where the FFT is evaluated in place.</param>
            <param name="options">Fourier Transform Convention Options.</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteFourierTransform.Naive(MathNet.Numerics.Complex[],System.Int32)">
            <summary>
            Naive generic DFT, useful e.g. to verify faster algorithms.
            </summary>
            <param name="samples">Time-space sample vector.</param>
            <param name="exponentSign">Fourier series exponent sign.</param>
            <returns>Corresponding frequency-space vector.</returns>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteFourierTransform.NaiveForward(MathNet.Numerics.Complex[],MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Naive forward DFT, useful e.g. to verify faster algorithms.
            </summary>
            <param name="timeSpace">Time-space sample vector.</param>
            <param name="options">Fourier Transform Convention Options.</param>
            <returns>Corresponding frequency-space vector.</returns>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteFourierTransform.NaiveInverse(MathNet.Numerics.Complex[],MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Naive inverse DFT, useful e.g. to verify faster algorithms.
            </summary>
            <param name="frequencySpace">Frequency-space sample vector.</param>
            <param name="options">Fourier Transform Convention Options.</param>
            <returns>Corresponding time-space vector.</returns>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteFourierTransform.SignByOptions(MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Extract the exponent sign to be used in forward transforms according to the
            provided convention options.
            </summary>
            <param name="options">Fourier Transform Convention Options.</param>
            <returns>Fourier series exponent sign.</returns>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteFourierTransform.ForwardScaleByOptions(MathNet.Numerics.IntegralTransforms.FourierOptions,MathNet.Numerics.Complex[])">
            <summary>
            Rescale FFT-the resulting vector according to the provided convention options.
            </summary>
            <param name="options">Fourier Transform Convention Options.</param>
            <param name="samples">Sample Vector.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteFourierTransform.InverseScaleByOptions(MathNet.Numerics.IntegralTransforms.FourierOptions,MathNet.Numerics.Complex[])">
            <summary>
            Rescale the iFFT-resulting vector according to the provided convention options.
            </summary>
            <param name="options">Fourier Transform Convention Options.</param>
            <param name="samples">Sample Vector.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteFourierTransform.BluesteinSequence(System.Int32)">
            <summary>
            Generate the bluestein sequence for the provided problem size.
            </summary>
            <param name="n">Number of samples.</param>
            <returns>Bluestein sequence exp(I*Pi*k^2/N)</returns>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteFourierTransform.BluesteinConvolutionParallel(MathNet.Numerics.Complex[])">
            <summary>
            Convolution with the bluestein sequence (Parallel Version).
            </summary>
            <param name="samples">Sample Vector.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteFourierTransform.SwapRealImaginary(MathNet.Numerics.Complex[])">
            <summary>
            Swap the real and imaginary parts of each sample.
            </summary>
            <param name="samples">Sample Vector.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteFourierTransform.Bluestein(MathNet.Numerics.Complex[],System.Int32)">
            <summary>
            Bluestein generic FFT for arbitrary sized sample vectors.
            </summary>
            <param name="samples">Time-space sample vector.</param>
            <param name="exponentSign">Fourier series exponent sign.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteFourierTransform.BluesteinForward(MathNet.Numerics.Complex[],MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Bluestein forward FFT for arbitrary sized sample vectors.
            </summary>
            <param name="samples">Sample vector, where the FFT is evaluated in place.</param>
            <param name="options">Fourier Transform Convention Options.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteFourierTransform.BluesteinInverse(MathNet.Numerics.Complex[],MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Bluestein inverse FFT for arbitrary sized sample vectors.
            </summary>
            <param name="samples">Sample vector, where the FFT is evaluated in place.</param>
            <param name="options">Fourier Transform Convention Options.</param>
        </member>
        <member name="T:MathNet.Numerics.Complex32">
            <summary>
            32-bit Complex32 numbers class.
            </summary>
            <remarks>
            <para>
            The class <c>Complex32</c> provides all elementary operations
            on complex numbers. All the operators <c>+</c>, <c>-</c>,
            <c>*</c>, <c>/</c>, <c>==</c>, <c>!=</c> are defined in the
            canonical way. Additional complex trigonometric functions such 
            as <see cref="!:Trig.Cosine(Complex32)"/>, ... 
            are also provided. Note that the <c>Complex32</c> structures 
            has two special constant values <see cref="P:MathNet.Numerics.Complex32.NaN"/> and 
            <see cref="P:MathNet.Numerics.Complex32.Infinity"/>.
            </para>
            <para>
            In order to avoid possible ambiguities resulting from a 
            <c>Complex32(float, float)</c> constructor, the static methods 
            <see cref="M:MathNet.Numerics.Complex32.WithRealImaginary(System.Single,System.Single)"/> and <see cref="M:MathNet.Numerics.Complex32.WithModulusArgument(System.Single,System.Single)"/>
            are provided instead.
            </para>
            <para>
            <code>
            Complex32 x = Complex32.FromRealImaginary(1d, 2d);
            Complex32 y = Complex32.FromModulusArgument(1d, Math.Pi);
            Complex32 z = (x + y) / (x - y);
            </code>
            </para>
            <para>
            For mathematical details about complex numbers, please
            have a look at the <a href="http://en.wikipedia.org/wiki/Complex_number">
            Wikipedia</a>
            </para>
            </remarks>
        </member>
        <member name="T:MathNet.Numerics.IPrecisionSupport`1">
            <summary>
            Support Interface for Precision Operations (like AlmostEquals).
            </summary>
            <typeparam name="T">Type of the implementing class.</typeparam>
        </member>
        <member name="M:MathNet.Numerics.IPrecisionSupport`1.Norm">
            <summary>
            Returns a Norm of a value of this type, which is appropriate for measuring how
            close this value is to zero.
            </summary>
            <returns>A norm of this value.</returns>
        </member>
        <member name="M:MathNet.Numerics.IPrecisionSupport`1.NormOfDifference(`0)">
            <summary>
            Returns a Norm of the difference of two values of this type, which is
            appropriate for measuring how close together these two values are.
            </summary>
            <param name="otherValue">The value to compare with.</param>
            <returns>A norm of the difference between this and the other value.</returns>
        </member>
        <member name="F:MathNet.Numerics.Complex32._i">
            <summary>
            Represents imaginary unit number.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Complex32._infinity">
            <summary>
            Represents a infinite complex number
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Complex32._nan">
            <summary>
            Represents not-a-number.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Complex32._one">
            <summary>
            Representing the one value.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Complex32._zero">
            <summary>
            Representing the zero value.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Complex32._real">
            <summary>
            The real component of the complex number.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Complex32._imag">
            <summary>
            The imaginary component of the complex number.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex32.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the Complex32 structure with the given real
            and imaginary parts.
            </summary>
            <param name="real">
            The value for the real component.
            </param>
            <param name="imaginary">
            The value for the imaginary component.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Exponential">
            <summary>
            Exponential of this <c>Complex32</c> (exp(x), E^x).
            </summary>
            <returns>
            The exponential of this complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.NaturalLogarithm">
            <summary>
            Natural Logarithm of this <c>Complex32</c> (Base E).
            </summary>
            <returns>
            The natural logarithm of this complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Power(MathNet.Numerics.Complex32)">
            <summary>
            Raise this <c>Complex32</c> to the given value.
            </summary>
            <param name="exponent">
            The exponent.
            </param>
            <returns>
            The complex number raised to the given exponent.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Root(MathNet.Numerics.Complex32)">
            <summary>
            Raise this <c>Complex32</c> to the inverse of the given value.
            </summary>
            <param name="rootExponent">
            The root exponent.
            </param>
            <returns>
            The complex raised to the inverse of the given exponent.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Square">
            <summary>
            The Square (power 2) of this <c>Complex32</c>
            </summary>
            <returns>
            The square of this complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.SquareRoot">
            <summary>
            The Square Root (power 1/2) of this <c>Complex32</c>
            </summary>
            <returns>
            The square root of this complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.WithRealImaginary(System.Single,System.Single)">
            <summary>
            Constructs a <c>Complex32</c> from its real
            and imaginary parts.
            </summary>
            <param name="real">
            The value for the real component.
            </param>
            <param name="imaginary">
            The value for the imaginary component.
            </param>
            <returns>
            A new <c>Complex32</c> with the given values.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.WithModulusArgument(System.Single,System.Single)">
            <summary>
            Constructs a <c>Complex32</c> from its modulus and
            argument.
            </summary>
            <param name="modulus">
            Must be non-negative.
            </param>
            <param name="argument">
            Real number.
            </param>
            <returns>
            A new <c>Complex32</c> from the given values.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.ToString">
            <summary>
            A string representation of this complex number.
            </summary>
            <returns>
            The string representation of this complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.ToString(System.String)">
            <summary>
            A string representation of this complex number.
            </summary>
            <returns>
            The string representation of this complex number formatted as specified by the
            format string.
            </returns>
            <param name="format">
            A format specification.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.ToString(System.IFormatProvider)">
            <summary>
            A string representation of this complex number.
            </summary>
            <returns>
            The string representation of this complex number formatted as specified by the
            format provider.
            </returns>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.ToString(System.String,System.IFormatProvider)">
            <summary>
            A string representation of this complex number.
            </summary>
            <returns>
            The string representation of this complex number formatted as specified by the
            format string and format provider.
            </returns>
            <exception cref="T:System.FormatException">
            if the n, is not a number.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            if s, is <see langword="null"/>.
            </exception>
            <param name="format">
            A format specification.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Equals(MathNet.Numerics.Complex32)">
            <summary>
            Checks if two complex numbers are equal. Two complex numbers are equal if their
            corresponding real and imaginary components are equal.
            </summary>
            <returns>
            Returns <c>true</c> if the two objects are the same object, or if their corresponding
            real and imaginary components are equal, <c>false</c> otherwise.
            </returns>
            <param name="other">
            The complex number to compare to with.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.GetHashCode">
            <summary>
            The hash code for the complex number.
            </summary>
            <returns>
            The hash code of the complex number.
            </returns>
            <remarks>
            The hash code is calculated as
            System.Math.Exp(ComplexMath.Absolute(complexNumber)).
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Equals(System.Object)">
            <summary>
            Checks if two complex numbers are equal. Two complex numbers are equal if their
            corresponding real and imaginary components are equal.
            </summary>
            <returns>
            Returns <c>true</c> if the two objects are the same object, or if their corresponding
            real and imaginary components are equal, <c>false</c> otherwise.
            </returns>
            <param name="obj">
            The complex number to compare to with.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Equality(MathNet.Numerics.Complex32,MathNet.Numerics.Complex32)">
            <summary>
            Equality test.
            </summary>
            <param name="complex1">One of complex numbers to compare.</param>
            <param name="complex2">The other complex numbers to compare.</param>
            <returns><c>true</c> if the real and imaginary components of the two complex numbers are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Inequality(MathNet.Numerics.Complex32,MathNet.Numerics.Complex32)">
            <summary>
            Inequality test.
            </summary>
            <param name="complex1">One of complex numbers to compare.</param>
            <param name="complex2">The other complex numbers to compare.</param>
            <returns><c>true</c> if the real or imaginary components of the two complex numbers are not equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_UnaryPlus(MathNet.Numerics.Complex32)">
            <summary>
            Unary addition.
            </summary>
            <param name="summand">The complex number to operate on.</param>
            <returns>Returns the same complex number.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_UnaryNegation(MathNet.Numerics.Complex32)">
            <summary>
            Unary minus.
            </summary>
            <param name="subtrahend">The complex number to operate on.</param>
            <returns>The negated value of the <paramref name="subtrahend"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Addition(MathNet.Numerics.Complex32,MathNet.Numerics.Complex32)">
            <summary>Addition operator. Adds two complex numbers together.</summary>
            <returns>The result of the addition.</returns>
            <param name="summand1">One of the complex numbers to add.</param>
            <param name="summand2">The other complex numbers to add.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Subtraction(MathNet.Numerics.Complex32,MathNet.Numerics.Complex32)">
            <summary>Subtraction operator. Subtracts two complex numbers.</summary>
            <returns>The result of the subtraction.</returns>
            <param name="minuend">The complex number to subtract from.</param>
            <param name="subtrahend">The complex number to subtract.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Addition(MathNet.Numerics.Complex32,System.Single)">
            <summary>Addition operator. Adds a complex number and float together.</summary>
            <returns>The result of the addition.</returns>
            <param name="summand1">The complex numbers to add.</param>
            <param name="summand2">The float value to add.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Subtraction(MathNet.Numerics.Complex32,System.Single)">
            <summary>Subtraction operator. Subtracts float value from a complex value.</summary>
            <returns>The result of the subtraction.</returns>
            <param name="minuend">The complex number to subtract from.</param>
            <param name="subtrahend">The float value to subtract.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Addition(System.Single,MathNet.Numerics.Complex32)">
            <summary>Addition operator. Adds a complex number and float together.</summary>
            <returns>The result of the addition.</returns>
            <param name="summand1">The float value to add.</param>
            <param name="summand2">The complex numbers to add.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Subtraction(System.Single,MathNet.Numerics.Complex32)">
            <summary>Subtraction operator. Subtracts complex value from a float value.</summary>
            <returns>The result of the subtraction.</returns>
            <param name="minuend">The float vale to subtract from.</param>
            <param name="subtrahend">The complex value to subtract.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Multiply(MathNet.Numerics.Complex32,MathNet.Numerics.Complex32)">
            <summary>Multiplication operator. Multiplies two complex numbers.</summary>
            <returns>The result of the multiplication.</returns>
            <param name="multiplicand">One of the complex numbers to multiply.</param>
            <param name="multiplier">The other complex number to multiply.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Multiply(System.Single,MathNet.Numerics.Complex32)">
            <summary>Multiplication operator. Multiplies a complex number with a float value.</summary>
            <returns>The result of the multiplication.</returns>
            <param name="multiplicand">The float value to multiply.</param>
            <param name="multiplier">The complex number to multiply.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Multiply(MathNet.Numerics.Complex32,System.Single)">
            <summary>Multiplication operator. Multiplies a complex number with a float value.</summary>
            <returns>The result of the multiplication.</returns>
            <param name="multiplicand">The complex number to multiply.</param>
            <param name="multiplier">The float value to multiply.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Division(MathNet.Numerics.Complex32,MathNet.Numerics.Complex32)">
            <summary>Division operator. Divides a complex number by another.</summary>
            <returns>The result of the division.</returns>
            <param name="dividend">The dividend.</param>
            <param name="divisor">The divisor.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Division(System.Single,MathNet.Numerics.Complex32)">
            <summary>Division operator. Divides a float value by a complex number.</summary>
            <returns>The result of the division.</returns>
            <param name="dividend">The dividend.</param>
            <param name="divisor">The divisor.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Division(MathNet.Numerics.Complex32,System.Single)">
            <summary>Division operator. Divides a complex number by a float value.</summary>
            <returns>The result of the division.</returns>
            <param name="dividend">The dividend.</param>
            <param name="divisor">The divisor.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Plus">
            <summary>
            Unary addition.
            </summary>
            <returns>
            Returns the same complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Negate">
            <summary>
            Unary minus.
            </summary>
            <returns>
            The negated value of this complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Add(MathNet.Numerics.Complex32)">
            <summary>
            Adds a complex number to this one.
            </summary>
            <returns>
            The result of the addition.
            </returns>
            <param name="other">
            The other complex number to add.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Subtract(MathNet.Numerics.Complex32)">
            <summary>
            Subtracts a complex number from this one.
            </summary>
            <returns>
            The result of the subtraction.
            </returns>
            <param name="other">
            The other complex number to subtract from this one.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Multiply(MathNet.Numerics.Complex32)">
            <summary>
            Multiplies this complex number with this one.
            </summary>
            <returns>
            The result of the multiplication.
            </returns>
            <param name="multiplier">
            The complex number to multiply.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Divide(MathNet.Numerics.Complex32)">
            <summary>
            Divides this complex number by another.
            </summary>
            <returns>
            The result of the division.
            </returns>
            <param name="divisor">
            The divisor.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.MathNet#Numerics#IPrecisionSupport{MathNet#Numerics#Complex32}#Norm">
            <summary>
            Returns a Norm of a value of this type, which is appropriate for measuring how
            close this value is to zero.
            </summary>
            <returns>
            A norm of this value.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.MathNet#Numerics#IPrecisionSupport{MathNet#Numerics#Complex32}#NormOfDifference(MathNet.Numerics.Complex32)">
            <summary>
            Returns a Norm of the difference of two values of this type, which is
            appropriate for measuring how close together these two values are.
            </summary>
            <param name="otherValue">
            The value to compare with.
            </param>
            <returns>
            A norm of the difference between this and the other value.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Parse(System.String)">
            <summary>
            Creates a complex number based on a string. The string can be in the
            following formats (without the quotes): 'n', 'ni', 'n +/- ni',
            'ni +/- n', 'n,n', 'n,ni,' '(n,n)', or '(n,ni)', where n is a float.
            </summary>
            <returns>
            A complex number containing the value specified by the given string.
            </returns>
            <param name="value">
            The string to parse.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates a complex number based on a string. The string can be in the
            following formats (without the quotes): 'n', 'ni', 'n +/- ni',
            'ni +/- n', 'n,n', 'n,ni,' '(n,n)', or '(n,ni)', where n is a float.
            </summary>
            <returns>
            A complex number containing the value specified by the given string.
            </returns>
            <param name="value">
            the string to parse.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific
            formatting information.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.ParsePart(System.Collections.Generic.LinkedListNode{System.String}@,System.Boolean@,System.IFormatProvider)">
            <summary>
            Parse a part (real or complex) from a complex number.
            </summary>
            <param name="token">Start Token.</param>
            <param name="imaginary">Is set to <c>true</c> if the part identified itself as being imaginary.</param>
            <param name="format">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific
            formatting information.
            </param>
            <returns>Resulting part as float.</returns>
            <exception cref="T:System.FormatException"/>
        </member>
        <member name="M:MathNet.Numerics.Complex32.TryParse(System.String,MathNet.Numerics.Complex32@)">
            <summary>
            Converts the string representation of a complex number to a single-precision complex number equivalent. 
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A string containing a complex number to convert. 
            </param>
            <param name="result">
            The parsed value.
            </param>
            <returns>
            If the conversion succeeds, the result will contain a complex number equivalent to value. 
            Otherwise the result will contain complex32.Zero.  This parameter is passed uninitialized
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.TryParse(System.String,System.IFormatProvider,MathNet.Numerics.Complex32@)">
            <summary>
            Converts the string representation of a complex number to single-precision complex number equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A string containing a complex number to convert.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about value.
            </param>
            <param name="result">
            The parsed value.
            </param>
            <returns>
            If the conversion succeeds, the result will contain a complex number equivalent to value.
            Otherwise the result will contain complex32.Zero.  This parameter is passed uninitialized
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Explicit(System.Decimal)~MathNet.Numerics.Complex32">
            <summary>
            Explicit conversion of a real decimal to a <c>Complex32</c>.
            </summary>
            <param name="value">The decimal value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Explicit(MathNet.Numerics.Complex)~MathNet.Numerics.Complex32">
            <summary>
            Explicit conversion of a <c>Complex</c> to a <c>Complex32</c>.
            </summary>
            <param name="value">The decimal value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Implicit(System.Byte)~MathNet.Numerics.Complex32">
            <summary>
            Implicit conversion of a real byte to a <c>Complex32</c>.
            </summary>
            <param name="value">The byte value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Implicit(System.Int16)~MathNet.Numerics.Complex32">
            <summary>
            Implicit conversion of a real short to a <c>Complex32</c>.
            </summary>
            <param name="value">The short value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Implicit(System.Int32)~MathNet.Numerics.Complex32">
            <summary>
            Implicit conversion of a real int to a <c>Complex32</c>.
            </summary>
            <param name="value">The int value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Implicit(System.Int64)~MathNet.Numerics.Complex32">
            <summary>
            Implicit conversion of a real long to a <c>Complex32</c>.
            </summary>
            <param name="value">The long value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Implicit(System.UInt32)~MathNet.Numerics.Complex32">
            <summary>
            Implicit conversion of a real uint to a <c>Complex32</c>.
            </summary>
            <param name="value">The uint value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Implicit(System.UInt64)~MathNet.Numerics.Complex32">
            <summary>
            Implicit conversion of a real ulong to a <c>Complex32</c>.
            </summary>
            <param name="value">The ulong value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Implicit(System.Single)~MathNet.Numerics.Complex32">
            <summary>
            Implicit conversion of a real float to a <c>Complex32</c>.
            </summary>
            <param name="value">The float value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Explicit(System.Double)~MathNet.Numerics.Complex32">
            <summary>
            Implicit conversion of a real double to a <c>Complex32</c>.
            </summary>
            <param name="value">The double value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="P:MathNet.Numerics.Complex32.Infinity">
            <summary>
            Gets a value representing the infinity value. This field is constant.
            </summary>
            <value>The infinity.</value>
            <remarks>
            The semantic associated to this value is a <c>Complex32</c> of
            infinite real and imaginary part. If you need more formal complex
            number handling (according to the Riemann Sphere and the extended
            complex plane C*, or using directed infinity) please check out the
            alternative Math.NET symbolics packages instead.
            </remarks>
            <value>A value representing the infinity value.</value>
        </member>
        <member name="P:MathNet.Numerics.Complex32.NaN">
            <summary>
            Gets a value representing not-a-number. This field is constant.
            </summary>
            <value>A value representing not-a-number.</value>
        </member>
        <member name="P:MathNet.Numerics.Complex32.ImaginaryOne">
            <summary>
            Gets a value representing the imaginary unit number. This field is constant.
            </summary>
            <value>A value representing the imaginary unit number.</value>
        </member>
        <member name="P:MathNet.Numerics.Complex32.Zero">
            <summary>
            Gets a value representing the zero value. This field is constant.
            </summary>
            <value>A value representing the zero value.</value>
        </member>
        <member name="P:MathNet.Numerics.Complex32.One">
            <summary>
            Gets a value representing the <c>1</c> value. This field is constant.
            </summary>
            <value>A value representing the <c>1</c> value.</value>
        </member>
        <member name="P:MathNet.Numerics.Complex32.Real">
            <summary>
            Gets the real component of the complex number.
            </summary>
            <value>The real component of the complex number.</value>
        </member>
        <member name="P:MathNet.Numerics.Complex32.Imaginary">
            <summary>
            Gets the real imaginary component of the complex number.
            </summary>
            <value>The real imaginary component of the complex number.</value>
        </member>
        <member name="P:MathNet.Numerics.Complex32.IsZero">
            <summary>
            Gets a value indicating whether the <c>Complex32</c> is zero.
            </summary>
            <value><c>true</c> if this instance is zero; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MathNet.Numerics.Complex32.IsOne">
            <summary>
            Gets a value indicating whether the <c>Complex32</c> is one.
            </summary>
            <value><c>true</c> if this instance is one; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MathNet.Numerics.Complex32.IsImaginaryOne">
            <summary>
            Gets a value indicating whether the <c>Complex32</c> is the imaginary unit.
            </summary>
            <value><c>true</c> if this instance is ImaginaryOne; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MathNet.Numerics.Complex32.IsNaN">
            <summary>
            Gets a value indicating whether the provided <c>Complex32</c>evaluates
            to a value that is not a number.
            </summary>
            <value>
            <c>true</c> if this instance is <see cref="P:MathNet.Numerics.Complex32.NaN"/>; otherwise,
            <c>false</c>.
            </value>
        </member>
        <member name="P:MathNet.Numerics.Complex32.IsInfinity">
            <summary>
            Gets a value indicating whether the provided <c>Complex32</c> evaluates to an
            infinite value.
            </summary>
            <value>
                <c>true</c> if this instance is infinite; otherwise, <c>false</c>.
            </value>
            <remarks>
            True if it either evaluates to a complex infinity
            or to a directed infinity.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.Complex32.IsReal">
            <summary>
            Gets a value indicating whether the provided <c>Complex32</c> is real.
            </summary>
            <value><c>true</c> if this instance is a real number; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MathNet.Numerics.Complex32.IsRealNonNegative">
            <summary>
            Gets a value indicating whether the provided <c>Complex32</c> is real and not negative, that is &gt;= 0.
            </summary>
            <value>
                <c>true</c> if this instance is real nonnegative number; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MathNet.Numerics.Complex32.Conjugate">
            <summary>
            Gets the conjugate of this <c>Complex32</c>.
            </summary>
            <remarks>
            The semantic of <i>setting the conjugate</i> is such that
            <code>
            // a, b of type Complex32
            a.Conjugate = b;
            </code>
            is equivalent to
            <code>
            // a, b of type Complex32
            a = b.Conjugate
            </code>
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.Complex32.Magnitude">
            <summary>
            Gets the magnitude or modulus of this <c>Complex32</c>.
            </summary>
            <seealso cref="P:MathNet.Numerics.Complex32.Phase"/>
        </member>
        <member name="P:MathNet.Numerics.Complex32.MagnitudeSquared">
            <summary>
            Gets the squared magnitude of this <c>Complex32</c>.
            </summary>
            <seealso cref="P:MathNet.Numerics.Complex32.Phase"/>
        </member>
        <member name="P:MathNet.Numerics.Complex32.Phase">
            <summary>
            Gets phase or argument of this <c>Complex32</c>.
            </summary>
            <remarks>
            Phase always returns a value bigger than negative Pi and
            smaller or equal to Pi. If this <c>Complex32</c> is zero, the Complex32
            is assumed to be positive real with an argument of zero.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.Complex32.Sign">
            <summary>
            Gets the unity of this complex (same argument, but on the unit circle; exp(I*arg))
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Constants">
            <summary>
            A collection of frequently used mathematical constants.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.E">
            <summary>The number e</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Log2E">
            <summary>The number log[2](e)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Log10E">
            <summary>The number log[10](e)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Ln2">
            <summary>The number log[e](2)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Ln10">
            <summary>The number log[e](10)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.LnPi">
            <summary>The number log[e](pi)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Ln2PiOver2">
            <summary>The number log[e](2*pi)/2</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.InvE">
            <summary>The number 1/e</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.SqrtE">
            <summary>The number sqrt(e)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Sqrt2">
            <summary>The number sqrt(2)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Sqrt1Over2">
            <summary>The number sqrt(1/2) = 1/sqrt(2) = sqrt(2)/2</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.HalfSqrt3">
            <summary>The number sqrt(3)/2</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Pi">
            <summary>The number pi</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Pi2">
            <summary>The number 2*pi</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.OneOverPi">
            <summary>The number 1/pi</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.PiOver2">
            <summary>The number pi/2</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.PiOver4">
            <summary>The number pi/4</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.SqrtPi">
            <summary>The number sqrt(pi)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Sqrt2Pi">
            <summary>The number sqrt(2pi)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Sqrt2PiE">
            <summary>The number sqrt(2*pi*e)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.LogSqrt2Pi">
            <summary>The number log(sqrt(2*pi))</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.LogSqrt2PiE">
            <summary>The number log(sqrt(2*pi*e))</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.LogTwoSqrtEOverPi">
            <summary>The number log(2 * sqrt(e / pi))</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.InvPi">
            <summary>The number 1/pi</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.TwoInvPi">
            <summary>The number 2/pi</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.InvSqrtPi">
            <summary>The number 1/sqrt(pi)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.InvSqrt2Pi">
            <summary>The number 1/sqrt(2pi)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.TwoInvSqrtPi">
            <summary>The number 2/sqrt(pi)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.TwoSqrtEOverPi">
            <summary>The number 2 * sqrt(e / pi)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Degree">
            <summary>The number (pi)/180 - factor to convert from Degree (deg) to Radians (rad).</summary>
            <seealso cref="M:MathNet.Numerics.Trig.DegreeToRadian(System.Double)"/>
            <seealso cref="M:MathNet.Numerics.Trig.RadianToDegree(System.Double)"/>
        </member>
        <member name="F:MathNet.Numerics.Constants.Grad">
            <summary>The number (pi)/200 - factor to convert from NewGrad (grad) to Radians (rad).</summary>
            <seealso cref="M:MathNet.Numerics.Trig.GradToRadian(System.Double)"/>
            <seealso cref="M:MathNet.Numerics.Trig.RadianToGrad(System.Double)"/>
        </member>
        <member name="F:MathNet.Numerics.Constants.PowerDecibel">
            <summary>The number ln(10)/20 - factor to convert from Power Decibel (dB) to Neper (Np). Use this version when the Decibel represent a power gain but the compared values are not powers (e.g. amplitude, current, voltage).</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.NeutralDecibel">
            <summary>The number ln(10)/10 - factor to convert from Neutral Decibel (dB) to Neper (Np). Use this version when either both or neither of the Decibel and the compared values represent powers.</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Catalan">
            <summary>The Catalan constant</summary>
            <remarks>Sum(k=0 -> inf){ (-1)^k/(2*k + 1)2 }</remarks>
        </member>
        <member name="F:MathNet.Numerics.Constants.EulerMascheroni">
            <summary>The Euler-Mascheroni constant</summary>
            <remarks>lim(n -> inf){ Sum(k=1 -> n) { 1/k - log(n) } }</remarks>
        </member>
        <member name="F:MathNet.Numerics.Constants.GoldenRatio">
            <summary>The number (1+sqrt(5))/2, also known as the golden ratio</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Glaisher">
            <summary>The Glaisher constant</summary>
            <remarks>e^(1/12 - Zeta(-1))</remarks>
        </member>
        <member name="F:MathNet.Numerics.Constants.Khinchin">
            <summary>The Khinchin constant</summary>
            <remarks>prod(k=1 -> inf){1+1/(k*(k+2))^log(k,2)}</remarks>
        </member>
        <member name="F:MathNet.Numerics.Constants.SizeOfDouble">
            <summary>
            The size of a double in bytes.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.SpeedOfLight">
            <summary>Speed of Light in Vacuum: c_0 = 2.99792458e8 [m s^-1] (defined, exact; 2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.MagneticPermeability">
            <summary>Magnetic Permeability in Vacuum: mu_0 = 4*Pi * 10^-7 [N A^-2 = kg m A^-2 s^-2] (defined, exact; 2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ElectricPermittivity">
            <summary>Electric Permittivity in Vacuum: epsilon_0 = 1/(mu_0*c_0^2) [F m^-1 = A^2 s^4 kg^-1 m^-3] (defined, exact; 2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.CharacteristicImpedanceVacuum">
            <summary>Characteristic Impedance of Vacuum: Z_0 = mu_0*c_0 [Ohm = m^2 kg s^-3 A^-2] (defined, exact; 2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.GravitationalConstant">
            <summary>Newtonian Constant of Gravitation: G = 6.67429e-11 [m^3 kg^-1 s^-2] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.PlancksConstant">
            <summary>Planck's constant: h = 6.62606896e-34 [J s = m^2 kg s^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.DiracsConstant">
            <summary>Reduced Planck's constant: h_bar = h / (2*Pi) [J s = m^2 kg s^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.PlancksMass">
            <summary>Planck mass: m_p = (h_bar*c_0/G)^(1/2) [kg] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.PlancksTemperature">
            <summary>Planck temperature: T_p = (h_bar*c_0^5/G)^(1/2)/k [K] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.PlancksLength">
            <summary>Planck length: l_p = h_bar/(m_p*c_0) [m] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.PlancksTime">
            <summary>Planck time: t_p = l_p/c_0 [s] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ElementaryCharge">
            <summary>Elementary Electron Charge: e = 1.602176487e-19 [C = A s] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.MagneticFluxQuantum">
            <summary>Magnetic Flux Quantum: theta_0 = h/(2*e) [Wb = m^2 kg s^-2 A^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ConductanceQuantum">
            <summary>Conductance Quantum: G_0 = 2*e^2/h [S = m^-2 kg^-1 s^3 A^2] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.JosephsonConstant">
            <summary>Josephson Constant: K_J = 2*e/h [Hz V^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.VonKlitzingConstant">
            <summary>Von Klitzing Constant: R_K = h/e^2 [Ohm = m^2 kg s^-3 A^-2] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.BohrMagneton">
            <summary>Bohr Magneton: mu_B = e*h_bar/2*m_e [J T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.NuclearMagneton">
            <summary>Nuclear Magneton: mu_N = e*h_bar/2*m_p [J T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.FineStructureConstant">
            <summary>Fine Structure Constant: alpha = e^2/4*Pi*e_0*h_bar*c_0 [1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.RydbergConstant">
            <summary>Rydberg Constant: R_infty = alpha^2*m_e*c_0/2*h [m^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.BohrRadius">
            <summary>Bor Radius: a_0 = alpha/4*Pi*R_infty [m] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.HartreeEnergy">
            <summary>Hartree Energy: E_h = 2*R_infty*h*c_0 [J] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.QuantumOfCirculation">
            <summary>Quantum of Circulation: h/2*m_e [m^2 s^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.FermiCouplingConstant">
            <summary>Fermi Coupling Constant: G_F/(h_bar*c_0)^3 [GeV^-2] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.WeakMixingAngle">
            <summary>Weak Mixin Angle: sin^2(theta_W) [1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ElectronMass">
            <summary>Electron Mass: [kg] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ElectronMassEnergyEquivalent">
            <summary>Electron Mass Energy Equivalent: [J] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ElectronMolarMass">
            <summary>Electron Molar Mass: [kg mol^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ComptonWavelength">
            <summary>Electron Compton Wavelength: [m] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ClassicalElectronRadius">
            <summary>Classical Electron Radius: [m] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ThomsonCrossSection">
            <summary>Tomson Cross Section: [m^2] (2002 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ElectronMagneticMoment">
            <summary>Electron Magnetic Moment: [J T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ElectronGFactor">
            <summary>Electon G-Factor: [1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.MuonMass">
            <summary>Muon Mass: [kg] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.MuonMassEnegryEquivalent">
            <summary>Muon Mass Energy Equivalent: [J] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.MuonMolarMass">
            <summary>Muon Molar Mass: [kg mol^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.MuonComptonWavelength">
            <summary>Muon Compton Wavelength: [m] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.MuonMagneticMoment">
            <summary>Muon Magnetic Moment: [J T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.MuonGFactor">
            <summary>Muon G-Factor: [1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.TauMass">
            <summary>Tau Mass: [kg] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.TauMassEnergyEquivalent">
            <summary>Tau Mass Energy Equivalent: [J] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.TauMolarMass">
            <summary>Tau Molar Mass: [kg mol^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.TauComptonWavelength">
            <summary>Tau Compton Wavelength: [m] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ProtonMass">
            <summary>Proton Mass: [kg] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ProtonMassEnergyEquivalent">
            <summary>Proton Mass Energy Equivalent: [J] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ProtonMolarMass">
            <summary>Proton Molar Mass: [kg mol^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ProtonComptonWavelength">
            <summary>Proton Compton Wavelength: [m] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ProtonMagneticMoment">
            <summary>Proton Magnetic Moment: [J T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ProtonGFactor">
            <summary>Proton G-Factor: [1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ShieldedProtonMagneticMoment">
            <summary>Proton Shielded Magnetic Moment: [J T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ProtonGyromagneticRatio">
            <summary>Proton Gyro-Magnetic Ratio: [s^-1 T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ShieldedProtonGyromagneticRatio">
            <summary>Proton Shielded Gyro-Magnetic Ratio: [s^-1 T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.NeutronMass">
            <summary>Neutron Mass: [kg] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.NeutronMassEnegryEquivalent">
            <summary>Neutron Mass Energy Equivalent: [J] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.NeutronMolarMass">
            <summary>Neutron Molar Mass: [kg mol^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.NeutronComptonWavelength">
            <summary>Neuron Compton Wavelength: [m] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.NeutronMagneticMoment">
            <summary>Neutron Magnetic Moment: [J T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.NeutronGFactor">
            <summary>Neutron G-Factor: [1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.NeutronGyromagneticRatio">
            <summary>Neutron Gyro-Magnetic Ratio: [s^-1 T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.DeuteronMass">
            <summary>Deuteron Mass: [kg] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.DeuteronMassEnegryEquivalent">
            <summary>Deuteron Mass Energy Equivalent: [J] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.DeuteronMolarMass">
            <summary>Deuteron Molar Mass: [kg mol^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.DeuteronMagneticMoment">
            <summary>Deuteron Magnetic Moment: [J T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.HelionMass">
            <summary>Helion Mass: [kg] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.HelionMassEnegryEquivalent">
            <summary>Helion Mass Energy Equivalent: [J] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.HelionMolarMass">
            <summary>Helion Molar Mass: [kg mol^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Yotta">
            <summary>The SI prefix factor corresponding to 1 000 000 000 000 000 000 000 000</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Zetta">
            <summary>The SI prefix factor corresponding to 1 000 000 000 000 000 000 000</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Exa">
            <summary>The SI prefix factor corresponding to 1 000 000 000 000 000 000</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Peta">
            <summary>The SI prefix factor corresponding to 1 000 000 000 000 000</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Tera">
            <summary>The SI prefix factor corresponding to 1 000 000 000 000</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Giga">
            <summary>The SI prefix factor corresponding to 1 000 000 000</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Mega">
            <summary>The SI prefix factor corresponding to 1 000 000</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Kilo">
            <summary>The SI prefix factor corresponding to 1 000</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Hecto">
            <summary>The SI prefix factor corresponding to 100</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Deca">
            <summary>The SI prefix factor corresponding to 10</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Deci">
            <summary>The SI prefix factor corresponding to 0.1</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Centi">
            <summary>The SI prefix factor corresponding to 0.01</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Milli">
            <summary>The SI prefix factor corresponding to 0.001</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Micro">
            <summary>The SI prefix factor corresponding to 0.000 001</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Nano">
            <summary>The SI prefix factor corresponding to 0.000 000 001</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Pico">
            <summary>The SI prefix factor corresponding to 0.000 000 000 001</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Femto">
            <summary>The SI prefix factor corresponding to 0.000 000 000 000 001</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Atto">
            <summary>The SI prefix factor corresponding to 0.000 000 000 000 000 001</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Zepto">
            <summary>The SI prefix factor corresponding to 0.000 000 000 000 000 000 001</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Yocto">
            <summary>The SI prefix factor corresponding to 0.000 000 000 000 000 000 000 001</summary>
        </member>
        <member name="T:MathNet.Numerics.Threading.Parallel">
            <summary>
            Provides support for parallel loops.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Threading.Parallel.ScalingFactor">
            <summary>
            The amount to scale the foreach buffer after each iteration.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Threading.Parallel.MaxBlockSize">
            <summary>
            The maximum size of the foreach buffer.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Threading.Parallel.IntialBlockSize">
            <summary>
            The initial size of the for each buffer.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Threading.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})">
            <summary>
            Executes a for loop in which iterations may run in parallel. 
            </summary>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="body">The body to be invoked for each iteration.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="body"/> argument is null.</exception>
            <exception cref="T:MathNet.Numerics.Threading.AggregateException">At least one invocation of the body threw an exception.</exception>
        </member>
        <member name="M:MathNet.Numerics.Threading.Parallel.For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,``0,``0},System.Action{``0})">
            <summary>
            Executes a for loop in which iterations may run in parallel.
            </summary>
            <typeparam name="T">The type of the thread-local data.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="localInit">The function delegate that returns the initial state of the local data for each thread.</param>
            <param name="body">The delegate that is invoked once per iteration.</param>
            <param name="localFinally">The delegate that performs a final action on the local state of each thread.</param>
        </member>
        <member name="M:MathNet.Numerics.Threading.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Executes a for each operation on an IEnumerable{T} in which iterations may run in parallel.
            </summary>
            <typeparam name="T">The type of the data in the source.</typeparam>
            <param name="source">An enumerable data source.</param>
            <param name="body">The delegate that is invoked once per iteration.</param>
        </member>
        <member name="M:MathNet.Numerics.Threading.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,``1,``1},System.Action{``1})">
            <summary>
            Executes a for each operation on an IEnumerable{TSource in which iterations may run in parallel.
            </summary>
            <typeparam name="TSource">The type of the data in the source.</typeparam>
            <typeparam name="TLocal">The type of the thread-local data.</typeparam>
            <param name="source">An enumerable data source.</param>
            <param name="localInit">The function delegate that returns the initial state of the local data for each thread.</param>
            <param name="body">The delegate that is invoked once per iteration.</param>
            <param name="localFinally">The delegate that performs a final action on the local state of each thread.</param>
        </member>
        <member name="M:MathNet.Numerics.Threading.Parallel.Run(System.Action[])">
            <summary>
            Executes each of the provided actions inside a discrete, asynchronous task. 
            </summary>
            <param name="actions">An array of actions to execute.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="actions"/> argument is null.</exception>
            <exception cref="T:System.ArgumentException">The actions array contains a null element.</exception>
            <exception cref="T:MathNet.Numerics.Threading.AggregateException">An action threw an exception.</exception>
        </member>
        <member name="M:MathNet.Numerics.Threading.Parallel.Invoke(System.Action[])">
            <summary>
            Executes each of the provided actions inside a discrete, asynchronous task. 
            </summary>
            <param name="actions">An array of actions to execute.</param>
            <exception cref="T:System.ArgumentException">The actions array contains a null element.</exception>
            <exception cref="T:MathNet.Numerics.Threading.AggregateException">An action threw an exception.</exception>
        </member>
        <member name="M:MathNet.Numerics.Threading.Parallel.WaitForTasksToComplete(MathNet.Numerics.Threading.Task[])">
            <summary>
            Waits for tasks to complete.
            </summary>
            <param name="tasks">The tasks.</param>
        </member>
        <member name="M:MathNet.Numerics.Threading.Parallel.CollectExceptions(System.Collections.Generic.IEnumerable{MathNet.Numerics.Threading.Task})">
            <summary>
            Collects the exceptions and dispose tasks.
            </summary>
            <param name="tasks">The tasks.</param>
        </member>
        <member name="T:MathNet.Numerics.Sorting">
            <summary>
            Sorting algorithms for single, tuple and triple lists.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Sorting.Sort``1(System.Collections.Generic.IList{``0})">
            <summary>
            Sort a list of keys, in place using the quick sort algorithm.
            </summary>
            <typeparam name="T">The type of elements stored in the list.</typeparam>
            <param name="keys">List to sort.</param>
        </member>
        <member name="M:MathNet.Numerics.Sorting.Sort``2(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1})">
            <summary>
            Sort a list of keys and items with respect to the keys, in place using the quick sort algorithm.
            </summary>
            <typeparam name="TKey">The type of elements stored in the key list.</typeparam>
            <typeparam name="TItem">The type of elements stored in the item list.</typeparam>
            <param name="keys">List to sort.</param>
            <param name="items">List to permute the same way as the key list.</param>
        </member>
        <member name="M:MathNet.Numerics.Sorting.Sort``3(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2})">
            <summary>
            Sort a list of keys, items1 and items2 with respect to the keys, in place using the quick sort algorithm.
            </summary>
            <typeparam name="TKey">The type of elements stored in the key list.</typeparam>
            <typeparam name="TItem1">The type of elements stored in the first item list.</typeparam>
            <typeparam name="TItem2">The type of elements stored in the second item list.</typeparam>
            <param name="keys">List to sort.</param>
            <param name="items1">First list to permute the same way as the key list.</param>
            <param name="items2">Second list to permute the same way as the key list.</param>
        </member>
        <member name="M:MathNet.Numerics.Sorting.Sort``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Sort a range of a list of keys, in place using the quick sort algorithm.
            </summary>
            <typeparam name="T">The type of elements in the key list.</typeparam>
            <param name="keys">List to sort.</param>
            <param name="index">The zero-based starting index of the range to sort.</param>
            <param name="count">The length of the range to sort.</param>
        </member>
        <member name="M:MathNet.Numerics.Sorting.Sort``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sort a list of keys, in place using the quick sort algorithm using the quick sort algorithm.
            </summary>
            <typeparam name="T">The type of elements in the key list.</typeparam>
            <param name="keys">List to sort.</param>
            <param name="comparer">Comparison, defining the sort order.</param>
        </member>
        <member name="M:MathNet.Numerics.Sorting.Sort``2(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sort a list of keys and items with respect to the keys, in place using the quick sort algorithm.
            </summary>
            <typeparam name="TKey">The type of elements in the key list.</typeparam>
            <typeparam name="TItem">The type of elements in the item list.</typeparam>
            <param name="keys">List to sort.</param>
            <param name="items">List to permute the same way as the key list.</param>
            <param name="comparer">Comparison, defining the sort order.</param>
        </member>
        <member name="M:MathNet.Numerics.Sorting.Sort``3(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sort a list of keys, items1 and items2 with respect to the keys, in place using the quick sort algorithm.
            </summary>
            <typeparam name="TKey">The type of elements in the key list.</typeparam>
            <typeparam name="TItem1">The type of elements in the first item list.</typeparam>
            <typeparam name="TItem2">The type of elements in the second item list.</typeparam>
            <param name="keys">List to sort.</param>
            <param name="items1">First list to permute the same way as the key list.</param>
            <param name="items2">Second list to permute the same way as the key list.</param>
            <param name="comparer">Comparison, defining the sort order.</param>
        </member>
        <member name="M:MathNet.Numerics.Sorting.Sort``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary>
            Sort a range of a list of keys, in place using the quick sort algorithm.
            </summary>
            <typeparam name="T">The type of element in the list.</typeparam>
            <param name="keys">List to sort.</param>
            <param name="index">The zero-based starting index of the range to sort.</param>
            <param name="count">The length of the range to sort.</param>
            <param name="comparer">Comparison, defining the sort order.</param>
        </member>
        <member name="M:MathNet.Numerics.Sorting.QuickSort``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0},System.Int32,System.Int32)">
            <summary>
            Recursive implementation for an in place quick sort on a list.
            </summary>
            <typeparam name="T">The type of the list on which the quick sort is performed.</typeparam>
            <param name="keys">The list which is sorted using quick sort.</param>
            <param name="comparer">The method with which to compare two elements of the quick sort.</param>
            <param name="left">The left boundary of the quick sort.</param>
            <param name="right">The right boundary of the quick sort.</param>
        </member>
        <member name="M:MathNet.Numerics.Sorting.QuickSort``2(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1},System.Collections.Generic.IComparer{``0},System.Int32,System.Int32)">
            <summary>
            Recursive implementation for an in place quick sort on a list while reordering one other list accordingly.
            </summary>
            <typeparam name="T">The type of the list on which the quick sort is performed.</typeparam>
            <typeparam name="TItems">The type of the list which is automatically reordered accordingly.</typeparam>
            <param name="keys">The list which is sorted using quick sort.</param>
            <param name="items">The list which is automatically reordered accordingly.</param>
            <param name="comparer">The method with which to compare two elements of the quick sort.</param>
            <param name="left">The left boundary of the quick sort.</param>
            <param name="right">The right boundary of the quick sort.</param>
        </member>
        <member name="M:MathNet.Numerics.Sorting.QuickSort``3(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2},System.Collections.Generic.IComparer{``0},System.Int32,System.Int32)">
            <summary>
            Recursive implementation for an in place quick sort on one list while reordering two other lists accordingly.
            </summary>
            <typeparam name="T">The type of the list on which the quick sort is performed.</typeparam>
            <typeparam name="TItems1">The type of the first list which is automatically reordered accordingly.</typeparam>
            <typeparam name="TItems2">The type of the second list which is automatically reordered accordingly.</typeparam>
            <param name="keys">The list which is sorted using quick sort.</param>
            <param name="items1">The first list which is automatically reordered accordingly.</param>
            <param name="items2">The second list which is automatically reordered accordingly.</param>
            <param name="comparer">The method with which to compare two elements of the quick sort.</param>
            <param name="left">The left boundary of the quick sort.</param>
            <param name="right">The right boundary of the quick sort.</param>
        </member>
        <member name="M:MathNet.Numerics.Sorting.Swap``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Performs an in place swap of two elements in a list.
            </summary>
            <typeparam name="T">The type of elements stored in the list.</typeparam>
            <param name="keys">The list in which the elements are stored.</param>
            <param name="a">The index of the first element of the swap.</param>
            <param name="b">The index of the second element of the swap.</param>
        </member>
        <member name="T:MathNet.Numerics.Random.Mcg59">
            <summary>
            Multiplicative congruential generator using a modulus of 2^59 and a multiplier of 13^13.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Random.AbstractRandomNumberGenerator">
            <summary>
            Abstract class for random number generators. This class introduces a layer between <see cref="T:System.Random"/>
            and the Math.Net Numerics random number generators to provide thread safety.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Random.AbstractRandomNumberGenerator._sampleMethod">
            <summary>
            The method that actually generates samples.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Random.AbstractRandomNumberGenerator._lock">
            <summary>
            The object that will be locked for thread safety.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Random.AbstractRandomNumberGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.AbstractRandomNumberGenerator"/> class using
            the value of <see cref="P:MathNet.Numerics.Control.ThreadSafeRandomNumberGenerators"/> to set whether
            the instance is thread safe or not.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Random.AbstractRandomNumberGenerator.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.AbstractRandomNumberGenerator"/> class.
            </summary>
            <param name="threadSafe">if set to <c>true</c> , the class is thread safe.</param>
            <remarks>Thread safe instances are two and half times slower than non-thread
            safe classes.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Random.AbstractRandomNumberGenerator.NextDouble(System.Int32)">
            <summary>
            Returns an array of uniformly distributed random doubles in the interval [0.0,1.0].
            </summary>
            <param name="n">The size of the array.</param>
            <returns>
            An array of uniformly distributed random doubles in the interval [0.0,1.0].
            </returns>
            <exception cref="T:System.ArgumentException">if n is not greater than 0.</exception>
        </member>
        <member name="M:MathNet.Numerics.Random.AbstractRandomNumberGenerator.Next">
            <summary>
            Returns a nonnegative random number.
            </summary>
            <returns>
            A 32-bit signed integer greater than or equal to zero and less than <see cref="F:System.Int32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Random.AbstractRandomNumberGenerator.Next(System.Int32)">
            <summary>
            Returns a random number less then a specified maximum.
            </summary>
            <param name="maxValue">The exclusive upper bound of the random number returned.</param>
            <returns>A 32-bit signed integer less than <paramref name="maxValue"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maxValue"/> is negative. </exception>
        </member>
        <member name="M:MathNet.Numerics.Random.AbstractRandomNumberGenerator.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random number within a specified range.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The exclusive upper bound of the random number returned. <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.</param>
            <returns>
            A 32-bit signed integer greater than or equal to <paramref name="minValue"/> and less than <paramref name="maxValue"/>; that is, the range of return values includes <paramref name="minValue"/> but not <paramref name="maxValue"/>. If <paramref name="minValue"/> equals <paramref name="maxValue"/>, <paramref name="minValue"/> is returned.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="minValue"/> is greater than <paramref name="maxValue"/>. </exception>
        </member>
        <member name="M:MathNet.Numerics.Random.AbstractRandomNumberGenerator.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers.
            </summary>
            <param name="buffer">An array of bytes to contain random numbers.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null. </exception>
        </member>
        <member name="M:MathNet.Numerics.Random.AbstractRandomNumberGenerator.Sample">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>A double-precision floating point number greater than or equal to 0.0, and less than 1.0.</returns>
        </member>
        <member name="M:MathNet.Numerics.Random.AbstractRandomNumberGenerator.ThreadSafeSample">
            <summary>
            Thread safe version of <seealso cref="M:MathNet.Numerics.Random.AbstractRandomNumberGenerator.DoSample"/> which returns a random number between 0.0 and 1.0.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MathNet.Numerics.Random.AbstractRandomNumberGenerator.DoSample">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0.
            </returns>
        </member>
        <member name="T:MathNet.Numerics.Random.AbstractRandomNumberGenerator.SampleMethod">
            <summary>
            A delegate type that represents a method that generates random numbers.
            </summary>
            <returns>Randomly distributed numbers.</returns>
        </member>
        <member name="M:MathNet.Numerics.Random.Mcg59.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.Mcg59"/> class using
            the current time as the seed.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Random.Mcg59.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.Mcg59"/> class using
            the current time as the seed.
            </summary>
            <param name="threadSafe">if set to <c>true</c> , the class is thread safe.</param>
        </member>
        <member name="M:MathNet.Numerics.Random.Mcg59.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.Mcg59"/> class.
            </summary>
            <param name="seed">The seed value.</param>
            <remarks>If the seed value is zero, it is set to one. Uses the
            value of <see cref="P:MathNet.Numerics.Control.ThreadSafeRandomNumberGenerators"/> to
            set whether the instance is thread safe.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Random.Mcg59.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.Mcg59"/> class.
            </summary>
            <param name="seed">The seed value.</param>
            <remarks>The seed is set to 1, if the zero is used as the seed.</remarks>
            <param name="threadSafe">if set to <c>true</c> , the class is thread safe.</param>
        </member>
        <member name="M:MathNet.Numerics.Random.Mcg59.DoSample">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0.
            </returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Vector">
            <summary>
            Defines the base class for <c>Vector</c> classes.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/> class. 
            Constructs a <strong>Vector</strong> with the given size.
            </summary>
            <param name="size">
            The size of the <strong>Vector</strong> to construct.
            </param>
            <exception cref="T:System.ArgumentException">
            If <paramref name="size"/> is less than one.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.CreateMatrix(System.Int32,System.Int32)">
            <summary>
            Creates a matrix with the given dimensions using the same storage type
            as this vector.
            </summary>
            <param name="rows">
            The number of rows.
            </param>
            <param name="columns">
            The number of columns.
            </param>
            <returns>
            A matrix with the given dimensions.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.CreateVector(System.Int32)">
            <summary>
            Creates a <strong>Vector</strong> of the given size using the same storage type
            as this vector.
            </summary>
            <param name="size">
            The size of the <strong>Vector</strong> to create.
            </param>
            <returns>
            The new <c>Vector</c>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.Add(System.Double)">
            <summary>
            Adds a scalar to each element of the vector.
            </summary>
            <param name="scalar">The scalar to add.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.Add(System.Double,MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Adds a scalar to each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to add.</param>
            <param name="result">The vector to store the result of the addition.</param>
            <exception cref="T:System.ArgumentNullException">If the result vector is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If this vector and <paramref name="result"/> are not the same size.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.Plus">
            <summary>
            Returns this vector.
            </summary>
            <returns>This vector.</returns>
            <remarks>Added as an alternative to the unary addition operator.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.Add(MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Adds another vector to this vector.
            </summary>
            <param name="other">The vector to add to this one.</param>
            <exception cref="T:System.ArgumentNullException">If the other vector is <see langword="null"/>.</exception> 
            <exception cref="T:System.ArgumentException">If this vector and <paramref name="other"/> are not the same size.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.Add(MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Adds another vector to this vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to add to this one.</param>
            <param name="result">The vector to store the result of the addition.</param>
            <exception cref="T:System.ArgumentNullException">If the other vector is <see langword="null"/>.</exception> 
            <exception cref="T:System.ArgumentNullException">If the result vector is <see langword="null"/>.</exception> 
            <exception cref="T:System.ArgumentException">If this vector and <paramref name="other"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentException">If this vector and <paramref name="result"/> are not the same size.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.Subtract(System.Double)">
            <summary>
            Subtracts a scalar from each element of the vector.
            </summary>
            <param name="scalar">The scalar to subtract.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.Subtract(System.Double,MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
             Subtracts a scalar from each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to subtract.</param>
            <param name="result">The vector to store the result of the subtraction.</param>
            <exception cref="T:System.ArgumentNullException">If the result vector is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If this vector and <paramref name="result"/> are not the same size.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.Negate">
            <summary>
            Returns a negated vector.
            </summary>
            <returns>The negated vector.</returns>
            <remarks>Added as an alternative to the unary negation operator.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.Subtract(MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Subtracts another vector from this vector.
            </summary>
            <param name="other">The vector to subtract from this one.</param>
            <exception cref="T:System.ArgumentNullException">If the other vector is <see langword="null"/>.</exception> 
            <exception cref="T:System.ArgumentException">If this vector and <paramref name="other"/> are not the same size.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.Subtract(MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Subtracts another vector to this vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to subtract from this one.</param>
            <param name="result">The vector to store the result of the subtraction.</param>
            <exception cref="T:System.ArgumentNullException">If the other vector is <see langword="null"/>.</exception> 
            <exception cref="T:System.ArgumentNullException">If the result vector is <see langword="null"/>.</exception> 
            <exception cref="T:System.ArgumentException">If this vector and <paramref name="other"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentException">If this vector and <paramref name="result"/> are not the same size.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.Multiply(System.Double)">
            <summary>
            Multiplies a scalar to each element of the vector.
            </summary>
            <param name="scalar">The scalar to multiply.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.Multiply(System.Double,MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Multiplies a scalar to each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to multiply.</param>
            <param name="result">The vector to store the result of the multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If the result vector is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If this vector and <paramref name="result"/> are not the same size.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.Divide(System.Double)">
            <summary>
            Divides each element of the vector by a scalar.
            </summary>
            <param name="scalar">The scalar to divide with.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.Divide(System.Double,MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
             Divides each element of the vector by a scalar and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to divide with.</param>
            <param name="result">The vector to store the result of the division.</param>
            <exception cref="T:System.ArgumentNullException">If the result vector is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If this vector and <paramref name="result"/> are not the same size.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.op_UnaryPlus(MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Returns a <strong>Vector</strong> containing the same values of rightSide. 
            </summary>
            <remarks>This method is included for completeness.</remarks>
            <param name="rightSide">The vector to get the values from.</param>
            <returns>A vector containing the same values as <paramref name="rightSide"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.op_Addition(MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Adds two <strong>Vectors</strong> together and returns the results.
            </summary>
            <param name="leftSide">One of the vectors to add.</param>
            <param name="rightSide">The other vector to add.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.op_UnaryNegation(MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Returns a <strong>Vector</strong> containing the negated values of rightSide. 
            </summary>
            <param name="rightSide">The vector to get the values from.</param>
            <returns>A vector containing the negated values as <paramref name="rightSide"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.op_Subtraction(MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Subtracts two <strong>Vectors</strong> and returns the results.
            </summary>
            <param name="leftSide">The vector to subtract from.</param>
            <param name="rightSide">The vector to subtract.</param>
            <returns>The result of the subtraction.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.op_Multiply(MathNet.Numerics.LinearAlgebra.Double.Vector,System.Double)">
            <summary>
            Multiplies a vector with a scalar.
            </summary>
            <param name="leftSide">The vector to scale.</param>
            <param name="rightSide">The scalar value.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.op_Multiply(System.Double,MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Multiplies a vector with a scalar.
            </summary>
            <param name="leftSide">The scalar value.</param>
            <param name="rightSide">The vector to scale.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.op_Division(MathNet.Numerics.LinearAlgebra.Double.Vector,System.Double)">
            <summary>
            Divides a vector with a scalar.
            </summary>
            <param name="leftSide">The vector to divide.</param>
            <param name="rightSide">The scalar value.</param>
            <returns>The result of the division.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.Norm">
            <summary>
            Euclidean Norm also known as 2-Norm.
            </summary>
            <returns>
            Scalar ret = sqrt(sum(this[i]^2))
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.SquaredNorm">
            <summary>
            Squared Euclidean 2-Norm.
            </summary>
            <returns>
            Scalar ret = sum(this[i]^2)
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.Norm1">
            <summary>
            1-Norm also known as Manhattan Norm or Taxicab Norm.
            </summary>
            <returns>
            Scalar ret = sum(abs(this[i]))
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.NormP(System.Int32)">
            <summary>
            Computes the p-Norm.
            </summary>
            <param name="p">The p value.</param>
            <returns>Scalar ret = (sum(abs(this[i])^p))^(1/p)</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.NormInfinity">
            <summary>
            Infinity Norm.
            </summary>
            <returns>
            Scalar ret = max(abs(this[i]))
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.Normalize">
            <summary>
            Normalizes this vector to a unit vector with respect to the Eucliden 2-Norm.
            </summary>
            <returns>This vector normalized to a unit vector with respect to the Eucliden 2-Norm.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.Clone">
            <summary>
            Returns a deep-copy clone of the vector.
            </summary>
            <returns>
            A deep-copy clone of the vector.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.CopyTo(MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Copies the values of this vector into the target vector.
            </summary>
            <param name="target">
            The vector to copy elements into.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="target"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If <paramref name="target"/> is not the same size as this vector.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.CopyTo(MathNet.Numerics.LinearAlgebra.Double.Vector,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies the requested elements from this vector to another.
            </summary>
            <param name="destination">
            The vector to copy the elements to.
            </param>
            <param name="offset">
            The element to start copying from.
            </param>
            <param name="destinationOffset">
            The element to start copying to.
            </param>
            <param name="count">
            The number of elements to copy.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.Equals(MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">
            An object to compare with this object.
            </param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format to use.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Vector.Count">
            <summary>
            Gets he number of elements in the vector.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Vector.Item(System.Int32)">
            <summary>Gets or sets the value at the given <paramref name="index"/>.</summary>
            <param name="index">The index of the value to get or set.</param>
            <returns>The value of the vector at the given <paramref name="index"/>.</returns> 
            <exception cref="T:System.IndexOutOfRangeException">If <paramref name="index"/> is negative or 
            greater than the size of the vector.</exception>
        </member>
        <member name="T:MathNet.Numerics.Integration.Algorithms.NewtonCotesTrapeziumRule">
            <summary>
            Approximation algorithm for definite integrals by the Trapezium rule of the Newton-Cotes family.
            </summary>
            <remarks>
            <a href="http://en.wikipedia.org/wiki/Trapezium_rule">Wikipedia - Trapezium Rule</a>
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Integration.Algorithms.NewtonCotesTrapeziumRule.IntegrateTwoPoint(System.Func{System.Double,System.Double},System.Double,System.Double)">
            <summary>
            Direct 2-point approximation of the definite integral in the provided interval by the trapezium rule.
            </summary>
            <param name="f">The analytic smooth function to integrate.</param>
            <param name="intervalBegin">Where the interval starts, inclusive and finite.</param>
            <param name="intervalEnd">Where the interval stops, inclusive and finite.</param>
            <returns>Approximation of the finite integral in the given interval.</returns>
        </member>
        <member name="M:MathNet.Numerics.Integration.Algorithms.NewtonCotesTrapeziumRule.IntegrateComposite(System.Func{System.Double,System.Double},System.Double,System.Double,System.Int32)">
            <summary>
            Composite N-point approximation of the definite integral in the provided interval by the trapezium rule.
            </summary>
            <param name="f">The analytic smooth function to integrate.</param>
            <param name="intervalBegin">Where the interval starts, inclusive and finite.</param>
            <param name="intervalEnd">Where the interval stops, inclusive and finite.</param>
            <param name="numberOfPartitions">Number of composite subdivision partitions.</param>
            <returns>Approximation of the finite integral in the given interval.</returns>
        </member>
        <member name="M:MathNet.Numerics.Integration.Algorithms.NewtonCotesTrapeziumRule.IntegrateAdaptive(System.Func{System.Double,System.Double},System.Double,System.Double,System.Double)">
            <summary>
            Adaptive approximation of the definite integral in the provided interval by the trapezium rule.
            </summary>
            <param name="f">The analytic smooth function to integrate.</param>
            <param name="intervalBegin">Where the interval starts, inclusive and finite.</param>
            <param name="intervalEnd">Where the interval stops, inclusive and finite.</param>
            <param name="targetError">The expected accuracy of the approximation.</param>
            <returns>Approximation of the finite integral in the given interval.</returns>
        </member>
        <member name="M:MathNet.Numerics.Integration.Algorithms.NewtonCotesTrapeziumRule.IntegrateAdaptiveTransformedOdd(System.Func{System.Double,System.Double},System.Double,System.Double,System.Collections.Generic.IEnumerable{System.Double[]},System.Collections.Generic.IEnumerable{System.Double[]},System.Double,System.Double)">
            <summary>
            Adaptive approximation of the definite integral by the trapezium rule.
            </summary>
            <param name="f">The analytic smooth function to integrate.</param>
            <param name="intervalBegin">Where the interval starts, inclusive and finite.</param>
            <param name="intervalEnd">Where the interval stops, inclusive and finite.</param>
            <param name="levelAbscissas">Abscissa vector per level provider.</param>
            <param name="levelWeights">Weight vector per level provider.</param>
            <param name="levelOneStep">First Level Step</param>
            <param name="targetRelativeError">The expected relative accuracy of the approximation.</param>
            <returns>Approximation of the finite integral in the given interval.</returns>
        </member>
        <member name="T:MathNet.Numerics.Distributions.DiscreteUniform">
            <summary>
            The discrete uniform distribution is a distribution over integers. The distribution
            is parameterized by a lower and upper bound (both inclusive).
            </summary>
            <remarks><para>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can set the random number generator by using the <see cref="P:MathNet.Numerics.Distributions.DiscreteUniform.RandomSource"/> property.</para>
            <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to false, all parameter checks can be turned off.</para></remarks>
        </member>
        <member name="T:MathNet.Numerics.Distributions.IDiscreteDistribution">
            <summary>
            The interface for discrete univariate distributions.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.IDistribution">
            <summary>
            The interface for univariate distributions.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.IDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution function (cdf) for this probability distribution.
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IDistribution.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to generate random samples from the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IDistribution.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IDistribution.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IDistribution.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IDistribution.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IDistribution.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.IDiscreteDistribution.Probability(System.Int32)">
            <summary>
            Computes values of the probability mass function.
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <returns>the probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.IDiscreteDistribution.ProbabilityLn(System.Int32)">
            <summary>
            Computes values of the log probability mass function.
            </summary>
            <param name="k">The location in the domain where we want to evaluate the log probability mass function.</param>
            <returns>the log probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.IDiscreteDistribution.Sample">
            <summary>
            Draws a random sample from the distribution.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.IDiscreteDistribution.Samples">
            <summary>
            Draws a sequence of random samples from the distribution.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IDiscreteDistribution.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IDiscreteDistribution.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IDiscreteDistribution.Minimum">
            <summary>
            Gets the smallest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IDiscreteDistribution.Maximum">
            <summary>
            Gets the largest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.DiscreteUniform._lower">
            <summary>
            The distribution's lower bound.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.DiscreteUniform._upper">
            <summary>
            The distribution's upper bound.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.DiscreteUniform._random">
            <summary>
            The distribution's random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniform.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the DiscreteUniform class.
            </summary>
            <param name="lower">Lower bound.</param>
            <param name="upper">Upper bound; must be at least as large as <paramref name="lower"/>.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniform.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniform.IsValidParameterSet(System.Int32,System.Int32)">
            <summary>
            Checks whether the parameters of the distribution are valid. 
            </summary>
            <param name="lower">Lower bound.</param>
            <param name="upper">Upper bound; must be at least as large as <paramref name="lower"/>.</param>
            <returns>True when the parameters are valid, false otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniform.SetParameters(System.Int32,System.Int32)">
            <summary>
            Sets the parameters of the distribution after checking their validity.
            </summary>
            <param name="lower">Lower bound.</param>
            <param name="upper">Upper bound; must be at least as large as <paramref name="lower"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the parameters don't pass the <see cref="M:MathNet.Numerics.Distributions.DiscreteUniform.IsValidParameterSet(System.Int32,System.Int32)"/> function.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniform.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution function of the Bernoulli distribution.
            </summary>
            <param name="x">The location at which to compute the cumulative density.</param>
            <returns>the cumulative density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniform.Probability(System.Int32)">
            <summary>
            Computes the probability of a specific value.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniform.ProbabilityLn(System.Int32)">
            <summary>
            Computes the probability of a specific value.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniform.Sample">
            <summary>
            Samples a uniformly distributed random variable.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniform.Samples">
            <summary>
            Samples an array of uniformly distributed random variables.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniform.Sample(System.Random,System.Int32,System.Int32)">
            <summary>
            Samples a uniformly distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="lower">The lower bound of the uniform random variable.</param>
            <param name="upper">The upper bound of the uniform random variable.</param>
            <returns>A sample from the discrete uniform distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniform.Samples(System.Random,System.Int32,System.Int32)">
            <summary>
            Samples a sequence of uniformly distributed random variables.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="lower">The lower bound of the uniform random variable.</param>
            <param name="upper">The upper bound of the uniform random variable.</param>
            <returns>a sequence of samples from the discrete uniform distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniform.DoSample(System.Random,System.Int32,System.Int32)">
            <summary>
            Generates one sample from the discrete uniform distribution. This method does not do any parameter checking.
            </summary>
            <param name="rnd">The random source to use.</param>
            <param name="lower">The lower bound of the uniform random variable.</param>
            <param name="upper">The upper bound of the uniform random variable.</param>
            <returns>A random sample from the discrete uniform distribution.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteUniform.LowerBound">
            <summary>
            Gets or sets the lower bound of the probability distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteUniform.UpperBound">
            <summary>
            Gets or sets the upper bound of the probability distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteUniform.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteUniform.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteUniform.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteUniform.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteUniform.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteUniform.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteUniform.Minimum">
            <summary>
            Gets the smallest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteUniform.Maximum">
            <summary>
            Gets the largest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteUniform.Mode">
            <summary>
            The mode of the distribution; since every element in the domain has the same probability this method returns the middle one.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteUniform.Median">
            <summary>
            The median of the distribution.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Gamma">
            <summary>
            Implements the univariate Gamma distribution. For details about this distribution, see 
            <a href="http://en.wikipedia.org/wiki/Gamma_distribution">Wikipedia - Gamma distribution</a>.
            </summary>
            <remarks>
            <para>The Gamma distribution is parametrized by a shape and inverse scale parameter. When we want
            to specify a Gamma distribution which is a point distribution we set the shape parameter to be the
            location of the point distribution and the inverse scale as positive infinity. The distribution
            with shape and inverse scale both zero is undefined.</para>
            <para> Random number generation for the Gamma distribution is based on the algorithm in:
            "A Simple Method for Generating Gamma Variables" - Marsaglia &amp; Tsang
            ACM Transactions on Mathematical Software, Vol. 26, No. 3, September 2000, Pages 363–372.</para>
            <para>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can get/set the random number generator by using the <see cref="P:MathNet.Numerics.Distributions.Gamma.RandomSource"/> property.</para>
            <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to false, all parameter checks can be turned off.</para></remarks>
        </member>
        <member name="T:MathNet.Numerics.Distributions.IContinuousDistribution">
            <summary>
            The interface for continuous univariate distributions.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.IContinuousDistribution.Density(System.Double)">
            <summary>
            The probability density of the distribution.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.IContinuousDistribution.DensityLn(System.Double)">
            <summary>
            The log probability density of the distribution.
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.IContinuousDistribution.Sample">
            <summary>
            Draws a random sample from the distribution.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.IContinuousDistribution.Samples">
            <summary>
            Draws a sequence of random samples from the distribution.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IContinuousDistribution.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IContinuousDistribution.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IContinuousDistribution.Minimum">
            <summary>
            Gets the smallest element in the domain of the distributions which can be represented by a double.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IContinuousDistribution.Maximum">
            <summary>
            Gets the largest element in the domain of the distributions which can be represented by a double.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Gamma._shape">
            <summary>
            Gamma shape parameter.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Gamma._invScale">
            <summary>
            Gamma inverse scale parameter.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Gamma._random">
            <summary>
            The distribution's random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Gamma class.
            </summary>
            <param name="shape">The shape of the Gamma distribution.</param>
            <param name="invScale">The inverse scale of the Gamma distribution.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.WithShapeScale(System.Double,System.Double)">
            <summary>
            Constructs a Gamma distribution from a shape and scale parameter. The distribution will
            be initialized with the default <seealso cref="T:System.Random"/> random number generator.
            </summary>
            <param name="shape">The shape of the Gamma distribution.</param>
            <param name="scale">The scale of the Gamma distribution.</param>
            <returns>a normal distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.WithShapeInvScale(System.Double,System.Double)">
            <summary>
            Constructs a Gamma distribution from a shape and inverse scale parameter. The distribution will
            be initialized with the default <seealso cref="T:System.Random"/> random number generator.
            </summary>
            <param name="shape">The shape of the Gamma distribution.</param>
            <param name="invScale">The inverse scale of the Gamma distribution.</param>
            <returns>a normal distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.IsValidParameterSet(System.Double,System.Double)">
            <summary>
            Checks whether the parameters of the distribution are valid. 
            </summary>
            <param name="shape">The shape of the Gamma distribution.</param>
            <param name="invScale">The inverse scale of the Gamma distribution.</param>
            <returns>True when the parameters are valid, false otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.SetParameters(System.Double,System.Double)">
            <summary>
            Sets the parameters of the distribution after checking their validity.
            </summary>
            <param name="shape">The shape of the Gamma distribution.</param>
            <param name="invScale">The inverse scale of the Gamma distribution.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the parameters don't pass the <see cref="M:MathNet.Numerics.Distributions.Gamma.IsValidParameterSet(System.Double,System.Double)"/> function.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.Density(System.Double)">
            <summary>
            Computes the density of the Gamma distribution.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.DensityLn(System.Double)">
            <summary>
            Computes the log density of the Gamma distribution.
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution function of the Gamma distribution.
            </summary>
            <param name="x">The location at which to compute the cumulative density.</param>
            <returns>the cumulative density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.Sample">
            <summary>
            Generates a sample from the Gamma distribution.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.Samples">
            <summary>
            Generates a sequence of samples from the Gamma distribution.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.Sample(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sample from the Gamma distribution.
            </summary>
            <param name="rng">The random number generator to use.</param>
            <param name="shape">The shape of the Gamma distribution from which to generate samples.</param>
            <param name="invScale">The inverse scale of the Gamma distribution from which to generate samples.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.Samples(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the Gamma distribution.
            </summary>
            <param name="rng">The random number generator to use.</param>
            <param name="shape">The shape of the Gamma distribution from which to generate samples.</param>
            <param name="invScale">The inverse scale of the Gamma distribution from which to generate samples.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.SampleGamma(System.Random,System.Double,System.Double)">
            <summary>
            <para>Sampling implementation based on:
            "A Simple Method for Generating Gamma Variables" - Marsaglia &amp; Tsang
            ACM Transactions on Mathematical Software, Vol. 26, No. 3, September 2000, Pages 363–372.</para>
            <para>This method performs no parameter checks.</para>
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="shape">The shape of the Gamma distribution.</param>
            <param name="invScale">The inverse scale of the Gamma distribution.</param>
            <returns>A sample from a Gamma distributed random variable.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Gamma.Shape">
            <summary>
            Gets or sets the shape of the Gamma distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Gamma.Scale">
            <summary>
            Gets or sets the scale of the Gamma distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Gamma.InvScale">
            <summary>
            Gets or sets the inverse scale of the Gamma distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Gamma.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Gamma.Mean">
            <summary>
            Gets the mean of the Gamma distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Gamma.Variance">
            <summary>
            Gets the variance of the Gamma distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Gamma.StdDev">
            <summary>
            Gets the standard deviation of the Gamma distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Gamma.Entropy">
            <summary>
            Gets the entropy of the Gamma distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Gamma.Skewness">
            <summary>
            Gets the skewness of the Gamma distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Gamma.Mode">
            <summary>
            Gets the mode of the Gamma distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Gamma.Median">
            <summary>
            Gets the median of the Gamma distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Gamma.Minimum">
            <summary>
            Gets the minimum of the Gamma distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Gamma.Maximum">
            <summary>
            Gets the maximum of the Gamma distribution.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Threading.ThreadQueue">
            <summary>
            Internal Parallel Thread Queue.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Threading.ThreadQueue.MaximumQueueLength">
            <summary>
            Maximum number of jobs that can be in the queue at the same time. 
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Threading.ThreadQueue._stateSync">
            <summary>
            Sync Object for the thread queue state.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Threading.ThreadQueue._queueSync">
            <summary>
            Sync Object for queue access (to be sure it's used by us only).
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Threading.ThreadQueue._queue">
            <summary>
            Queue holding the pending jobs.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Threading.ThreadQueue._tasksAvailableSemaphore">
            <summary>
            Counting Semaphore to make the worker thread wait for jobs
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Threading.ThreadQueue._running">
            <summary>
            Running flag, used to signal worker threads to stop cleanly.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Threading.ThreadQueue._threads">
            <summary>
            Worker threads
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Threading.ThreadQueue._isInWorkerThread">
            <summary>
            Indicating whether the current thread is a parallelized worker thread.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Threading.ThreadQueue.#cctor">
            <summary>
            Initializes static members of the ThreadQueue class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Threading.ThreadQueue.Enqueue(MathNet.Numerics.Threading.Task)">
            <summary>
            Add a job to the queue.
            </summary>
            <param name="task">The job to run.</param>
        </member>
        <member name="M:MathNet.Numerics.Threading.ThreadQueue.Enqueue(System.Collections.Generic.IList{MathNet.Numerics.Threading.Task})">
            <summary>
            Add a set of jobs to the queue.
            </summary>
            <param name="tasks">The jobs to run.</param>
        </member>
        <member name="M:MathNet.Numerics.Threading.ThreadQueue.WorkerThreadStart">
            <summary>
            Worker Thread Program
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Threading.ThreadQueue.Start(System.Int32)">
            <summary>
            Start or restart the queue with the specified number of worker threads.
            </summary>
            <param name="numberOfThreads">Number of worker threads.</param>
        </member>
        <member name="M:MathNet.Numerics.Threading.ThreadQueue.Start">
            <summary>
            Start the thread queue, if it is not already running.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Threading.ThreadQueue.Shutdown">
            <summary>
            Stop the thread queue, if it is running.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Threading.ThreadQueue.ThreadCount">
            <summary>
            Gets the number of worker threads.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Threading.ThreadQueue.IsInWorkerThread">
            <summary>
            Gets a value indicating whether the current thread is a parallelized worker thread.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Threading.AggregateException">
            <summary>
            Represents multiple errors that occur during application execution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Threading.AggregateException._exceptions">
            <summary>
            List of the aggregated exceptions.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Threading.AggregateException.#ctor(System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Initializes a new instance of the AggregateException class with a specified error message and references to the inner exceptions that are the cause of this exception.
            </summary>
            <param name="exceptions">The exceptions that are the cause of the current exception.</param>
        </member>
        <member name="P:MathNet.Numerics.Threading.AggregateException.InnerExceptions">
            <summary>
            Gets a read-only collection of the Exception instances that caused the current exception. 
            </summary>
            <value>A read-only collection of the Exception instances that caused the current exception</value>
        </member>
        <member name="T:MathNet.Numerics.SpecialFunctions">
            <summary>
            This partial implementation of the SpecialFunctions class contains all methods related to the error function.
            </summary>
            <summary>
            This class implements a collection of special function evaluations for double precision. This class 
            has a static constructor which will precompute a small number of values for faster runtime computations.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.SpecialFunctions.Gamma_n">
            <summary>
            The order of the <see cref="M:MathNet.Numerics.SpecialFunctions.GammaLn(System.Double)"/> approximation.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.SpecialFunctions.Gamma_r">
            <summary>
            Auxiliary variable when evaluating the <see cref="M:MathNet.Numerics.SpecialFunctions.GammaLn(System.Double)"/> function.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.SpecialFunctions.Gamma_dk">
            <summary>
            Polynomial coefficients for the <see cref="M:MathNet.Numerics.SpecialFunctions.GammaLn(System.Double)"/> approximation.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.GammaLn(System.Double)">
            <summary>
            Computes the logarithm of the Gamma function. 
            </summary>
            <param name="z">The argument of the gamma function.</param>
            <returns>The logarithm of the gamma function.</returns>
            <remarks>
            <para>This implementation of the computation of the gamma and logarithm of the gamma function follows the derivation in
                "An Analysis Of The Lanczos Gamma Approximation", Glendon Ralph Pugh, 2004.
            We use the implementation listed on p. 116 which achieves an accuracy of 16 floating point digits. Although 16 digit accuracy
            should be sufficient for double values, improving accuracy is possible (see p. 126 in Pugh).</para>
            <para>Our unit tests suggest that the accuracy of the Gamma function is correct up to 14 floating point digits.</para>
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.Gamma(System.Double)">
            <summary>
            Computes the Gamma function. 
            </summary>
            <param name="z">The argument of the gamma function.</param>
            <returns>The logarithm of the gamma function.</returns>
            <remarks>
            <para>
            This implementation of the computation of the gamma and logarithm of the gamma function follows the derivation in
                "An Analysis Of The Lanczos Gamma Approximation", Glendon Ralph Pugh, 2004.
            We use the implementation listed on p. 116 which should achieve an accuracy of 16 floating point digits. Although 16 digit accuracy
            should be sufficient for double values, improving accuracy is possible (see p. 126 in Pugh).
            </para>
            <para>Our unit tests suggest that the accuracy of the Gamma function is correct up to 13 floating point digits.</para>
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.GammaUpperRegularized(System.Double,System.Double)">
            <summary>
            Returns the upper incomplete regularized gamma function
            Q(a,x) = 1/Gamma(a) * int(exp(-t)t^(a-1),t=0..x) for real a &gt; 0, x &gt; 0.
            </summary>
            <param name="a">The argument for the gamma function.</param>
            <param name="x">The lower integral limit.</param>
            <returns>The upper incomplete regularized gamma function.</returns>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.GammaUpperIncomplete(System.Double,System.Double)">
            <summary>
            Returns the upper incomplete gamma function
            Gamma(a,x) = 1/Gamma(a) * int(exp(-t)t^(a-1),t=0..x) for real a &gt; 0, x &gt; 0.
            </summary>
            <param name="a">The argument for the gamma function.</param>
            <param name="x">The lower integral limit.</param>
            <returns>The upper incomplete gamma function.</returns>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.GammaLowerIncomplete(System.Double,System.Double)">
            <summary>
            Returns the lower incomplete gamma function
            gamma(a,x) = int(exp(-t)t^(a-1),t=0..x) for real a &gt; 0, x &gt; 0.
            </summary>
            <param name="a">The argument for the gamma function.</param>
            <param name="x">The upper integral limit.</param>
            <returns>The lower incomplete gamma function.</returns>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.GammaLowerRegularized(System.Double,System.Double)">
            <summary>
            Returns the lower incomplete regularized gamma function
            P(a,x) = 1/Gamma(a) * int(exp(-t)t^(a-1),t=0..x) for real a &gt; 0, x &gt; 0.
            </summary>
            <param name="a">The argument for the gamma function.</param>
            <param name="x">The upper integral limit.</param>
            <returns>The lower incomplete gamma function.</returns>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.Factorial(System.Int32)">
            <summary>
            Computes the factorial function x -&gt; x! of an integer number &gt; 0. The function can represent all number up
            to 22! exactly, all numbers up to 170! using a double representation. All larger values will overflow.
            </summary>
            <returns>A value value! for value &gt; 0</returns>
            <remarks>
            If you need to multiply or divide various such factorials, consider using the logarithmic version 
            <see cref="M:MathNet.Numerics.SpecialFunctions.FactorialLn(System.Int32)"/> instead so you can add instead of multiply and subtract instead of divide, and
            then exponentiate the result using <see cref="M:System.Math.Exp(System.Double)"/>. This will also circumvent the problem that
            factorials become very large even for small parameters.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.FactorialLn(System.Int32)">
            <summary>
            Computes the logarithmic factorial function x -> ln(x!) of an integer number > 0.
            </summary>
            <returns>A value value! for value > 0</returns>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.Binomial(System.Int32,System.Int32)">
            <summary>
            Computes the binomial coefficient: n choose k.
            </summary>
            <param name="n">A nonnegative value n.</param>
            <param name="k">A nonnegative value h.</param>
            <returns>The binomial coefficient: n choose k.</returns>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.BinomialLn(System.Int32,System.Int32)">
            <summary>
            Computes the natural logarithm of the binomial coefficient: ln(n choose k).
            </summary>
            <param name="n">A nonnegative value n.</param>
            <param name="k">A nonnegative value h.</param>
            <returns>The logarithmic binomial coefficient: ln(n choose k).</returns>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.Multinomial(System.Int32,System.Int32[])">
            <summary>
            Computes the multinomial coefficient: n choose n1, n2, n3, ...
            </summary>
            <param name="n">A nonnegative value n.</param>
            <param name="ni">An array of nonnegative values that sum to <paramref name="n"/>.</param>
            <returns>The multinomial coefficient.</returns>
            <exception cref="T:System.ArgumentNullException">if <paramref name="ni"/> is <see langword="null"/>.</exception>   
            <exception cref="T:System.ArgumentException">If <paramref name="n"/> or any of the <paramref name="ni"/> are negative.</exception>
            <exception cref="T:System.ArgumentException">If the sum of all <paramref name="ni"/> is not equal to <paramref name="n"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.Erf(System.Double)">
            <summary>Calculates the error function.</summary>
            <param name="x">The value to evaluate.</param>
            <returns>the error function evaluated at given value.</returns>
            <remarks>
                <list type="bullet">
                    <item>returns 1 if <c>x == Double.PositiveInfinity</c>.</item>
                    <item>returns -1 if <c>x == Double.NegativeInfinity</c>.</item>
                </list>
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.Erfc(System.Double)">
            <summary>Calculates the complementary error function.</summary>
            <param name="x">The value to evaluate.</param>
            <returns>the complementary error function evaluated at given value.</returns>
            <remarks>
                <list type="bullet">
                    <item>returns 0 if <c>x == Double.PositiveInfinity</c>.</item>
                    <item>returns 2 if <c>x == Double.NegativeInfinity</c>.</item>
                </list>
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.ErfInv(System.Double)">
            <summary>Calculates the inverse error function evaluated at z.</summary>
             <returns>The inverse error function evaluated at given value.</returns>
             <remarks>
             	<list type="bullet">
             		<item>returns Double.PositiveInfinity if <c>z &gt;= 1.0</c>.</item>
             		<item>returns Double.NegativeInfinity if <c>z &lt;= -1.0</c>.</item>
             	</list>
             </remarks>
            <summary>Calculates the inverse error function evaluated at z.</summary>
            <param name="z">value to evaluate.</param>
            <returns>the inverse error function evaluated at Z.</returns>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.ErfImp(System.Double,System.Boolean)">
            <summary>
            Implementation of the error function.
            </summary>
            <param name="z">Where to evaluate the error function.</param>
            <param name="invert">Whether to compute 1 - the error function.</param>
            <returns>the error function.</returns>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.ErfcInv(System.Double)">
            <summary>Calculates the complementary inverse error function evaluated at z.</summary>
            <returns>The complementary inverse error function evaluated at given value.</returns>
            <remarks> We have tested this implementation against the arbitrary precision mpmath library
            and found cases where we can only guarantee 9 significant figures correct.
                <list type="bullet">
                    <item>returns Double.PositiveInfinity if <c>z &lt;= 0.0</c>.</item>
                    <item>returns Double.NegativeInfinity if <c>z &gt;= 2.0</c>.</item>
                </list>
            </remarks>
            <summary>calculates the complementary inverse error function evaluated at z.</summary>
            <param name="z">value to evaluate.</param>
            <returns>the complementary inverse error function evaluated at Z.</returns>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.ErfInvImpl(System.Double,System.Double,System.Double)">
            <summary>
            The implementation of the inverse error function.
            </summary>
            <param name="p">First intermediate parameter.</param>
            <param name="q">Second intermediate parameter.</param>
            <param name="s">Third intermediate parameter.</param>
            <returns>the inverse error function.</returns>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.EvaluatePolynomial(System.Double[],System.Double)">
            <summary>
            A helper function to evaluate polynomials fast.
            </summary>
            <param name="poly">The coefficients of the polynomial.</param>
            <param name="z">The location where to evaluate the polynomial at.</param>
            <returns>the evaluation of the polynomial.</returns>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.ExponentialMinusOne(System.Double)">
            <summary>
            Numerically stable exponential minus one, i.e. <code>x -> exp(x)-1</code>
            </summary>
            <param name="power">A number specifying a power.</param>
            <returns>Returns <code>exp(power)-1</code>.</returns>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.Hypotenuse(System.Double,System.Double)">
            <summary>
            Numerically stable hypotenuse of a right angle triangle, i.e. <code>(a,b) -> sqrt(a^2 + b^2)</code>
            </summary>
            <param name="a">The length of side a of the triangle.</param>
            <param name="b">The length of side b of the triangle.</param>
            <returns>Returns <code>sqrt(a<sup>2</sup> + b<sup>2</sup>)</code> without underflow/overflow.</returns>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.Series(System.Func{System.Double})">
            <summary>
            Numerically stable series summation
            </summary>
            <param name="nextSummand">provides the summands sequentially</param>
            <returns>Sum</returns>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.#cctor">
            <summary>
            Initializes static members of the SpecialFunctions class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.Harmonic(System.Int32)">
            <summary>
            Computes the <paramref name="t"/>'th Harmonic number.
            </summary>
            <param name="t">The Harmonic number which needs to be computed.</param>
            <returns>The t'th Harmonic number.</returns>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.BetaLn(System.Double,System.Double)">
            <summary>
            Computes the logarithm of the Euler Beta function.
            </summary>
            <param name="z">The first Beta parameter, a positive real number.</param>
            <param name="w">The second Beta parameter, a positive real number.</param>
            <returns>The logarithm of the Euler Beta function evaluated at z,w.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="z"/> or <paramref name="w"/> are not positive.</exception>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.Beta(System.Double,System.Double)">
            <summary>
            Computes the Euler Beta function.
            </summary>
            <param name="z">The first Beta parameter, a positive real number.</param>
            <param name="w">The second Beta parameter, a positive real number.</param>
            <returns>The Euler Beta function evaluated at z,w.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="z"/> or <paramref name="w"/> are not positive.</exception>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.DiGamma(System.Double)">
            <summary>
            Computes the Digamma function which is mathematically defined as the derivative of the logarithm of the gamma function.
            This implementation is based on
                Jose Bernardo
                Algorithm AS 103:
                Psi ( Digamma ) Function,
                Applied Statistics,
                Volume 25, Number 3, 1976, pages 315-317.
            Using the modifications as in Tom Minka's lightspeed toolbox.
            </summary>
            <param name="x">The argument of the digamma function.</param>
            <returns>The value of the DiGamma function at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.DiGammaInv(System.Double)">
            <summary>
            <para>Computes the inverse Digamma function: this is the inverse of the logarithm of the gamma function. This function will
            only return solutions that are positive.</para>
            <para>This implementation is based on the bisection method.</para>
            </summary>
            <param name="p">The argument of the inverse digamma function.</param>
            <returns>The positive solution to the inverse DiGamma function at <paramref name="p"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.BetaIncomplete(System.Double,System.Double,System.Double)">
            <summary>
            Returns the lower incomplete (unregularized) beta function
            I_x(a,b) = int(t^(a-1)*(1-t)^(b-1),t=0..x) for real a &gt; 0, b &gt; 0, 1 &gt;= x &gt;= 0.
            </summary>
            <param name="a">The first Beta parameter, a positive real number.</param>
            <param name="b">The second Beta parameter, a positive real number.</param>
            <param name="x">The upper limit of the integral.</param>
            <returns>The lower incomplete (unregularized) beta function.</returns>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.BetaRegularized(System.Double,System.Double,System.Double)">
            <summary>
            Returns the regularized lower incomplete beta function
            I_x(a,b) = 1/Beta(a,b) * int(t^(a-1)*(1-t)^(b-1),t=0..x) for real a &gt; 0, b &gt; 0, 1 &gt;= x &gt;= 0.
            </summary>
            <param name="a">The first Beta parameter, a positive real number.</param>
            <param name="b">The second Beta parameter, a positive real number.</param>
            <param name="x">The upper limit of the integral.</param>
            <returns>The regularized lower incomplete beta function.</returns>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.Logit(System.Double)">
            <summary>
            Computes the logit function. <seealso cref="!:http://en.wikipedia.org/wiki/Logit"/>
            </summary>
            <param name="p">The parameter for which to compute the logit function. This number should be
            between 0 and 1.</param>
            <returns>The logarithm of <paramref name="p"/> divided by 1.0 - <paramref name="p"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.Logistic(System.Double)">
            <summary>
            Computes the logistic function. <seealso cref="!:http://en.wikipedia.org/wiki/Logistic"/>
            </summary>
            <param name="p">The parameter for which to compute the logistic function.</param>
            <returns>The logistic function of <paramref name="p"/>.</returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.DenseVector">
            <summary>
            A vector using dense storage.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.DenseVector"/> class with a given size.
            </summary>
            <param name="size">
            the size of the vector.
            </param>
            <exception cref="T:System.ArgumentException">
            If <paramref name="size"/> is less than one.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.#ctor(System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.DenseVector"/> class with a given size
            and each element set to the given value;
            </summary>
            <param name="size">
            the size of the vector.
            </param>
            <param name="value">
            the value to set each element to.
            </param>
            <exception cref="T:System.ArgumentException">
            If <paramref name="size"/> is less than one.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.#ctor(MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.DenseVector"/> class by
            copying the values from another.
            </summary>
            <param name="other">
            The matrix to create the new matrix from.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.DenseVector"/> class for an array.
            </summary>
            <param name="array">The array to create this vector from.</param>
            <remarks>The vector does not copy the array, but keeps a reference to it. Any 
            changes to the vector will also change the array.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.CreateMatrix(System.Int32,System.Int32)">
            <summary>
            Creates a matrix with the given dimensions using the same storage type
            as this vector.
            </summary>
            <param name="rows">
            The number of rows.
            </param>
            <param name="columns">
            The number of columns.
            </param>
            <returns>
            A matrix with the given dimensions.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.CreateVector(System.Int32)">
            <summary>
            Creates a <strong>Vector</strong> of the given size using the same storage type
            as this vector.
            </summary>
            <param name="size">
            The size of the <strong>Vector</strong> to create.
            </param>
            <returns>
            The new <c>Vector</c>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.CopyTo(MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Copies the values of this vector into the target vector.
            </summary>
            <param name="target">
            The vector to copy elements into.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="target"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If <paramref name="target"/> is not the same size as this vector.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.Add(System.Double)">
            <summary>
            Adds a scalar to each element of the vector.
            </summary>
            <param name="scalar">The scalar to add.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.Add(System.Double,MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Adds a scalar to each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to add.</param>
            <param name="result">The vector to store the result of the addition.</param>
            <exception cref="T:System.ArgumentNullException">If the result vector is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If this vector and <paramref name="result"/> are not the same size.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.Add(MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Adds another vector to this vector.
            </summary>
            <param name="other">The vector to add to this one.</param>
            <exception cref="T:System.ArgumentNullException">If the other vector is <see langword="null"/>.</exception> 
            <exception cref="T:System.ArgumentException">If this vector and <paramref name="other"/> are not the same size.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.Add(MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Adds another vector to this vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to add to this one.</param>
            <param name="result">The vector to store the result of the addition.</param>
            <exception cref="T:System.ArgumentNullException">If the other vector is <see langword="null"/>.</exception> 
            <exception cref="T:System.ArgumentNullException">If the result vector is <see langword="null"/>.</exception> 
            <exception cref="T:System.ArgumentException">If this vector and <paramref name="other"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentException">If this vector and <paramref name="result"/> are not the same size.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.op_UnaryPlus(MathNet.Numerics.LinearAlgebra.Double.DenseVector)">
            <summary>
            Returns a <strong>Vector</strong> containing the same values of rightSide. 
            </summary>
            <remarks>This method is included for completeness.</remarks>
            <param name="rightSide">The vector to get the values from.</param>
            <returns>A vector containing a the same values as <paramref name="rightSide"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.op_Addition(MathNet.Numerics.LinearAlgebra.Double.DenseVector,MathNet.Numerics.LinearAlgebra.Double.DenseVector)">
            <summary>
            Adds two <strong>Vectors</strong> together and returns the results.
            </summary>
            <param name="leftSide">One of the vectors to add.</param>
            <param name="rightSide">The other vector to add.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.Subtract(System.Double)">
            <summary>
            Subtracts a scalar from each element of the vector.
            </summary>
            <param name="scalar">The scalar to subtract.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.Subtract(System.Double,MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Subtracts a scalar from each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to subtract.</param>
            <param name="result">The vector to store the result of the subtraction.</param>
            <exception cref="T:System.ArgumentNullException">If the result vector is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If this vector and <paramref name="result"/> are not the same size.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.Subtract(MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Subtracts another vector from this vector.
            </summary>
            <param name="other">The vector to subtract from this one.</param>
            <exception cref="T:System.ArgumentNullException">If the other vector is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If this vector and <paramref name="other"/> are not the same size.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.Subtract(MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Subtracts another vector to this vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to subtract from this one.</param>
            <param name="result">The vector to store the result of the subtraction.</param>
            <exception cref="T:System.ArgumentNullException">If the other vector is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result vector is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If this vector and <paramref name="other"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentException">If this vector and <paramref name="result"/> are not the same size.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.op_UnaryNegation(MathNet.Numerics.LinearAlgebra.Double.DenseVector)">
            <summary>
            Returns a <strong>Vector</strong> containing the negated values of rightSide. 
            </summary>
            <param name="rightSide">The vector to get the values from.</param>
            <returns>A vector containing the negated values as <paramref name="rightSide"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.op_Subtraction(MathNet.Numerics.LinearAlgebra.Double.DenseVector,MathNet.Numerics.LinearAlgebra.Double.DenseVector)">
            <summary>
            Subtracts two <strong>Vectors</strong> and returns the results.
            </summary>
            <param name="leftSide">The vector to subtract from.</param>
            <param name="rightSide">The vector to subtract.</param>
            <returns>The result of the subtraction.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.Negate">
            <summary>
            Returns a negated vector.
            </summary>
            <returns>The negated vector.</returns>
            <remarks>Added as an alternative to the unary negation operator.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.Multiply(System.Double)">
            <summary>
            Multiplies a scalar to each element of the vector.
            </summary>
            <param name="scalar">The scalar to multiply.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.Norm">
            <summary>
            Euclidean Norm also known as 2-Norm.
            </summary>
            <returns>Scalar ret = sqrt(sum(this[i]^2))</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.Norm1">
            <summary>
            1-Norm also known as Manhattan Norm or Taxicab Norm.
            </summary>
            <returns>Scalar ret = sum(abs(this[i]))</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.NormP(System.Int32)">
            <summary>
            Computes the p-Norm.
            </summary>
            <param name="p">The p value.</param>
            <returns>Scalar ret = (sum(abs(this[i])^p))^(1/p)</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.NormInfinity">
            <summary>
            Infinity Norm.
            </summary>
            <returns>Scalar ret = max(abs(this[i]))</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.Parse(System.String)">
            <summary>
            Creates a double dense vector based on a string. The string can be in the following formats (without the
            quotes): 'n', 'n,n,..', '(n,n,..)', '[n,n,...]', where n is a double.
            </summary>
            <returns>
            A double dense vector containing the values specified by the given string.
            </returns>
            <param name="value">
            The string to parse.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates a double dense vector based on a string. The string can be in the following formats (without the
            quotes): 'n', 'n,n,..', '(n,n,..)', '[n,n,...]', where n is a double.
            </summary>
            <returns>
            A double dense vector containing the values specified by the given string.
            </returns>
            <param name="value">
            the string to parse.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.TryParse(System.String,MathNet.Numerics.LinearAlgebra.Double.DenseVector@)">
            <summary>
            Converts the string representation of a real dense vector to double-precision dense vector equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A string containing a real vector to convert.
            </param>
            <param name="result">
            The parsed value.
            </param>
            <returns>
            If the conversion succeeds, the result will contain a complex number equivalent to value.
            Otherwise the result will be <c>null</c>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.TryParse(System.String,System.IFormatProvider,MathNet.Numerics.LinearAlgebra.Double.DenseVector@)">
            <summary>
            Converts the string representation of a real dense vector to double-precision dense vector equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A string containing a real vector to convert.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about value.
            </param>
            <param name="result">
            The parsed value.
            </param>
            <returns>
            If the conversion succeeds, the result will contain a complex number equivalent to value.
            Otherwise the result will be <c>null</c>.
            </returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.DenseVector.Data">
            <summary>
             Gets the vector's data.
            </summary>
            <value>The vector's data.</value>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.DenseVector.Item(System.Int32)">
            <summary>Gets or sets the value at the given <paramref name="index"/>.</summary>
            <param name="index">The index of the value to get or set.</param>
            <returns>The value of the vector at the given <paramref name="index"/>.</returns> 
            <exception cref="T:System.IndexOutOfRangeException">If <paramref name="index"/> is negative or 
            greater than the size of the vector.</exception>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.Algorithms.BulirschStoerRationalInterpolation">
            <summary>
            Rational Interpolation (with poles) using Roland Bulirsch and Josef Stoer's Algorithm.
            </summary>
            <remarks>
            <para>
            This algorithm supports neither differentiation nor integration.
            </para>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.Algorithms.BulirschStoerRationalInterpolation._points">
            <summary>
            Sample Points t.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.Algorithms.BulirschStoerRationalInterpolation._values">
            <summary>
            Spline Values x(t).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.BulirschStoerRationalInterpolation.#ctor">
            <summary>
            Initializes a new instance of the BulirschStoerRationalInterpolation class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.BulirschStoerRationalInterpolation.#ctor(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initializes a new instance of the BulirschStoerRationalInterpolation class.
            </summary>
            <param name="samplePoints">Sample Points t</param>
            <param name="sampleValues">Sample Values x(t)</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.BulirschStoerRationalInterpolation.Initialize(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initialize the interpolation method with the given sample pairs.
            </summary>
            <param name="samplePoints">Sample Points t</param>
            <param name="sampleValues">Sample Values x(t)</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.BulirschStoerRationalInterpolation.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.BulirschStoerRationalInterpolation.MathNet#Numerics#Interpolation#IInterpolation#Differentiate(System.Double)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated first derivative at point t.</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsDifferentiation"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.BulirschStoerRationalInterpolation.MathNet#Numerics#Interpolation#IInterpolation#Differentiate(System.Double,System.Double@,System.Double@)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <param name="interpolatedValue">Interpolated value x(t)</param>
            <param name="secondDerivative">Interpolated second derivative at point t.</param>
            <returns>Interpolated first derivative at point t.</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsDifferentiation"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Differentiate(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.BulirschStoerRationalInterpolation.MathNet#Numerics#Interpolation#IInterpolation#Integrate(System.Double)">
            <summary>
            Integrate up to point t.
            </summary>
            <param name="t">Right bound of the integration interval [a,t].</param>
            <returns>Interpolated definite integral over the interval [a,t].</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsIntegration"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.BulirschStoerRationalInterpolation.MathNet#Numerics#Interpolation#IInterpolation#SupportsDifferentiation">
            <summary>
            Gets a value indicating whether the algorithm supports differentiation (interpolated derivative).
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Differentiate(System.Double)"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.BulirschStoerRationalInterpolation.MathNet#Numerics#Interpolation#IInterpolation#SupportsIntegration">
            <summary>
            Gets a value indicating whether the algorithm supports integration (interpolated quadrature).
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Integrate(System.Double)"/>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Multinomial">
            <summary>
            Implements the multinomial distribution. For details about this distribution, see 
            <a href="http://en.wikipedia.org/wiki/Multinomial_distribution">Wikipedia - Multinomial distribution</a>.
            </summary>
            <remarks><para>The distribution is parameterized by a vector of ratios: in other words, the parameter
            does not have to be normalized and sum to 1. The reason is that some vectors can't be exactly normalized
            to sum to 1 in floating point representation.</para>
            <para>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can set the random number generator by using the <see cref="P:MathNet.Numerics.Distributions.Multinomial.RandomSource"/> property.</para>
            <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to false, all parameter checks can be turned off.</para></remarks>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Multinomial._p">
            <summary>
            Stores the normalized multinomial probabilities.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Multinomial._n">
            <summary>
            The number of trials.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Multinomial._random">
            <summary>
            The distribution's random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Multinomial.#ctor(System.Double[],System.Int32)">
            <summary>
            Initializes a new instance of the Multinomial class.
            </summary>
            <param name="p">An array of nonnegative ratios: this array does not need to be normalized 
            as this is often impossible using floating point arithmetic.</param>
            <param name="n">The number of trials.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If any of the probabilities are negative or do not sum to one.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="n"/> is negative.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Multinomial.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Multinomial.IsValidParameterSet(System.Double[],System.Int32)">
            <summary>
            Checks whether the parameters of the distribution are valid. 
            </summary>
            <param name="p">An array of nonnegative ratios: this array does not need to be normalized 
            as this is often impossible using floating point arithmetic.</param>
            <param name="n">The number of trials.</param>
            <returns>If any of the probabilities are negative returns false, 
            if the sum of parameters is 0.0, or if the number of trials is negative; otherwise true</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Multinomial.SetParameters(System.Double[],System.Int32)">
            <summary>
            Sets the parameters of the distribution after checking their validity.
            </summary>
            <param name="p">An array of nonnegative ratios: this array does not need to be normalized 
            as this is often impossible using floating point arithmetic.</param>
            <param name="n">The number of trials.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the parameters don't pass the <see cref="M:MathNet.Numerics.Distributions.Multinomial.IsValidParameterSet(System.Double[],System.Int32)"/> function.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Multinomial.Sample">
            <summary>
            Samples one multinomial distributed random variable.
            </summary>
            <returns>the counts for each of the different possible values.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Multinomial.Samples">
            <summary>
            Samples a sequence multinomially distributed random variables.
            </summary>
            <returns>a sequence of counts for each of the different possible values.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Multinomial.Sample(System.Random,System.Double[],System.Int32)">
            <summary>
            Samples one multinomial distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="p">An array of nonnegative ratios: this array does not need to be normalized 
            as this is often impossible using floating point arithmetic.</param>
            <param name="n">The number of trials.</param>
            <returns>the counts for each of the different possible values.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Multinomial.Samples(System.Random,System.Double[],System.Int32)">
            <summary>
            Samples a multinomially distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="p">An array of nonnegative ratios: this array does not need to be normalized 
            as this is often impossible using floating point arithmetic.</param>
            <param name="n">The number of variables needed.</param>
            <returns>a sequence of counts for each of the different possible values.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Multinomial.P">
            <summary>
            Gets or sets the proportion of ratios.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Multinomial.N">
            <summary>
            Gets or sets the number of trials.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Multinomial.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Categorical">
            <summary>
            Implements the categorical distribution. For details about this distribution, see 
            <a href="http://en.wikipedia.org/wiki/Categorical_distribution">Wikipedia - Categorical distribution</a>. This
            distribution is sometimes called the Discrete distribution.
            </summary>
            <remarks><para>The distribution is parameterized by a vector of ratios: in other words, the parameter
            does not have to be normalized and sum to 1. The reason is that some vectors can't be exactly normalized
            to sum to 1 in floating point representation.</para>
            <para>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can set the random number generator by using the <see cref="P:MathNet.Numerics.Distributions.Categorical.RandomSource"/> property.</para>
            <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to false, all parameter checks can be turned off.</para></remarks>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Categorical._p">
            <summary>
            Stores the normalized categorical probabilities.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Categorical._random">
            <summary>
            The distribution's random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of the Categorical class.
            </summary>
            <param name="p">An array of nonnegative ratios: this array does not need to be normalized 
            as this is often impossible using floating point arithmetic.</param>
            <exception cref="T:System.ArgumentException">If any of the probabilities are negative or do not sum to one.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.IsValidParameterSet(System.Double[])">
            <summary>
            Checks whether the parameters of the distribution are valid. 
            </summary>
            <param name="p">An array of nonnegative ratios: this array does not need to be normalized 
            as this is often impossible using floating point arithmetic.</param>
            <returns>If any of the probabilities are negative returns false, or if the sum of parameters is 0.0; otherwise true</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.SetParameters(System.Double[])">
            <summary>
            Sets the parameters of the distribution after checking their validity.
            </summary>
            <param name="p">An array of nonnegative ratios: this array does not need to be normalized 
            as this is often impossible using floating point arithmetic.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the parameters don't pass the <see cref="M:MathNet.Numerics.Distributions.Categorical.IsValidParameterSet(System.Double[])"/> function.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution function of the Binomial distribution.
            </summary>
            <param name="x">The location at which to compute the cumulative density.</param>
            <returns>the cumulative density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.Probability(System.Int32)">
            <summary>
            Computes the probability of a specific value.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.ProbabilityLn(System.Int32)">
            <summary>
            Computes the probability of a specific value.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.Sample">
            <summary>
            Samples a Binomially distributed random variable.
            </summary>
            <returns>The number of successful trials.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.Samples">
            <summary>
            Samples an array of Bernoulli distributed random variables.
            </summary>
            <returns>a sequence of successful trial counts.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.Sample(System.Random,System.Double[])">
            <summary>
            Samples one categorical distributed random variable; also known as the Discrete distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="p">An array of nonnegative ratios: this array does not need to be normalized 
            as this is often impossible using floating point arithmetic.</param>
            <returns>One random integer between 0 and the size of the categorical (exclusive).</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.Samples(System.Random,System.Double[])">
            <summary>
            Samples a categorically distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="p">An array of nonnegative ratios: this array does not need to be normalized 
            as this is often impossible using floating point arithmetic.</param>
            <returns><paramref name="n"/> random integers between 0 and the size of the categorical (exclusive).</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.UnnormalizedCDF(System.Double[])">
            <summary>
            Computes the unnormalized cumulative distribution function. This method performs no
            parameter checking.
            </summary>
            <param name="p">An array of nonnegative ratios: this array does not need to be normalized 
            as this is often impossible using floating point arithmetic.</param>
            <returns>An array representing the unnormalized cumulative distribution function.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.DoSample(System.Random,System.Double[])">
            <summary>
            Returns one trials from the categorical distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="cdf">The cumulative distribution of the probability distribution.</param>
            <returns>One sample from the categorical distribution implied by <see cref="!:cdf"/>.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Categorical.P">
            <summary>
            Gets or sets the probability of generating a one.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Categorical.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Categorical.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Categorical.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Categorical.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Categorical.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Categorical.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Categorical.Minimum">
            <summary>
            Gets the smallest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Categorical.Maximum">
            <summary>
            Gets the largest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Categorical.Mode">
            <summary>
            The mode of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Categorical.Median">
            <summary>
            The median of the distribution.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Bernoulli">
            <summary>
            The Bernoulli distribution is a distribution over bits. The parameter
            p specifies the probability that a 1 is generated.
            </summary>
            <remarks><para>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can set the random number generator by using the <see cref="P:MathNet.Numerics.Distributions.Bernoulli.RandomSource"/> property.</para>
            <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to false, all parameter checks can be turned off.</para></remarks>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Bernoulli._p">
            <summary>
            The probability of generating a one.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Bernoulli._random">
            <summary>
            The distribution's random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Bernoulli.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the Bernoulli class.
            </summary>
            <param name="p">The probability of generating one.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the Bernoulli parameter is not in the range [0,1].</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Bernoulli.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Bernoulli.IsValidParameterSet(System.Double)">
            <summary>
            Checks whether the parameters of the distribution are valid. 
            </summary>
            <param name="p">The probability of generating a one.</param>
            <returns>True when the parameters are valid, false otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Bernoulli.SetParameters(System.Double)">
            <summary>
            Sets the parameters of the distribution after checking their validity.
            </summary>
            <param name="p">The probability of generating a one.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the parameters don't pass the <see cref="M:MathNet.Numerics.Distributions.Bernoulli.IsValidParameterSet(System.Double)"/> function.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Bernoulli.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution function of the Bernoulli distribution.
            </summary>
            <param name="x">The location at which to compute the cumulative density.</param>
            <returns>the cumulative density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Bernoulli.Probability(System.Int32)">
            <summary>
            Computes the probability of a specific value.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Bernoulli.ProbabilityLn(System.Int32)">
            <summary>
            Computes the probability of a specific value.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Bernoulli.Sample">
            <summary>
            Samples a Bernoulli distributed random variable.
            </summary>
            <returns>A sample from the Bernoulli distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Bernoulli.Samples">
            <summary>
            Samples an array of Bernoulli distributed random variables.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Bernoulli.Sample(System.Random,System.Double)">
            <summary>
            Samples a Bernoulli distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="p">The probability of generating a 1.</param>
            <returns>A sample from the Bernoulli distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Bernoulli.Samples(System.Random,System.Double)">
            <summary>
            Samples a sequence of Bernoulli distributed random variables.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="p">The probability of generating a 1.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Bernoulli.DoSample(System.Random,System.Double)">
            <summary>
            Generates one sample from the Bernoulli distribution.
            </summary>
            <param name="rnd">The random source to use.</param>
            <param name="p">The probability of generating a one.</param>
            <returns>A random sample from the Bernoulli distribution.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Bernoulli.P">
            <summary>
            Gets or sets the probability of generating a one.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Bernoulli.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Bernoulli.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Bernoulli.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Bernoulli.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Bernoulli.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Bernoulli.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Bernoulli.Minimum">
            <summary>
            Gets the smallest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Bernoulli.Maximum">
            <summary>
            Gets the largest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Bernoulli.Mode">
            <summary>
            The mode of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Bernoulli.Median">
            <summary>
            The median of the distribution.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.IntegralTransforms.Transform">
            <summary>
            Integral Transforms (including FFT).
            </summary>
        </member>
        <member name="F:MathNet.Numerics.IntegralTransforms.Transform._dft">
            <summary>
            Shared internal DET algorithm.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Transform.FourierForward(MathNet.Numerics.Complex[])">
            <summary>
            Applies the forward Fast Fourier Transform (FFT) to arbitrary-length sample vectors.
            </summary>
            <param name="samples">Sample vector, where the FFT is evaluated in place.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Transform.FourierForward(MathNet.Numerics.Complex[],MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Applies the forward Fast Fourier Transform (FFT) to arbitrary-length sample vectors.
            </summary>
            <param name="samples">Sample vector, where the FFT is evaluated in place.</param>
            <param name="options">Fourier Transform Convention Options.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Transform.FourierInverse(MathNet.Numerics.Complex[])">
            <summary>
            Applies the inverse Fast Fourier Transform (iFFT) to arbitrary-length sample vectors.
            </summary>
            <param name="samples">Sample vector, where the FFT is evaluated in place.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Transform.FourierInverse(MathNet.Numerics.Complex[],MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Applies the inverse Fast Fourier Transform (iFFT) to arbitrary-length sample vectors.
            </summary>
            <param name="samples">Sample vector, where the FFT is evaluated in place.</param>
            <param name="options">Fourier Transform Convention Options.</param>
        </member>
        <member name="T:MathNet.Numerics.GlobalizationHelper">
            <summary>
            Globalized String Handling Helpers
            </summary>
        </member>
        <member name="M:MathNet.Numerics.GlobalizationHelper.GetCultureInfo(System.IFormatProvider)">
            <summary>
            Tries to get a <see cref="T:System.Globalization.CultureInfo"/> from the format provider,
            returning the current culture if it fails.
            </summary>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific
            formatting information.
            </param>
            <returns>A <see cref="T:System.Globalization.CultureInfo"/> instance.</returns>
        </member>
        <member name="M:MathNet.Numerics.GlobalizationHelper.GetNumberFormatInfo(System.IFormatProvider)">
            <summary>
            Tries to get a <see cref="T:System.Globalization.NumberFormatInfo"/> from the format
            provider, returning the current culture if it fails.
            </summary>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific
            formatting information.
            </param>
            <returns>A <see cref="T:System.Globalization.NumberFormatInfo"/> instance.</returns>
        </member>
        <member name="M:MathNet.Numerics.GlobalizationHelper.GetTextInfo(System.IFormatProvider)">
            <summary>
            Tries to get a <see cref="T:System.Globalization.TextInfo"/> from the format provider, returning the current culture if it fails.
            </summary>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific
            formatting information.
            </param>
            <returns>A <see cref="T:System.Globalization.TextInfo"/> instance.</returns>
        </member>
        <member name="M:MathNet.Numerics.GlobalizationHelper.Tokenize(System.Collections.Generic.LinkedListNode{System.String},System.String[],System.Int32)">
            <summary>
            Globalized Parsing: Tokenize a node by splitting it into several nodes.
            </summary>
            <param name="node">Node that contains the trimmed string to be tokenized.</param>
            <param name="keywords">List of keywords to tokenize by.</param>
            <param name="skip">keywords to skip looking for (because they've already been handled).</param>
        </member>
        <member name="M:MathNet.Numerics.GlobalizationHelper.ParseDouble(System.Collections.Generic.LinkedListNode{System.String}@,System.Globalization.CultureInfo)">
            <summary>
            Globalized Parsing: Parse a double number
            </summary>
            <param name="token">First token of the number.</param>
            <param name="culture">Culture Info.</param>
            <returns>The parsed double number using the given culture information.</returns>
            <exception cref="T:System.FormatException"/>
        </member>
        <member name="M:MathNet.Numerics.GlobalizationHelper.ParseSingle(System.Collections.Generic.LinkedListNode{System.String}@,System.Globalization.CultureInfo)">
            <summary>
            Globalized Parsing: Parse a float number
            </summary>
            <param name="token">First token of the number.</param>
            <param name="culture">Culture Info.</param>
            <returns>The parsed float number using the given culture information.</returns>
            <exception cref="T:System.FormatException"/>
        </member>
        <member name="T:MathNet.Numerics.Control">
            <summary>
            Sets parameters for the library.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Control.#cctor">
            <summary>
            Initializes static members of the Control class.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Control.CheckDistributionParameters">
            <summary>
            Gets or sets a value indicating whether the distribution classes check validate each parameter.
            For the multivariate distributions this could involve an expensive matrix factorization.
            The default setting of this property is true.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Control.ThreadSafeRandomNumberGenerators">
            <summary>
            Gets or sets a value indicating whether to use thread safe random number generators (RNG).
            Thread safe RNG about two and half time slower than non-thread safe RNG. 
            </summary>
            <value>
                <c>true</c> to use thread safe random number generators ; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MathNet.Numerics.Control.NumberOfParallelWorkerThreads">
            <summary>
            Gets or sets a value indicating how many parallel worker threads shall be used
            when parallelization is applicable.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Control.DisableParallelization">
            <summary>
            Gets or sets a value indicating whether parallelization shall be disabled globally.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Control.LinearAlgebraProvider">
            <summary>
            Gets or sets the linear algebra provider.
            </summary>
            <value>The linear algebra provider.</value>
        </member>
        <member name="T:MathNet.Numerics.Statistics.DescriptiveStatistics">
            <summary>
            Computes the basic statistics of data set. The class meets the
            NIST standard of accuracy for mean, variance, and standard deviation
            (the only statistics they provide exact values for) and exceeds them 
            in increased accuracy mode.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.DescriptiveStatistics.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Statistics.DescriptiveStatistics"/> class.
            </summary>
            <param name="data">The sample data.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.DescriptiveStatistics.#ctor(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Statistics.DescriptiveStatistics"/> class.
            </summary>
            <param name="data">The sample data.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.DescriptiveStatistics.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Statistics.DescriptiveStatistics"/> class. 
            </summary>
            <param name="data">The sample data.</param>
            <param name="increasedAccuracy">
            If set to <c>true</c>, increased accuracy mode used.
            Increased accuracy mode uses <see cref="T:System.Decimal"/> types for internal calculations.
            </param>
            <remarks>
            Don't use increased accuracy for data sets containing large values (in absolute value).
            This may cause the calculations to overflow.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Statistics.DescriptiveStatistics.#ctor(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Statistics.DescriptiveStatistics"/> class. 
            </summary>
            <param name="data">The sample data.</param>
            <param name="increasedAccuracy">
            If set to <c>true</c>, increased accuracy mode used.
            Increased accuracy mode uses <see cref="T:System.Decimal"/> types for internal calculations.
            </param>
            <remarks>
            Don't use increased accuracy for data sets containing large values (in absolute value).
            This may cause the calculations to overflow.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Statistics.DescriptiveStatistics.Compute(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Computes descriptive statistics from a stream of data values.
            </summary>
            <param name="data">A sequence of datapoints.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.DescriptiveStatistics.Compute(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Computes descriptive statistics from a stream of nullable data values.
            </summary>
            <param name="data">A sequence of datapoints.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.DescriptiveStatistics.ComputeHA(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Computes descriptive statistics from a stream of data values using high accuracy.
            </summary>
            <param name="data">A sequence of datapoints.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.DescriptiveStatistics.ComputeHA(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Computes descriptive statistics from a stream of nullable data values using high accuracy.
            </summary>
            <param name="data">A sequence of datapoints.</param>
        </member>
        <member name="P:MathNet.Numerics.Statistics.DescriptiveStatistics.Count">
            <summary>
            Gets the size of the sample.
            </summary>
            <value>The size of the sample.</value>
        </member>
        <member name="P:MathNet.Numerics.Statistics.DescriptiveStatistics.Mean">
            <summary>
            Gets the sample mean.
            </summary>
            <value>The sample mean.</value>
        </member>
        <member name="P:MathNet.Numerics.Statistics.DescriptiveStatistics.Variance">
            <summary>
            Gets the sample variance.
            </summary>
            <value>The sample variance.</value>
        </member>
        <member name="P:MathNet.Numerics.Statistics.DescriptiveStatistics.StandardDeviation">
            <summary>
            Gets the sample standard deviation.
            </summary>
            <value>The sample standard deviation.</value>
        </member>
        <member name="P:MathNet.Numerics.Statistics.DescriptiveStatistics.Skewness">
            <summary>
            Gets the sample skewness.
            </summary>
            <value>The sample skewness.</value>
            <remarks>Returns zero if <see cref="P:MathNet.Numerics.Statistics.DescriptiveStatistics.Count"/> is less than three. </remarks>
        </member>
        <member name="P:MathNet.Numerics.Statistics.DescriptiveStatistics.Median">
            <summary>
            Gets the sample median.
            </summary>
            <value>The sample median.</value>
        </member>
        <member name="P:MathNet.Numerics.Statistics.DescriptiveStatistics.Kurtosis">
            <summary>
            Gets the sample kurtosis.
            </summary>
            <value>The sample kurtosis.</value>
            <remarks>Returns zero if <see cref="P:MathNet.Numerics.Statistics.DescriptiveStatistics.Count"/> is less than four. </remarks>
        </member>
        <member name="P:MathNet.Numerics.Statistics.DescriptiveStatistics.Maximum">
            <summary>
            Gets the maximum sample value.
            </summary>
            <value>The maximum sample value.</value>
        </member>
        <member name="P:MathNet.Numerics.Statistics.DescriptiveStatistics.Minimum">
            <summary>
            Gets the minimum sample value.
            </summary>
            <value>The minimum sample value.</value>
        </member>
        <member name="T:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider">
            <summary>
            The managed linear algebra provider.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider">
            <summary>
            Interface to linear algebra algorithms that work off 1-D arrays.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1">
            <summary>
            Interface to linear algebra algorithms that work off 1-D arrays.
            </summary>
            <typeparam name="T">Supported data types are double, single, <see cref="T:MathNet.Numerics.Complex"/>, and <see cref="T:MathNet.Numerics.Complex32"/>.</typeparam>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.QueryWorkspaceBlockSize(System.String)">
            <summary>
            Queries the provider for the optimal, workspace block size
            for the given routine.
            </summary>
            <param name="methodName">Name of the method to query.</param>
            <returns>-1 if the provider cannot compute the workspace size; otherwise
            the suggested block size.</returns>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.AddVectorToScaledVector(`0[],`0,`0[])">
            <summary>
            Adds a scaled vector to another: <c>y += alpha*x</c>.
            </summary>
            <param name="y">The vector to update.</param>
            <param name="alpha">The value to scale <paramref name="x"/> by.</param>
            <param name="x">The vector to add to <paramref name="y"/>.</param>
            <remarks>This is equivalent to the AXPY BLAS routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.ScaleArray(`0,`0[])">
            <summary>
            Scales an array. Can be used to scale a vector and a matrix.
            </summary>
            <param name="alpha">The scalar.</param>
            <param name="x">The values to scale.</param>
            <remarks>This is equivalent to the SCAL BLAS routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.DotProduct(`0[],`0[])">
            <summary>
            Computes the dot product of x and y.
            </summary>
            <param name="x">The vector x.</param>
            <param name="y">The vector y.</param>
            <returns>The dot product of x and y.</returns>
            <remarks>This is equivalent to the DOT BLAS routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.AddArrays(`0[],`0[],`0[])">
            <summary>
            Does a point wise add of two arrays <c>z = x + y</c>. This can be used 
            to add vectors or matrices.
            </summary>
            <param name="x">The array x.</param>
            <param name="y">The array y.</param>
            <param name="result">The result of the addition.</param>
            <remarks>There is no equivalent BLAS routine, but many libraries
            provide optimized (parallel and/or vectorized) versions of this
            routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.SubtractArrays(`0[],`0[],`0[])">
            <summary>
            Does a point wise subtraction of two arrays <c>z = x - y</c>. This can be used 
            to subtract vectors or matrices.
            </summary>
            <param name="x">The array x.</param>
            <param name="y">The array y.</param>
            <param name="result">The result of the subtraction.</param>
            <remarks>There is no equivalent BLAS routine, but many libraries
            provide optimized (parallel and/or vectorized) versions of this
            routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.PointWiseMultiplyArrays(`0[],`0[],`0[])">
            <summary>
            Does a point wise multiplication of two arrays <c>z = x * y</c>. This can be used
            to multiple elements of vectors or matrices.
            </summary>
            <param name="x">The array x.</param>
            <param name="y">The array y.</param>
            <param name="result">The result of the point wise multiplication.</param>
            <remarks>There is no equivalent BLAS routine, but many libraries
            provide optimized (parallel and/or vectorized) versions of this
            routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.MatrixNorm(MathNet.Numerics.Algorithms.LinearAlgebra.Norm,`0[])">
            <summary>
            Computes the requested <see cref="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm"/> of the matrix.
            </summary>
            <param name="norm">The type of norm to compute.</param>
            <param name="matrix">The matrix to compute the norm from.</param>
            <returns>
            The requested <see cref="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm"/> of the matrix.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.MatrixNorm(MathNet.Numerics.Algorithms.LinearAlgebra.Norm,`0[],`0[])">
            <summary>
            Computes the requested <see cref="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm"/> of the matrix.
            </summary>
            <param name="norm">The type of norm to compute.</param>
            <param name="matrix">The matrix to compute the norm from.</param>
            <param name="work">The work array. Only used when <see cref="F:MathNet.Numerics.Algorithms.LinearAlgebra.Norm.InfinityNorm"/>
            and needs to be have a length of at least M (number of rows of <paramref name="matrix"/>.</param>
            <returns>
            The requested <see cref="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm"/> of the matrix.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.MatrixMultiply(`0[],`0[],`0[])">
            <summary>
            Multiples two matrices. <c>result = x * y</c>
            </summary>
            <param name="x">The x matrix.</param>
            <param name="y">The y matrix.</param>
            <param name="result">Where to store the result of the multiplication.</param>
            <remarks>This is a simplified version of the BLAS GEMM routine with alpha
            set to 1.0 and beta set to 0.0, and x and y are not transposed.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.MatrixMultiplyWithUpdate(MathNet.Numerics.Algorithms.LinearAlgebra.Transpose,MathNet.Numerics.Algorithms.LinearAlgebra.Transpose,`0,`0[],`0[],`0,`0[])">
            <summary>
            Multiplies two matrices and updates another with the result. <c>c = alpha*op(a)*op(b) + beta*c</c>
            </summary>
            <param name="transposeA">How to transpose the <paramref name="a"/> matrix.</param>
            <param name="transposeB">How to transpose the <paramref name="b"/> matrix.</param>
            <param name="alpha">The value to scale <paramref name="a"/> matrix.</param>
            <param name="a">The a matrix.</param>
            <param name="b">The b matrix</param>
            <param name="beta">The value to scale the <paramref name="c"/> matrix.</param>
            <param name="c">The c matrix.</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.LUFactor(`0[],System.Int32[])">
            <summary>
            Computes the LU factorization of A.
            </summary>
            <param name="a">An m by n matrix. The matrix is overwritten with the
            the LU factorization On exit.</param>
            <param name="ipiv">On exit, it contains the pivot indices. The size
            of the array must be min(m,n).</param>
            <remarks>This is equivalent to the GETRF LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.LUInverse(`0[])">
            <summary>
            Computes the inverse of matrix using LU factorization.
            </summary>
            <param name="a">The N by N matrix to invert. Contains the inverse On exit.</param>
            <remarks>This is equivalent to the GETRF and GETRI LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.LUInverseFactored(`0[],System.Int32[])">
            <summary>
            Computes the inverse of a previously factored matrix.
            </summary>
            <param name="a">The LU factored N by N matrix.  Contains the inverse On exit.</param>
            <param name="ipiv">The pivot indices of <paramref name="a"/>.</param>
            <remarks>This is equivalent to the GETRI LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.LUInverse(`0[],`0[])">
            <summary>
            Computes the inverse of matrix using LU factorization.
            </summary>
            <param name="a">The N by N matrix to invert. Contains the inverse On exit.</param>
            <param name="work">The work array. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. Use <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.QueryWorkspaceBlockSize(System.String)"/>
            to determine the optimal size of the work array. On exit, work[0] contains the optimal
            work size value.</param>
            <remarks>This is equivalent to the GETRF and GETRI LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.LUInverseFactored(`0[],System.Int32[],`0[])">
            <summary>
            Computes the inverse of a previously factored matrix.
            </summary>
            <param name="a">The LU factored N by N matrix.  Contains the inverse On exit.</param>
            <param name="ipiv">The pivot indices of <paramref name="a"/>.</param>
            <param name="work">The work array. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. Use <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.QueryWorkspaceBlockSize(System.String)"/>
            to determine the optimal size of the work array. On exit, work[0] contains the optimal
            work size value.</param>
            <remarks>This is equivalent to the GETRI LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.LUSolve(System.Int32,`0[],`0[])">
            <summary>
            Solves A*X=B for X using LU factorization.
            </summary>
            <param name="columnsOfB">The number of columns of B.</param>
            <param name="a">The square matrix A.</param>
            <param name="b">The B matrix.</param>
            <remarks>This is equivalent to the GETRF and GETRS LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.LUSolveFactored(System.Int32,`0[],System.Int32,`0[])">
            <summary>
            Solves A*X=B for X using a previously factored A matrix.
            </summary>
            <param name="columnsOfB">The number of columns of B.</param>
            <param name="a">The factored A matrix.</param>
            <param name="ipiv">The pivot indices of <paramref name="a"/>.</param>
            <param name="b">The B matrix.</param>
            <remarks>This is equivalent to the GETRS LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.LUSolve(MathNet.Numerics.Algorithms.LinearAlgebra.Transpose,System.Int32,`0[],`0[])">
            <summary>
            Solves A*X=B for X using LU factorization.
            </summary>
            <param name="transposeA">How to transpose the <paramref name="a"/> matrix.</param>
            <param name="columnsOfB">The number of columns of B.</param>
            <param name="a">The square matrix A.</param>
            <param name="b">The B matrix.</param>
            <remarks>This is equivalent to the GETRF and GETRS LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.LUSolveFactored(MathNet.Numerics.Algorithms.LinearAlgebra.Transpose,System.Int32,`0[],System.Int32,`0[])">
            <summary>
            Solves A*X=B for X using a previously factored A matrix.
            </summary>
            <param name="transposeA">How to transpose the <paramref name="a"/> matrix.</param>
            <param name="columnsOfB">The number of columns of B.</param>
            <param name="a">The factored A matrix.</param>
            <param name="ipiv">The pivot indices of <paramref name="a"/>.</param>
            <param name="b">The B matrix.</param>
            <remarks>This is equivalent to the GETRS LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.CholeskyFactor(`0[])">
            <summary>
            Computes the Cholesky factorization of A.
            </summary>
            <param name="a">On entry, a square, positive definite matrix. On exit, the matrix is overwritten with the
            the Cholesky factorization.</param>
            <remarks>This is equivalent to the POTRF LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.CholeskySolve(System.Int32,`0[],`0[])">
            <summary>
            Solves A*X=B for X using Cholesky factorization.
            </summary>
            <param name="columnsOfB">The number of columns of B.</param>
            <param name="a">The square, positive definite matrix A.</param>
            <param name="b">The B matrix.</param>
            <remarks>This is equivalent to the POTRF add POTRS LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.CholeskySolveFactored(System.Int32,`0[],`0[])">
            <summary>
            Solves A*X=B for X using a previously factored A matrix.
            </summary>
            <param name="columnsOfB">The number of columns of B.</param>
            <param name="a">The factored A matrix.</param>
            <param name="b">The B matrix.</param>
            <remarks>This is equivalent to the POTRS LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.QRFactor(`0[],`0[])">
            <summary>
            Computes the QR factorization of A.
            </summary>
            <param name="r">On entry, it is the M by N A matrix to factor. On exit,
            it is overwritten with the R matrix of the QR factorization. </param>
            <param name="q">On exit, A M by M matrix that holds the Q matrix of the
            QR factorization.</param>
            <remarks>This is similar to the GEQRF and ORGQR LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.QRFactor(`0[],`0[],`0[])">
            <summary>
            Computes the QR factorization of A.
            </summary>
            <param name="r">On entry, it is the M by N A matrix to factor. On exit,
            it is overwritten with the R matrix of the QR factorization. </param>
            <param name="q">On exit, A M by M matrix that holds the Q matrix of the 
            QR factorization.</param>
            <param name="work">The work array. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. Use <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.QueryWorkspaceBlockSize(System.String)"/>
            to determine the optimal size of the work array. On exit, work[0] contains the optimal
            work size value.</param>
            <remarks>This is similar to the GEQRF and ORGQR LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.QRSolve(System.Int32,`0[],`0[],`0[],`0[])">
            <summary>
            Solves A*X=B for X using QR factorization of A.
            </summary>
            <param name="columnsOfB">The number of columns of B.</param>
            <param name="r">On entry, it is the M by N A matrix to factor. On exit,
            it is overwritten with the R matrix of the QR factorization. </param>
            <param name="q">On exit, A M by M matrix that holds the Q matrix of the 
            QR factorization.</param>
            <param name="b">The B matrix.</param>
            <param name="x">On exit, the solution matrix.</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.QRSolve(System.Int32,`0[],`0[],`0[],`0[],`0[])">
            <summary>
            Solves A*X=B for X using QR factorization of A.
            </summary>
            <param name="columnsOfB">The number of columns of B.</param>
            <param name="r">On entry, it is the M by N A matrix to factor. On exit,
            it is overwritten with the R matrix of the QR factorization. </param>
            <param name="q">On exit, A M by M matrix that holds the Q matrix of the 
            QR factorization.</param>
            <param name="b">The B matrix.</param>
            <param name="x">On exit, the solution matrix.</param>
            <param name="work">The work array. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. Use <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.QueryWorkspaceBlockSize(System.String)"/>
            to determine the optimal size of the work array. On exit, work[0] contains the optimal
            work size value.</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.QRSolveFactored(System.Int32,`0[],`0[],`0[],`0[])">
            <summary>
            Solves A*X=B for X using a previously QR factored matrix.
            </summary>
            <param name="columnsOfB">The number of columns of B.</param>
            <param name="q">The Q matrix obtained by calling <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.QRFactor(`0[],`0[])"/>.</param>
            <param name="r">The R matrix obtained by calling <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.QRFactor(`0[],`0[])"/>. </param>
            <param name="b">The B matrix.</param>
            <param name="x">On exit, the solution matrix.</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.SinguarValueDecomposition(System.Boolean,`0[],`0[],`0[],`0[])">
            <summary>
            Computes the singular value decomposition of A.
            </summary>
            <param name="computeVectors">Compute the singular U and VT vectors or not.</param>
            <param name="a">On entry, the M by N matrix to decompose. On exit, A may be overwritten.</param>
            <param name="s">The singular values of A in ascending value. </param>
            <param name="u">If <paramref name="computeVectors"/> is true, on exit U contains the left
            singular vectors.</param>
            <param name="vt">If <paramref name="computeVectors"/> is true, on exit VT contains the transposed
            right singular vectors.</param>
            <remarks>This is equivalent to the GESVD LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.SingularValueDecomposition(System.Boolean,`0[],`0[],`0[],`0[],`0[])">
            <summary>
            Computes the singular value decomposition of A.
            </summary>
            <param name="computeVectors">Compute the singular U and VT vectors or not.</param>
            <param name="a">On entry, the M by N matrix to decompose. On exit, A may be overwritten.</param>
            <param name="s">The singular values of A in ascending value. </param>
            <param name="u">If <paramref name="computeVectors"/> is true, on exit U contains the left
            singular vectors.</param>
            <param name="vt">If <paramref name="computeVectors"/> is true, on exit VT contains the transposed
            right singular vectors.</param>
            <param name="work">The work array. For real matrices, the work array should be at least
            Max(3*Min(M, N) + Max(M, N), 5*Min(M,N)). For complex matrices, 2*Min(M, N) + Max(M, N).
            On exit, work[0] contains the optimal work size value.
            </param>
            <remarks>This is equivalent to the GESVD LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.SvdSolve(`0[],`0[],`0[],`0[],`0[],`0[])">
            <summary>
            Solves A*X=B for X using the singular value decomposition of A.
            </summary>
            <param name="a">On entry, the M by N matrix to decompose. On exit, A may be overwritten.</param>
            <param name="s">The singular values of A in ascending value. </param>
            <param name="u">On exit U contains the left singular vectors.</param>
            <param name="vt">On exit VT contains the transposed right singular vectors.</param>
            <param name="b">The B matrix.</param>
            <param name="x">On exit, the solution matrix.</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.SvdSolve(`0[],`0[],`0[],`0[],`0[],`0[],`0[])">
            <summary>
            Solves A*X=B for X using the singular value decomposition of A.
            </summary>
            <param name="a">On entry, the M by N matrix to decompose. On exit, A may be overwritten.</param>
            <param name="s">The singular values of A in ascending value. </param>
            <param name="u">On exit U contains the left singular vectors.</param>
            <param name="vt">On exit VT contains the transposed right singular vectors.</param>
            <param name="b">The B matrix.</param>
            <param name="x">On exit, the solution matrix.</param>
            <param name="work">The work array. For real matrices, the work array should be at least
            Max(3*Min(M, N) + Max(M, N), 5*Min(M,N)). For complex matrices, 2*Min(M, N) + Max(M, N).
            On exit, work[0] contains the optimal work size value.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.SvdSolveFactored(System.Int32,`0[],`0[],`0[],`0[],`0[])">
            <summary>
            Solves A*X=B for X using a previously SVD decomposed matrix.
            </summary>
            <param name="columnsOfB">The number of columns of B.</param>
            <param name="s">The s values returned by <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.SinguarValueDecomposition(System.Boolean,`0[],`0[],`0[],`0[])"/>.</param>
            <param name="u">The left singular vectors returned by  <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.SinguarValueDecomposition(System.Boolean,`0[],`0[],`0[],`0[])"/>.</param>
            <param name="vt">The right singular  vectors returned by  <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.SinguarValueDecomposition(System.Boolean,`0[],`0[],`0[],`0[])"/>.</param>
            <param name="b">The B matrix.</param>
            <param name="x">On exit, the solution matrix.</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.AddVectorToScaledVector(System.Double[],System.Double,System.Double[])">
            <summary>
            Adds a scaled vector to another: <c>y += alpha*x</c>.
            </summary>
            <param name="y">The vector to update.</param>
            <param name="alpha">The value to scale <paramref name="x"/> by.</param>
            <param name="x">The vector to add to <paramref name="y"/>.</param>
            <remarks>This equivalent to the AXPY BLAS routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.ScaleArray(System.Double,System.Double[])">
            <summary>
            Scales an array. Can be used to scale a vector and a matrix.
            </summary>
            <param name="alpha">The scalar.</param>
            <param name="x">The values to scale.</param>
            <remarks>This is equivalent to the SCAL BLAS routine.</remarks>
        </member>
        <member name="T:MathNet.Numerics.Threading.Task`1">
            <summary>
            Internal Generic Parallel Task Handle.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="T:MathNet.Numerics.Threading.Task">
            <summary>
            Internal Parallel Task Handle.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Threading.Task._body">
            <summary>
            Delegate to the task's action.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Threading.Task.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the Task class.
            </summary>
            <param name="body">Delegate to the task's action.</param>
        </member>
        <member name="M:MathNet.Numerics.Threading.Task.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Threading.Task"/> class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Threading.Task.Compute">
            <summary>
            Run the task.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Threading.Task.DoCompute">
            <summary>
            Runs the actual task.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Threading.Task.Wait">
            <summary>
            Waits for the task to complete execution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Threading.Task.IsFaulted">
            <summary>
            Gets a value indicating whether the task completed due to an unhandled exception.
            </summary>
            <value>
                <c>true</c> if this task completed due to an unhandled exception; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MathNet.Numerics.Threading.Task.IsCompleted">
            <summary>
            Gets a value indicating whether this task has completed.
            </summary>
            <value>
                <c>true</c> if this task has completed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MathNet.Numerics.Threading.Task.Exception">
            <summary>
            Gets or sets the exception thrown by the task, if any.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Threading.Task`1._body">
            <summary>
            Delegate to the task's action.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Threading.Task`1._state">
            <summary>
            Variable used to hold state information between iterations.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Threading.Task`1.#ctor(System.Func{System.Object,`0},System.Object)">
            <summary>
            Initializes a new instance of the Task class.
            </summary>
            <param name="body">Delegate to the task's action.</param>
            <param name="state">An object representing data to be used by the action.</param>
        </member>
        <member name="M:MathNet.Numerics.Threading.Task`1.DoCompute">
            <summary>
            Runs the actual task.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Threading.Task`1.Result">
            <summary>
            Gets the result of the task.
            </summary>
            <value>The result of the task.</value>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Dirichlet">
            <summary>
            Implements the multivariate Dirichlet distribution. For details about this distribution, see 
            <a href="http://en.wikipedia.org/wiki/Dirichlet_distribution">Wikipedia - Dirichlet distribution</a>.
            </summary>
            <remarks><para>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can get/set the random number generator by using the <see cref="P:MathNet.Numerics.Distributions.Dirichlet.RandomSource"/> property.</para>
            <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to false, all parameter checks can be turned off.</para></remarks>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Dirichlet._random">
            <summary>
            The distribution's random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Dirichlet.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of the Dirichlet class. The distribution will
            be initialized with the default <seealso cref="T:System.Random"/> random number generator.
            </summary>
            <param name="alpha">An array with the Dirichlet parameters.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Dirichlet.#ctor(System.Double,System.Int32)">
            <summary>
            Constructs a new symmetric Dirichlet distribution. The distribution will
            be initialized with the default <seealso cref="T:System.Random"/> random number generator.
            </summary>
            <param name="alpha">The value of each parameter of the Dirichlet distribution.</param>
            <param name="k">The dimension of the Dirichlet distribution.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Dirichlet.IsValidParameterSet(System.Double[])">
            <summary>
            Checks whether the parameters of the distribution are valid: no parameter can be less than zero and
            at least one parameter should be larger than zero.
            </summary>
            <param name="alpha">The parameters of the Dirichlet distribution.</param>
            <returns>True when the parameters are valid, false otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Dirichlet.SetParameters(System.Double[])">
            <summary>
            Sets the parameters of the distribution after checking their validity.
            </summary>
            <param name="alpha">The parameters of the Dirichlet distribution.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the parameters don't pass the <see cref="M:MathNet.Numerics.Distributions.Dirichlet.IsValidParameterSet(System.Double[])"/> function.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Dirichlet.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Dirichlet.Sample">
            <summary>
            Samples a Dirichlet distributed random vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Dirichlet.Sample(System.Random,System.Double[])">
            <summary>
            Samples a Dirichlet distributed random vector.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="alpha">The Dirichlet distribution parameter.</param>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Dirichlet.Dimension">
            <summary>
            Gets the dimension of the Dirichlet distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Dirichlet.Alpha">
            <summary>
            Gets or sets the parameters of the Dirichlet distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Dirichlet.AlphaSum">
            <summary>
            The sum of the Dirichlet parameters.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Dirichlet.Mean">
            <summary>
            Gets the mean of the Dirichlet distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Dirichlet.Variance">
            <summary>
            Gets the variance of the Dirichlet distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Dirichlet.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Sampling.Sample">
            <summary>
            Generic Function Sampling and Quantization Provider
            </summary>
            <summary>
            Generic Function Sampling and Quantization Provider
            </summary>
            <summary>
            Generic Function Sampling and Quantization Provider
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Sampling.Sample.ChebyshevNodesFirstKind``1(System.Func{System.Double,``0},System.Double,System.Double,System.Int32)">
            <summary>
            Samples a function at the roots of the Chebyshev polynomial of the first kind.
            </summary>
            <param name="function">The real-domain function to sample.</param>
            <param name="intervalBegin">The real domain interval begin where to start sampling.</param>
            <param name="intervalEnd">The real domain interval end where to stop sampling.</param>
            <param name="sampleCount">The number of samples to generate.</param>
            <typeparam name="T">The value type of the function to sample.</typeparam>
            <returns>Vector of the function sampled in [a,b] at (b+a)/2+(b-1)/2*cos(pi*(2i-1)/(2n))</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:MathNet.Numerics.Sampling.Sample.ChebyshevNodesSecondKind``1(System.Func{System.Double,``0},System.Double,System.Double,System.Int32)">
            <summary>
            Samples a function at the roots of the Chebyshev polynomial of the second kind.
            </summary>
            <param name="function">The real-domain function to sample.</param>
            <param name="intervalBegin">The real domain interval begin where to start sampling.</param>
            <param name="intervalEnd">The real domain interval end where to stop sampling.</param>
            <param name="sampleCount">The number of samples to generate.</param>
            <typeparam name="T">The value type of the function to sample.</typeparam>
            <returns>Vector of the function sampled in [a,b] at (b+a)/2+(b-1)/2*cos(pi*i/(n-1))</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:MathNet.Numerics.Sampling.Sample.Random``1(System.Func{System.Double,``0},MathNet.Numerics.Distributions.IContinuousDistribution,System.Int32)">
            <summary>
            Samples a function randomly with the provided distribution.
            </summary>
            <param name="function">The real-domain function to sample.</param>
            <param name="distribution">Random distribution of the real domain sample points.</param>
            <param name="sampleCount">The number of samples to generate.</param>
            <typeparam name="T">The value type of the function to sample.</typeparam>
            <returns>The generated sample vector.</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:MathNet.Numerics.Sampling.Sample.Random``1(System.Func{System.Double,``0},MathNet.Numerics.Distributions.IContinuousDistribution,System.Int32,System.Double[]@)">
            <summary>
            Samples a function randomly with the provided distribution.
            </summary>
            <param name="function">The real-domain function to sample.</param>
            <param name="distribution">Random distribution of the real domain sample points.</param>
            <param name="sampleCount">The number of samples to generate.</param>
            <param name="samplePoints">The real domain points where the samples are taken at.</param>
            <typeparam name="T">The value type of the function to sample.</typeparam>
            <returns>The generated sample vector.</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:MathNet.Numerics.Sampling.Sample.Random``1(System.Func{System.Double,System.Double,``0},MathNet.Numerics.Distributions.IContinuousDistribution,System.Int32)">
            <summary>
            Samples a two-domain function randomly with the provided distribution.
            </summary>
            <param name="function">The real-domain function to sample.</param>
            <param name="distribution">Random distribution of the real domain sample points.</param>
            <param name="sampleCount">The number of samples to generate.</param>
            <typeparam name="T">The value type of the function to sample.</typeparam>
            <returns>The generated sample vector.</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:MathNet.Numerics.Sampling.Sample.EquidistantInterval``1(System.Func{System.Double,``0},System.Double,System.Double,System.Int32)">
            <summary>
            Samples a function equidistant within the provided interval.
            </summary>
            <param name="function">The real-domain function to sample.</param>
            <param name="intervalBegin">The real domain interval begin where to start sampling.</param>
            <param name="intervalEnd">The real domain interval end where to stop sampling.</param>
            <param name="sampleCount">The number of samples to generate.</param>
            <typeparam name="T">The value type of the function to sample.</typeparam>
            <returns>The generated sample vector.</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:MathNet.Numerics.Sampling.Sample.EquidistantInterval``1(System.Func{System.Double,``0},System.Double,System.Double,System.Int32,System.Double[]@)">
            <summary>
            Samples a function equidistant within the provided interval.
            </summary>
            <param name="function">The real-domain function to sample.</param>
            <param name="intervalBegin">The real domain interval begin where to start sampling.</param>
            <param name="intervalEnd">The real domain interval end where to stop sampling.</param>
            <param name="sampleCount">The number of samples to generate.</param>
            <param name="samplePoints">The real domain points where the samples are taken at.</param>
            <typeparam name="T">The value type of the function to sample.</typeparam>
            <returns>The generated sample vector.</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:MathNet.Numerics.Sampling.Sample.EquidistantPeriodic``1(System.Func{System.Double,``0},System.Double,System.Double,System.Int32)">
            <summary>
            Samples a periodic function equidistant within one period, but omits the last sample such that the sequence
            can be concatenated together.
            </summary>
            <param name="function">The real-domain function to sample.</param>
            <param name="periodLength">The real domain full period length.</param>
            <param name="periodOffset">The real domain offset where to start the sampling period.</param>
            <param name="sampleCount">The number of samples to generate.</param>
            <typeparam name="T">The value type of the function to sample.</typeparam>
            <returns>The generated sample vector.</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:MathNet.Numerics.Sampling.Sample.EquidistantPeriodic``1(System.Func{System.Double,``0},System.Double,System.Double,System.Int32,System.Double[]@)">
            <summary>
            Samples a periodic function equidistant within one period, but omits the last sample such that the sequence
            can be concatenated together.
            </summary>
            <param name="function">The real-domain function to sample.</param>
            <param name="periodLength">The real domain full period length.</param>
            <param name="periodOffset">The real domain offset where to start the sampling period.</param>
            <param name="sampleCount">The number of samples to generate.</param>
            <param name="samplePoints">The real domain points where the samples are taken at.</param>
            <typeparam name="T">The value type of the function to sample.</typeparam>
            <returns>The generated sample vector.</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:MathNet.Numerics.Sampling.Sample.EquidistantStartingAt``1(System.Func{System.Double,``0},System.Double,System.Double,System.Int32)">
            <summary>
            Samples a function equidistant starting from the provided location with a fixed step length.
            </summary>
            <param name="function">The real-domain function to sample.</param>
            <param name="start">The real domain location offset where to start sampling.</param>
            <param name="step">The real domain step length between the equidistant samples.</param>
            <param name="sampleCount">The number of samples to generate.</param>
            <typeparam name="T">The value type of the function to sample.</typeparam>
            <returns>The generated sample vector.</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:MathNet.Numerics.Sampling.Sample.EquidistantStartingAt``1(System.Func{System.Double,``0},System.Double,System.Double,System.Int32,System.Double[]@)">
            <summary>
            Samples a function equidistant starting from the provided location with a fixed step length.
            </summary>
            <param name="function">The real-domain function to sample.</param>
            <param name="start">The real domain location offset where to start sampling.</param>
            <param name="step">The real domain step length between the equidistant samples.</param>
            <param name="sampleCount">The number of samples to generate.</param>
            <param name="samplePoints">The real domain points where the samples are taken at.</param>
            <typeparam name="T">The value type of the function to sample.</typeparam>
            <returns>The generated sample vector.</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:MathNet.Numerics.Sampling.Sample.EquidistantContinuous``1(System.Func{System.Double,``0},System.Double,System.Double)">
            <summary>
            Samples a function equidistant continuously starting from the provided location with a fixed step length.
            </summary>
            <param name="function">The real-domain function to sample.</param>
            <param name="start">The real domain location offset where to start sampling.</param>
            <param name="step">The real domain step length between the equidistant samples.</param>
            <typeparam name="T">The value type of the function to sample.</typeparam>
            <returns>The generated sample enumerator.</returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:MathNet.Numerics.Sampling.Sample.EquidistantToFunction``1(System.Func{System.Double,``0},System.Double,System.Double)">
            <summary>
            Samples a function equidistant with the provided start and step length to an integer-domain function
            </summary>
            <param name="function">The real-domain function to sample.</param>
            <param name="start">The real domain location where to start sampling.</param>
            <param name="step">The real domain step length between the equidistant samples.</param>
            <typeparam name="T">The value type of the function to sample.</typeparam>
            <returns>The generated samples integer-domain function.</returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.Algorithms.BarycentricInterpolation">
            <summary>
            Barycentric Interpolation Algorithm.
            </summary>
            <remarks>
            This algorithm neither supports differentiation nor integration.
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.Algorithms.BarycentricInterpolation._points">
            <summary>
            Sample Points t.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.Algorithms.BarycentricInterpolation._values">
            <summary>
            Sample Values x(t).
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.Algorithms.BarycentricInterpolation._weights">
            <summary>
            Barycentric Weights w(t).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.BarycentricInterpolation.#ctor">
            <summary>
            Initializes a new instance of the BarycentricInterpolation class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.BarycentricInterpolation.#ctor(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initializes a new instance of the BarycentricInterpolation class.
            </summary>
            <param name="samplePoints">Sample Points t (no sorting assumed)</param>
            <param name="sampleValues">Sample Values x(t)</param>
            <param name="barycentricWeights">Barycentric weights w(t)</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.BarycentricInterpolation.Initialize(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initialize the interpolation method with the given sample set (no sorting assumed).
            </summary>
            <param name="samplePoints">Sample Points t</param>
            <param name="sampleValues">Sample Values x(t)</param>
            <param name="barycentricWeights">Barycentric weights w(t)</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.BarycentricInterpolation.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.BarycentricInterpolation.MathNet#Numerics#Interpolation#IInterpolation#Differentiate(System.Double)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated first derivative at point t.</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsDifferentiation"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.BarycentricInterpolation.MathNet#Numerics#Interpolation#IInterpolation#Differentiate(System.Double,System.Double@,System.Double@)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <param name="interpolatedValue">Interpolated value x(t)</param>
            <param name="secondDerivative">Interpolated second derivative at point t.</param>
            <returns>Interpolated first derivative at point t.</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsDifferentiation"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Differentiate(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.BarycentricInterpolation.MathNet#Numerics#Interpolation#IInterpolation#Integrate(System.Double)">
            <summary>
            Integrate up to point t.
            </summary>
            <param name="t">Right bound of the integration interval [a,t].</param>
            <returns>Interpolated definite integral over the interval [a,t].</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsIntegration"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.BarycentricInterpolation.MathNet#Numerics#Interpolation#IInterpolation#SupportsDifferentiation">
            <summary>
            Gets a value indicating whether the algorithm supports differentiation (interpolated derivative).
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Differentiate(System.Double)"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.BarycentricInterpolation.MathNet#Numerics#Interpolation#IInterpolation#SupportsIntegration">
            <summary>
            Gets a value indicating whether the algorithm supports integration (interpolated quadrature).
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Integrate(System.Double)"/>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.Algorithms.EquidistantPolynomialInterpolation">
            <summary>
            Barycentric Polynomial Interpolation where the given sample points are equidistant.
            </summary>
            <remarks>
            This algorithm neither supports differentiation nor integration.
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.Algorithms.EquidistantPolynomialInterpolation._barycentric">
            <summary>
            Internal Barycentric Interpolation
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.EquidistantPolynomialInterpolation.#ctor">
            <summary>
            Initializes a new instance of the EquidistantPolynomialInterpolation class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.EquidistantPolynomialInterpolation.#ctor(System.Double,System.Double,System.Collections.Generic.IList{System.Double})">
            <summary>
            Initializes a new instance of the EquidistantPolynomialInterpolation class.
            </summary>
            <param name="leftBound">Left bound of the sample point interval.</param>
            <param name="rightBound">Right bound of the sample point interval.</param>
            <param name="sampleValues">Sample Values x(t) where t is equidistant over [a,b], i.e. x[i] = x(a+(b-a)*i/(n-1))</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.EquidistantPolynomialInterpolation.#ctor(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initializes a new instance of the EquidistantPolynomialInterpolation class.
            </summary>
            <param name="samplePoints">Equidistant Sample Points t = a+(b-a)*i/(n-1)</param>
            <param name="sampleValues">Sample Values x(t) where t are equidistant over [a,b], i.e. x[i] = x(a+(b-a)*i/(n-1))</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.EquidistantPolynomialInterpolation.Initialize(System.Double,System.Double,System.Collections.Generic.IList{System.Double})">
            <summary>
            Initialize the interpolation method with the given sampls in the interval [leftBound,rightBound].
            </summary>
            <param name="leftBound">Left bound of the sample point interval.</param>
            <param name="rightBound">Right bound of the sample point interval.</param>
            <param name="sampleValues">Sample Values x(t) where t are equidistant over [a,b], i.e. x[i] = x(a+(b-a)*i/(n-1))</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.EquidistantPolynomialInterpolation.Initialize(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initialize the interpolation method with the given sample set (no sorting assumed).
            </summary>
            <param name="samplePoints">Equidistant Sample Points t = a+(b-a)*i/(n-1)</param>
            <param name="sampleValues">Sample Values x(t) where t are equidistant over [a,b], i.e. x[i] = x(a+(b-a)*i/(n-1))</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.EquidistantPolynomialInterpolation.EvaluateBarycentricWeights(System.Int32)">
            <summary>
            Evaluate the barycentric weights as used
            internally by this interpolation algorithm.
            </summary>
            <param name="sampleCount">Count of Sample Values x(t).</param>
            <returns>Barycentric Weight Vector</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.EquidistantPolynomialInterpolation.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.EquidistantPolynomialInterpolation.MathNet#Numerics#Interpolation#IInterpolation#Differentiate(System.Double)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated first derivative at point t.</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsDifferentiation"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.EquidistantPolynomialInterpolation.MathNet#Numerics#Interpolation#IInterpolation#Differentiate(System.Double,System.Double@,System.Double@)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <param name="interpolatedValue">Interpolated value x(t)</param>
            <param name="secondDerivative">Interpolated second derivative at point t.</param>
            <returns>Interpolated first derivative at point t.</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsDifferentiation"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Differentiate(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.EquidistantPolynomialInterpolation.MathNet#Numerics#Interpolation#IInterpolation#Integrate(System.Double)">
            <summary>
            Integrate up to point t.
            </summary>
            <param name="t">Right bound of the integration interval [a,t].</param>
            <returns>Interpolated definite integral over the interval [a,t].</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsIntegration"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.EquidistantPolynomialInterpolation.MathNet#Numerics#Interpolation#IInterpolation#SupportsDifferentiation">
            <summary>
            Gets a value indicating whether the algorithm supports differentiation (interpolated derivative).
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Differentiate(System.Double)"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.EquidistantPolynomialInterpolation.MathNet#Numerics#Interpolation#IInterpolation#SupportsIntegration">
            <summary>
            Gets a value indicating whether the algorithm supports integration (interpolated quadrature).
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Integrate(System.Double)"/>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Weibull">
            <summary>
            Implements the Weibull distribution. For details about this distribution, see 
            <a href="http://en.wikipedia.org/wiki/Weibull_distribution">Wikipedia - Weibull distribution</a>.
            </summary>
            <remarks>
            <para>The Weibull distribution is parametrized by a shape and scale parameter.</para>
            <para>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can get/set the random number generator by using the <see cref="P:MathNet.Numerics.Distributions.Weibull.RandomSource"/> property.</para>
            <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to false, all parameter checks can be turned off.</para></remarks>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Weibull._shape">
            <summary>
            Weibull shape parameter.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Weibull._scale">
            <summary>
            Weibull inverse scale parameter.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Weibull._scalePowShapeInv">
            <summary>
            Reusable intermediate result 1 / (<see cref="F:MathNet.Numerics.Distributions.Weibull._scale"/> ^ <see cref="F:MathNet.Numerics.Distributions.Weibull._shape"/>)
            </summary>
            <remarks>
            By caching this parameter we can get slightly better numerics precision
            in certain constellations without any additional computations.
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Weibull._random">
            <summary>
            The distribution's random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Weibull.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Weibull class.
            </summary>
            <param name="shape">The shape of the Weibull distribution.</param>
            <param name="scale">The inverse scale of the Weibull distribution.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Weibull.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Weibull.IsValidParameterSet(System.Double,System.Double)">
            <summary>
            Checks whether the parameters of the distribution are valid. 
            </summary>
            <param name="shape">The shape of the Weibull distribution.</param>
            <param name="scale">The scale of the Weibull distribution.</param>
            <returns>True when the parameters positive valid floating point numbers, false otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Weibull.SetParameters(System.Double,System.Double)">
            <summary>
            Sets the parameters of the distribution after checking their validity.
            </summary>
            <param name="shape">The shape of the Weibull distribution.</param>
            <param name="scale">The inverse scale of the Weibull distribution.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the parameters don't pass the <see cref="M:MathNet.Numerics.Distributions.Weibull.IsValidParameterSet(System.Double,System.Double)"/> function.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Weibull.Density(System.Double)">
            <summary>
            Computes the density of the Weibull distribution.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Weibull.DensityLn(System.Double)">
            <summary>
            Computes the log density of the Weibull distribution.
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Weibull.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution function of the Weibull distribution.
            </summary>
            <param name="x">The location at which to compute the cumulative density.</param>
            <returns>the cumulative density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Weibull.Sample">
            <summary>
            Generates a sample from the Weibull distribution.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Weibull.Samples">
            <summary>
            Generates a sequence of samples from the Weibull distribution.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Weibull.Sample(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sample from the Weibull distribution.
            </summary>
            <param name="rng">The random number generator to use.</param>
            <param name="shape">The shape of the Weibull distribution from which to generate samples.</param>
            <param name="scale">The scale of the Weibull distribution from which to generate samples.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Weibull.Samples(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the Weibull distribution.
            </summary>
            <param name="rng">The random number generator to use.</param>
            <param name="shape">The shape of the Weibull distribution from which to generate samples.</param>
            <param name="scale">The scale of the Weibull distribution from which to generate samples.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Weibull.SampleWeibull(System.Random,System.Double,System.Double)">
            <summary>
            Generates one sample from the Weibull distribution. This method doesn't perform
            any parameter checks.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="shape">The shape of the Weibull distribution.</param>
            <param name="scale">The scale of the Weibull distribution.</param>
            <returns>A sample from a Weibull distributed random variable.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Weibull.Shape">
            <summary>
            Gets or sets the shape of the Weibull distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Weibull.Scale">
            <summary>
            Gets or sets the scale of the Weibull distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Weibull.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Weibull.Mean">
            <summary>
            Gets the mean of the Weibull distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Weibull.Variance">
            <summary>
            Gets the variance of the Weibull distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Weibull.StdDev">
            <summary>
            Gets the standard deviation of the Weibull distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Weibull.Entropy">
            <summary>
            Gets the entropy of the Weibull distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Weibull.Skewness">
            <summary>
            Gets the skewness of the Weibull distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Weibull.Mode">
            <summary>
            Gets the mode of the Weibull distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Weibull.Median">
            <summary>
            Gets the median of the Weibull distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Weibull.Minimum">
            <summary>
            Gets the minimum of the Weibull distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Weibull.Maximum">
            <summary>
            Gets the maximum of the Weibull distribution.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Beta">
            <summary>
            Implements the Beta distribution. For details about this distribution, see 
            <a href="http://en.wikipedia.org/wiki/Beta_distribution">Wikipedia - Beta distribution</a>.
            </summary>
            <remarks>
            <para>There are a few special cases for the parameterization of the Beta distribution. When both
            shape parameters are positive infinity, the Beta distribution degenerates to a point distribution
            at 0.5. When one of the shape parameters is positive infinity, the distribution degenerates to a point
            distribution at the positive infinity. When both shape parameters are 0.0, the Beta distribution 
            degenerates to a Bernoulli distribution with parameter 0.5. When one shape parameter is 0.0, the
            distribution degenerates to a point distribution at the non-zero shape parameter.</para>
            <para>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can get/set the random number generator by using the <see cref="P:MathNet.Numerics.Distributions.Beta.RandomSource"/> property.</para>
            <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to false, all parameter checks can be turned off.</para></remarks>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Beta._shapeA">
            <summary>
            Beta shape parameter a.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Beta._shapeB">
            <summary>
            Beta shape parameter b.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Beta._random">
            <summary>
            The distribution's random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Beta.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Beta class.
            </summary>
            <param name="a">The a shape parameter of the Beta distribution.</param>
            <param name="b">The b shape parameter of the Beta distribution.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If any of the Beta parameters are negative.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Beta.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>A string representation of the Beta distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Beta.IsValidParameterSet(System.Double,System.Double)">
            <summary>
            Checks whether the parameters of the distribution are valid. 
            </summary>
            <param name="a">The a shape parameter of the Beta distribution.</param>
            <param name="b">The b shape parameter of the Beta distribution.</param>
            <returns>True when the parameters are valid, false otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Beta.SetParameters(System.Double,System.Double)">
            <summary>
            Sets the parameters of the distribution after checking their validity.
            </summary>
            <param name="a">The a shape parameter of the Beta distribution.</param>
            <param name="b">The b shape parameter of the Beta distribution.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the parameters don't pass the <see cref="M:MathNet.Numerics.Distributions.Beta.IsValidParameterSet(System.Double,System.Double)"/> function.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Beta.Density(System.Double)">
            <summary>
            Computes the density of the Beta distribution.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Beta.DensityLn(System.Double)">
            <summary>
            Computes the log density of the Beta distribution.
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Beta.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution function of the Beta distribution.
            </summary>
            <param name="x">The location at which to compute the cumulative density.</param>
            <returns>the cumulative density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Beta.Sample">
            <summary>
            Generates a sample from the Beta distribution.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Beta.Samples">
            <summary>
            Generates a sequence of samples from the Beta distribution.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Beta.Sample(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sample from the normal distribution using the <i>Box-Muller</i> algorithm.
            </summary>
            <param name="rng">The random number generator to use.</param>
            <param name="a">The a shape parameter of the Beta distribution.</param>
            <param name="b">The b shape parameter of the Beta distribution.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Beta.Samples(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the normal distribution using the <i>Box-Muller</i> algorithm.
            </summary>
            <param name="rng">The random number generator to use.</param>
            <param name="a">The a shape parameter of the Beta distribution.</param>
            <param name="b">The b shape parameter of the Beta distribution.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Beta.SampleBeta(System.Random,System.Double,System.Double)">
            <summary>
            Samples Beta distributed random variables by sampling two Gamma variables and normalizing.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="a">The A shape parameter.</param>
            <param name="b">The B shape parameter.</param>
            <returns>a random number from the Beta distribution.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Beta.A">
            <summary>
            Gets or sets the A shape parameter of the Beta distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Beta.B">
            <summary>
            Gets or sets the B shape parameter of the Beta distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Beta.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Beta.Mean">
            <summary>
            Gets the mean of the Beta distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Beta.Variance">
            <summary>
            Gets the variance of the Beta distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Beta.StdDev">
            <summary>
            Gets the standard deviation of the Beta distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Beta.Entropy">
            <summary>
            Gets the entropy of the Beta distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Beta.Skewness">
            <summary>
            Gets the skewness of the Beta distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Beta.Mode">
            <summary>
            Gets the mode of the Beta distribution; when there are multiple answers, this routine will return 0.5.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Beta.Median">
            <summary>
            Gets the median of the Beta distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Beta.Minimum">
            <summary>
            Gets the minimum of the Beta distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Beta.Maximum">
            <summary>
            Gets the maximum of the Beta distribution.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider">
            <summary>
            The managed linear algebra provider.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.AddVectorToScaledVector(System.Double[],System.Double,System.Double[])">
            <summary>
            Adds a scaled vector to another: <c>y += alpha*x</c>.
            </summary>
            <param name="y">The vector to update.</param>
            <param name="alpha">The value to scale <paramref name="x"/> by.</param>
            <param name="x">The vector to add to <paramref name="y"/>.</param>
            <remarks>This equivalent to the AXPY BLAS routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.ScaleArray(System.Double,System.Double[])">
            <summary>
            Scales an array. Can be used to scale a vector and a matrix.
            </summary>
            <param name="alpha">The scalar.</param>
            <param name="x">The values to scale.</param>
            <remarks>This is equivalent to the SCAL BLAS routine.</remarks>
        </member>
        <member name="T:MathNet.Numerics.Algorithms.LinearAlgebra.Atlas.AtlasLinearAlgebraProvider">
            <summary>
            The managed linear algebra provider.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Atlas.AtlasLinearAlgebraProvider.AddVectorToScaledVector(System.Double[],System.Double,System.Double[])">
            <summary>
            Adds a scaled vector to another: <c>y += alpha*x</c>.
            </summary>
            <param name="y">The vector to update.</param>
            <param name="alpha">The value to scale <paramref name="x"/> by.</param>
            <param name="x">The vector to add to <paramref name="y"/>.</param>
            <remarks>This equivalent to the AXPY BLAS routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Atlas.AtlasLinearAlgebraProvider.ScaleArray(System.Double,System.Double[])">
            <summary>
            Scales an array. Can be used to scale a vector and a matrix.
            </summary>
            <param name="alpha">The scalar.</param>
            <param name="x">The values to scale.</param>
            <remarks>This is equivalent to the SCAL BLAS routine.</remarks>
        </member>
        <member name="T:MathNet.Numerics.Precision">
            <summary>
            Utilities for working with floating point numbers.
            </summary>
            <remarks>
            <para>
            Useful links:
            <list type="bullet">
            <item>
            http://docs.sun.com/source/806-3568/ncg_goldberg.html#689 - What every computer scientist should know about floating-point arithmetic
            </item>
            <item>
            http://en.wikipedia.org/wiki/Machine_epsilon - Gives the definition of machine epsilon
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.Precision.BinaryBaseNumber">
            <summary>
            The base number for binary values
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Precision.DoublePrecision">
            <summary>
            The number of binary digits used to represent the binary number for a double precision floating
            point value. i.e. there are this many digits used to represent the
            actual number, where in a number as: 0.134556 * 10^5 the digits are 0.134556 and the exponent is 5.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Precision.SinglePrecision">
            <summary>
            The number of binary digits used to represent the binary number for a single precision floating
            point value. i.e. there are this many digits used to represent the
            actual number, where in a number as: 0.134556 * 10^5 the digits are 0.134556 and the exponent is 5.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Precision._doubleMachinePrecision">
            <summary>
            The maximum relative precision of a double
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Precision._singleMachinePrecision">
            <summary>
            The maximum relative precision of a single
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Precision._numberOfDecimalPlacesForDoubles">
            <summary>
            The number of significant figures that a double-precision floating point has.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Precision._numberOfDecimalPlacesForFloats">
            <summary>
            The number of significant figures that a single-precision floating point has.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Precision._defaultDoubleRelativeAccuracy">
            <summary>Value representing 10 * 2^(-52)</summary>
        </member>
        <member name="F:MathNet.Numerics.Precision._defaultSingleRelativeAccuracy">
            <summary>Value representing 10 * 2^(-52)</summary>
        </member>
        <member name="M:MathNet.Numerics.Precision.#cctor">
            <summary>
            Initializes static members of the Precision class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Precision.Magnitude(System.Double)">
            <summary>
            Returns the magnitude of the number.
            </summary>
            <param name="value">The value.</param>
            <returns>The magnitude of the number.</returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.GetMagnitudeScaledValue(System.Double)">
            <summary>
            Returns the number divided by it's magnitude, effectively returning a number between -10 and 10.
            </summary>
            <param name="value">The value.</param>
            <returns>The value of the number.</returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.GetLongFromDouble(System.Double)">
            <summary>
            Gets the equivalent <c>long</c> value for the given <c>double</c> value.
            </summary>
            <param name="value">The <c>double</c> value which should be turned into a <c>long</c> value.</param>
            <returns>
            The resulting <c>long</c> value.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.GetDirectionalLongFromDouble(System.Double)">
            <summary>
            Returns a 'directional' long value. This is a long value which acts the same as a double,
            e.g. a negative double value will return a negative double value starting at 0 and going
            more negative as the double value gets more negative.
            </summary>
            <param name="value">The input double value.</param>
            <returns>A long value which is roughly the equivalent of the double value.</returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.Increment(System.Double)">
            <summary>
            Increments a floating point number to the next bigger number representable by the data type.
            </summary>
            <param name="value">The value which needs to be incremented.</param>
            <remarks>
            The incrementation step length depends on the provided value.
            Increment(double.MaxValue) will return positive infinity.
            </remarks>
            <returns>The next larger floating point value.</returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.Increment(System.Double,System.Int32)">
            <summary>
            Increments a floating point number to the next bigger number representable by the data type.
            </summary>
            <param name="value">The value which needs to be incremented.</param>
            <param name="count">How many times the number should be incremented.</param>
            <remarks>
            The incrementation step length depends on the provided value.
            Increment(double.MaxValue) will return positive infinity.
            </remarks>
            <returns>The next larger floating point value.</returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.Decrement(System.Double)">
            <summary>
            Decrements a floating point number to the next smaller number representable by the data type.
            </summary>
            <param name="value">The value which should be decremented.</param>
            <remarks>
            The decrementation step length depends on the provided value.
            Decrement(double.MinValue) will return negative infinity.
            </remarks>
            <returns>The next smaller floating point value.</returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.Decrement(System.Double,System.Int32)">
            <summary>
            Decrements a floating point number to the next smaller number representable by the data type.
            </summary>
            <param name="value">The value which should be decremented.</param>
            <param name="count">How many times the number should be decremented.</param>
            <remarks>
            The decrementation step length depends on the provided value.
            Decrement(double.MinValue) will return negative infinity.
            </remarks>
            <returns>The next smaller floating point value.</returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.CoerceZero(System.Double,System.Int32)">
            <summary>
            Forces small numbers near zero to zero, according to the specified absolute accuracy.
            </summary>
            <param name="a">The real number to coerce to zero, if it is almost zero.</param>
            <param name="maxNumbersBetween">The maximum count of numbers between the zero and the number <paramref name="a"/>.</param>
            <returns>
                Zero if |<paramref name="a"/>| is fewer than <paramref name="maxNumbersBetween"/> numbers from zero, <paramref name="a"/> otherwise.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.CoerceZero(System.Double,System.Int64)">
            <summary>
            Forces small numbers near zero to zero, according to the specified absolute accuracy.
            </summary>
            <param name="a">The real number to coerce to zero, if it is almost zero.</param>
            <param name="maxNumbersBetween">The maximum count of numbers between the zero and the number <paramref name="a"/>.</param>
            <returns>
                Zero if |<paramref name="a"/>| is fewer than <paramref name="maxNumbersBetween"/> numbers from zero, <paramref name="a"/> otherwise.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="maxNumbersBetween"/> is smaller than zero.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Precision.CoerceZero(System.Double,System.Double)">
            <summary>
            Forces small numbers near zero to zero, according to the specified absolute accuracy.
            </summary>
            <param name="a">The real number to coerce to zero, if it is almost zero.</param>
            <param name="maximumAbsoluteError">The absolute threshold for <paramref name="a"/> to consider it as zero.</param>
            <returns>Zero if |<paramref name="a"/>| is smaller than <paramref name="maximumAbsoluteError"/>, <paramref name="a"/> otherwise.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="maximumAbsoluteError"/> is smaller than zero.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Precision.CoerceZero(System.Double)">
            <summary>
            Forces small numbers near zero to zero.
            </summary>
            <param name="a">The real number to coerce to zero, if it is almost zero.</param>
            <returns>Zero if |<paramref name="a"/>| is smaller than 2^(-53) = 1.11e-16, <paramref name="a"/> otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.RangeOfMatchingFloatingPointNumbers(System.Double,System.Int64,System.Double@,System.Double@)">
            <summary>
            Determines the range of floating point numbers that will match the specified value with the given tolerance.
            </summary>
            <param name="value">The value.</param>
            <param name="maxNumbersBetween">The <c>ulps</c> difference.</param>
            <param name="bottomRangeEnd">The bottom range end.</param>
            <param name="topRangeEnd">The top range end.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="maxNumbersBetween"/> is smaller than zero.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Precision.MaximumMatchingFloatingPointNumber(System.Double,System.Int64)">
            <summary>
            Returns the floating point number that will match the value with the tolerance on the maximum size (i.e. the result is
            always bigger than the value)
            </summary>
            <param name="value">The value.</param>
            <param name="maxNumbersBetween">The <c>ulps</c> difference.</param>
            <returns>The maximum floating point number which is <paramref name="maxNumbersBetween"/> larger than the given <paramref name="value"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.MinimumMatchingFloatingPointNumber(System.Double,System.Int64)">
            <summary>
            Returns the floating point number that will match the value with the tolerance on the minimum size (i.e. the result is
            always smaller than the value)
            </summary>
            <param name="value">The value.</param>
            <param name="maxNumbersBetween">The <c>ulps</c> difference.</param>
            <returns>The minimum floating point number which is <paramref name="maxNumbersBetween"/> smaller than the given <paramref name="value"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.RangeOfMatchingNumbers(System.Double,System.Double,System.Int64@,System.Int64@)">
            <summary>
            Determines the range of <c>ulps</c> that will match the specified value with the given tolerance.
            </summary>
            <param name="value">The value.</param>
            <param name="relativeDifference">The relative difference.</param>
            <param name="bottomRangeEnd">The number of ULPS between the <c>value</c> and the <c>value - relativeDifference</c>.</param>
            <param name="topRangeEnd">The number of ULPS between the <c>value</c> and the <c>value + relativeDifference</c>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="relativeDifference"/> is smaller than zero.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="value"/> is <c>double.PositiveInfinity</c> or <c>double.NegativeInfinity</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="value"/> is <c>double.NaN</c>.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Precision.NumbersBetween(System.Double,System.Double)">
            <summary>
            Evaluates the count of numbers between two double numbers
            </summary>
            <param name="a">The first parameter.</param>
            <param name="b">The second parameter.</param>
            <remarks>The second number is included in the number, thus two equal numbers evaluate to zero and two neighbor numbers evaluate to one. Therefore, what is returned is actually the count of numbers between plus 1.</remarks>
            <returns>The number of floating point values between <paramref name="a"/> and <paramref name="b"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="a"/> is <c>double.PositiveInfinity</c> or <c>double.NegativeInfinity</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="a"/> is <c>double.NaN</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="b"/> is <c>double.PositiveInfinity</c> or <c>double.NegativeInfinity</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="b"/> is <c>double.NaN</c>.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Precision.AlmostEqual(System.Double,System.Double)">
            <summary>
            Checks whether two real numbers are almost equal.
            </summary>
            <param name="a">The first number</param>
            <param name="b">The second number</param>
            <returns>true if the two values differ by no more than 10 * 2^(-52); false otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.AlmostEqual(System.Single,System.Single)">
            <summary>
            Checks whether two real numbers are almost equal.
            </summary>
            <param name="a">The first number</param>
            <param name="b">The second number</param>
            <returns>true if the two values differ by no more than 10 * 2^(-52); false otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.AlmostEqual``1(``0,``0)">
            <summary>
            Checks whether two structures with precision support are almost equal. 
            </summary>
            <typeparam name="T">The type of the structures. Must implement <see cref="T:MathNet.Numerics.IPrecisionSupport`1"/>.</typeparam>
            <param name="a">The first structure</param>
            <param name="b">The second structure</param>
            <returns>true if the two values differ by no more than 10 * 2^(-52); false otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.AlmostEqualWithError(System.Double,System.Double,System.Double)">
            <summary>
            Compares two doubles and determines if they are equal within
            the specified maximum error.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="maximumError">The accuracy required for being almost equal.</param>
            <returns>
            <see langword="true" /> if both doubles are almost equal up to the
            specified maximum error, <see langword="false" /> otherwise.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.AlmostEqualListWithError(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Double)">
            <summary>
            Compares two lists of doubles and determines if they are equal within the
            specified maximum error.
            </summary>
            <param name="a">The first value list.</param>
            <param name="b">The second value list.</param>
            <param name="maximumError">
            The accuracy required for being almost equal.
            </param>
            <returns>
            <see langword="true" /> if both doubles are almost equal up to the specified
            maximum error, <see langword="false" /> otherwise.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.AlmostEqualWithError``1(``0,``0,System.Double)">
            <summary>
            Compares two structure with precision support and determines if they are equal
            within the specified maximum relative error.
            </summary>
            <typeparam name="T">
            The type of the structures. Must implement <see cref="T:MathNet.Numerics.IPrecisionSupport`1"/>.
            </typeparam>
            <param name="a">The first structure.</param>
            <param name="b">The second structure.</param>
            <param name="maximumError">
            The accuracy required for being almost equal.
            </param>
            <returns>
            <see langword="true"/> if both doubles are almost equal up to the specified
            maximum relative error, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.AlmostEqualListWithError``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Double)">
            <summary>
            Compares two lists of structures with precision support and determines if they
            are equal within the specified maximum error.
            </summary>
            <typeparam name="T">
            The type of the structures. Must implement <see cref="T:MathNet.Numerics.IPrecisionSupport`1"/>.
            </typeparam>
            <param name="a">The first structure list.</param>
            <param name="b">The second structure list.</param>
            <param name="maximumError">
            The accuracy required for being almost equal.
            </param>
            <returns>
            <see langword="true"/> if both doubles are almost equal up to the specified
            maximum error, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.AlmostEqualWithError(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Compares two doubles and determines if they are equal within the specified
            maximum error.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="diff">
            The difference of the two values (according to some norm).
            </param>
            <param name="maximumError">
            The accuracy required for being almost equal.
            </param>
            <returns>
            <see langword="true" /> if both doubles are almost equal up to the specified
            maximum error, <see langword="false" /> otherwise.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.AlmostEqualWithAbsoluteError(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Compares two doubles and determines if they are equal within the specified
            maximum absolute error.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="diff">
            The difference of the two values (according to some norm).
            </param>
            <param name="maximumAbsoluteError">
            The absolute accuracy required for being almost equal.
            </param>
            <returns>
            <see langword="true" /> if both doubles are almost equal up to the specified
            maximum absolute error, <see langword="false" /> otherwise.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.AlmostEqualWithRelativeError(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Compares two doubles and determines if they are equal within the specified
            maximum relative error.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="diff">The difference of the two values (according to some norm).
            </param>
            <param name="maximumRelativeError">The relative accuracy required for being
            almost equal.</param>
            <returns>
            <see langword="true" /> if both doubles are almost equal up to the specified
            maximum relative error, <see langword="false" /> otherwise.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.AlmostEqualInDecimalPlaces(System.Double,System.Double,System.Int32)">
            <summary>
            Compares two doubles and determines if they are equal to within the specified number of decimal places or not. If the numbers
            are very close to zero an absolute difference is compared, otherwise the relative difference is compared.
            </summary>
            <remarks>
            <para>
            The values are equal if the difference between the two numbers is smaller than 10^(-numberOfDecimalPlaces). We divide by 
            two so that we have half the range on each side of the numbers, e.g. if <paramref name="decimalPlaces"/> == 2, then 0.01 will equal between 
            0.005 and 0.015, but not 0.02 and not 0.00
            </para>
            </remarks>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="decimalPlaces">The number of decimal places.</param>
            <returns><see langword="true"/> if both doubles are equal to each other within the specified number of decimal places; otherwise <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="decimalPlaces"/> is smaller than zero.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Precision.AlmostEqualInDecimalPlaces(System.Single,System.Single,System.Int32)">
            <summary>
            Compares two floats and determines if they are equal to within the specified number of decimal places or not. If the numbers
            are very close to zero an absolute difference is compared, otherwise the relative difference is compared.
            </summary>
            <remarks>
            <para>
            The values are equal if the difference between the two numbers is smaller than 10^(-numberOfDecimalPlaces). We divide by 
            two so that we have half the range on each side of the numbers, e.g. if <paramref name="decimalPlaces"/> == 2, then 0.01 will equal between 
            0.005 and 0.015, but not 0.02 and not 0.00
            </para>
            </remarks>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="decimalPlaces">The number of decimal places.</param>
            <returns><see langword="true"/> if both doubles are equal to each other within the specified number of decimal places; otherwise <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="decimalPlaces"/> is smaller than zero.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Precision.AlmostEqualWithRelativeDecimalPlaces(System.Double,System.Double,System.Int32)">
            <summary>
            Compares two doubles and determines if they are equal to within the specified number of decimal places or not. 
            </summary>
            <remarks>
            <para>
            The values are equal if the difference between the two numbers is smaller than 10^(-numberOfDecimalPlaces). We divide by 
            two so that we have half the range on each side of the numbers, e.g. if <paramref name="decimalPlaces"/> == 2, then 0.01 will equal between 
            0.005 and 0.015, but not 0.02 and not 0.00
            </para>
            </remarks>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="decimalPlaces">The number of decimal places.</param>
            <returns><see langword="true" /> if both doubles are equal to each other within the specified number of decimal places; otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.AlmostEqualWithAbsoluteDecimalPlaces(System.Double,System.Double,System.Int32)">
            <summary>
            Compares two doubles and determines if they are equal to within the specified number of decimal places or not, using the 
            number of decimal places as an absolute measure.
            </summary>
            <remarks>
            <para>
            The values are equal if the difference between the two numbers is smaller than 10^(-numberOfDecimalPlaces). We divide by 
            two so that we have half the range on each side of the numbers, e.g. if <paramref name="decimalPlaces"/> == 2, then 0.01 will equal between 
            0.005 and 0.015, but not 0.02 and not 0.00
            </para>
            </remarks>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="decimalPlaces">The number of decimal places.</param>
            <returns><see langword="true" /> if both doubles are equal to each other within the specified number of decimal places; otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.AlmostEqual(System.Double,System.Double,System.Int64)">
            <summary>
            Compares two doubles and determines if they are equal to within the tolerance or not. Equality comparison is based on the binary representation.
            </summary>
            <remarks>
            <para>
            Determines the 'number' of floating point numbers between two values (i.e. the number of discrete steps 
            between the two numbers) and then checks if that is within the specified tolerance. So if a tolerance 
            of 1 is passed then the result will be true only if the two numbers have the same binary representation 
            OR if they are two adjacent numbers that only differ by one step.
            </para>
            <para>
            The comparison method used is explained in http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm . The article
            at http://www.extremeoptimization.com/resources/Articles/FPDotNetConceptsAndFormats.aspx explains how to transform the C code to 
            .NET enabled code without using pointers and unsafe code.
            </para>
            </remarks>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="maxNumbersBetween">The maximum number of floating point values between the two values. Must be 1 or larger.</param>
            <returns><see langword="true"/> if both doubles are equal to each other within the specified tolerance; otherwise <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="maxNumbersBetween"/> is smaller than one.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Precision.IsLarger(System.Double,System.Double,System.Int64)">
            <summary>
            Compares two doubles and determines if the <c>first</c> value is larger than the <c>second</c>
            value to within the tolerance or not. Equality comparison is based on the binary representation.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="maxNumbersBetween">The maximum number of floating point values for which the two values are considered equal. Must be 1 or larger.</param>
            <returns><c>true</c> if the first value is larger than the second value; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.IsLargerWithDecimalPlaces(System.Double,System.Double,System.Int32)">
            <summary>
            Compares two doubles and determines if the <c>first</c> value is larger than the <c>second</c>
            value to within the specified number of decimal places or not.
            </summary>
            <remarks>
            <para>
            The values are equal if the difference between the two numbers is smaller than 10^(-numberOfDecimalPlaces). We divide by 
            two so that we have half the range on each side of the numbers, e.g. if <paramref name="decimalPlaces"/> == 2, then 0.01 will equal between 
            0.005 and 0.015, but not 0.02 and not 0.00
            </para>
            </remarks>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="decimalPlaces">The number of decimal places.</param>
            <returns><c>true</c> if the first value is larger than the second value; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.IsSmaller(System.Double,System.Double,System.Int64)">
            <summary>
            Compares two doubles and determines if the <c>first</c> value is smaller than the <c>second</c>
            value to within the tolerance or not. Equality comparison is based on the binary representation.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="maxNumbersBetween">The maximum number of floating point values for which the two values are considered equal. Must be 1 or larger.</param>
            <returns><c>true</c> if the first value is smaller than the second value; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.IsSmallerWithDecimalPlaces(System.Double,System.Double,System.Int32)">
            <summary>
            Compares two doubles and determines if the <c>first</c> value is smaller than the <c>second</c>
            value to within the specified number of decimal places or not.
            </summary>
            <remarks>
            <para>
            The values are equal if the difference between the two numbers is smaller than 10^(-numberOfDecimalPlaces). We divide by 
            two so that we have half the range on each side of th<paramref name="decimalPlaces"/>g. if <paramref name="decimalPlaces"/> == 2, then 0.01 will equal between 
            0.005 and 0.015, but not 0.02 and not 0.00
            </para>
            </remarks>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="decimalPlaces">The number of decimal places.</param>
            <returns><c>true</c> if the first value is smaller than the second value; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.CompareTo(System.Double,System.Double,System.Int64)">
            <summary>
            Compares two doubles and determines which double is bigger.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="maxNumbersBetween">The maximum error in terms of Units in Last Place (<c>ulps</c>), i.e. the maximum number of decimals that may be different. Must be 1 or larger.</param>
            <returns>
            <list type="table">
                <listheader>
                    <term>Return value</term>
                    <description>Meaning</description>
                </listheader>
                <item>
                    <term>-1</term>
                    <description><paramref name="a"/> is smaller than <paramref name="b"/> by more than the <paramref name="maxNumbersBetween"/> tolerance.</description>
                </item>
                <item>
                    <term>0</term>
                    <description><paramref name="a"/> is equal to <paramref name="b"/> within the <paramref name="maxNumbersBetween"/> tolerance.</description>
                </item>
                <item>
                    <term>1</term>
                    <description><paramref name="a"/> is bigger than <paramref name="b"/> by more than the <paramref name="maxNumbersBetween"/> tolerance.</description>
                </item>
            </list>
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.CompareToInDecimalPlaces(System.Double,System.Double,System.Int32)">
            <summary>
            Compares two doubles and determines which double is bigger.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="decimalPlaces">The number of decimal places on which the values must be compared. Must be 1 or larger.</param>
            <returns>
            <list type="table">
                <listheader>
                    <term>Return value</term>
                    <description>Meaning</description>
                </listheader>
                <item>
                    <term>-1</term>
                    <description><paramref name="a"/> is smaller than <paramref name="b"/> by more than a magnitude equal to <paramref name="decimalPlaces"/>.</description>
                </item>
                <item>
                    <term>0</term>
                    <description><paramref name="a"/> is equal to <paramref name="b"/> within a magnitude equal to <paramref name="decimalPlaces"/>.</description>
                </item>
                <item>
                    <term>1</term>
                    <description><paramref name="a"/> is bigger than <paramref name="b"/> by more than a magnitude equal to <paramref name="decimalPlaces"/>.</description>
                </item>
            </list>
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.EpsilonOf(System.Double)">
            <summary>
            Evaluates the minimum distance to the next distinguishable number near the argument value.
            </summary>
            <param name="value">The value used to determine the minimum distance.</param>
            <returns>
            Relative Epsilon (positive double or NaN).
            </returns>
            <remarks>Evaluates the <b>negative</b> epsilon. The more common positive epsilon is equal to two times this negative epsilon.</remarks>
            <seealso cref="M:MathNet.Numerics.Precision.PositiveEpsilonOf(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Precision.PositiveEpsilonOf(System.Double)">
            <summary>
            Evaluates the minimum distance to the next distinguishable number near the argument value.
            </summary>
            <param name="value">The value used to determine the minimum distance.</param>
            <returns>Relative Epsilon (positive double or NaN)</returns>
            <remarks>Evaluates the <b>positive</b> epsilon. See also <see cref="M:MathNet.Numerics.Precision.EpsilonOf(System.Double)"/></remarks>
            <seealso cref="M:MathNet.Numerics.Precision.EpsilonOf(System.Double)"/>
        </member>
        <member name="P:MathNet.Numerics.Precision.DoubleMachinePrecision">
            <summary>
            Gets the maximum relative precision of a double.
            </summary>
            <value>The maximum relative precision of a double.</value>
        </member>
        <member name="P:MathNet.Numerics.Precision.SingleMachinePrecision">
            <summary>
            Gets the maximum relative precision of a single.
            </summary>
            <value>The maximum relative precision of a single.</value>
        </member>
        <member name="P:MathNet.Numerics.Precision.NumberOfDecimalPlacesForFloats">
            <summary>
            Gets the number of decimal places for floats.
            </summary>
            <value>The number of decimal places for floats.</value>
        </member>
        <member name="P:MathNet.Numerics.Precision.NumberOfDecimalPlacesForDoubles">
            <summary>
            Gets the number of decimal places for doubles.
            </summary>
            <value>The number of decimal places for doubles.</value>
        </member>
        <member name="T:MathNet.Numerics.NumberTheory.IntegerTheory">
            <summary>
            Number theory utility functions for integers.
            </summary>
            <summary>
            Number theory utility functions for integers.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.NumberTheory.IntegerTheory.IsEven(System.Int32)">
            <summary>
            Find out whether the provided 32 bit integer is an even number.
            </summary>
            <param name="number">The number to very whether it's even.</param>
            <returns>True if and only if it is an even number.</returns>
        </member>
        <member name="M:MathNet.Numerics.NumberTheory.IntegerTheory.IsEven(System.Int64)">
            <summary>
            Find out whether the provided 64 bit integer is an even number.
            </summary>
            <param name="number">The number to very whether it's even.</param>
            <returns>True if and only if it is an even number.</returns>
        </member>
        <member name="M:MathNet.Numerics.NumberTheory.IntegerTheory.IsOdd(System.Int32)">
            <summary>
            Find out whether the provided 32 bit integer is an odd number.
            </summary>
            <param name="number">The number to very whether it's odd.</param>
            <returns>True if and only if it is an odd number.</returns>
        </member>
        <member name="M:MathNet.Numerics.NumberTheory.IntegerTheory.IsOdd(System.Int64)">
            <summary>
            Find out whether the provided 64 bit integer is an odd number.
            </summary>
            <param name="number">The number to very whether it's odd.</param>
            <returns>True if and only if it is an odd number.</returns>
        </member>
        <member name="M:MathNet.Numerics.NumberTheory.IntegerTheory.IsPowerOfTwo(System.Int32)">
            <summary>
            Find out whether the provided 32 bit integer is a perfect power of two.
            </summary>
            <param name="number">The number to very whether it's a power of two.</param>
            <returns>True if and only if it is a power of two.</returns>
        </member>
        <member name="M:MathNet.Numerics.NumberTheory.IntegerTheory.IsPowerOfTwo(System.Int64)">
            <summary>
            Find out whether the provided 64 bit integer is a perfect power of two.
            </summary>
            <param name="number">The number to very whether it's a power of two.</param>
            <returns>True if and only if it is a power of two.</returns>
        </member>
        <member name="M:MathNet.Numerics.NumberTheory.IntegerTheory.CeilingToPowerOfTwo(System.Int32)">
            <summary>
            Find the closest perfect power of two that is larger or equal to the provided
            32 bit integer.
            </summary>
            <param name="number">The number of which to find the closest upper power of two.</param>
            <returns>A power of two.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:MathNet.Numerics.NumberTheory.IntegerTheory.CeilingToPowerOfTwo(System.Int64)">
            <summary>
            Find the closest perfect power of two that is larger or equal to the provided
            64 bit integer.
            </summary>
            <param name="number">The number of which to find the closest upper power of two.</param>
            <returns>A power of two.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:MathNet.Numerics.NumberTheory.IntegerTheory.PowerOfTwo(System.Int32)">
            <summary>
            Raises 2 to the provided integer exponent (0 &lt;= exponent &lt; 31).
            </summary>
            <param name="exponent">The exponent to raise 2 up to.</param>
            <returns>2 ^ exponent.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:MathNet.Numerics.NumberTheory.IntegerTheory.PowerOfTwo(System.Int64)">
            <summary>
            Raises 2 to the provided integer exponent (0 &lt;= exponent &lt; 63).
            </summary>
            <param name="exponent">The exponent to raise 2 up to.</param>
            <returns>2 ^ exponent.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:MathNet.Numerics.NumberTheory.IntegerTheory.IsPerfectSquare(System.Int32)">
            <summary>
            Find out whether the provided 32 bit integer is a perfect square, i.e. a square of an integer.
            </summary>
            <param name="number">The number to very whether it's a perfect square.</param>
            <returns>True if and only if it is a perfect square.</returns>
        </member>
        <member name="M:MathNet.Numerics.NumberTheory.IntegerTheory.IsPerfectSquare(System.Int64)">
            <summary>
            Find out whether the provided 64 bit integer is a perfect square, i.e. a square of an integer.
            </summary>
            <param name="number">The number to very whether it's a perfect square.</param>
            <returns>True if and only if it is a perfect square.</returns>
        </member>
        <member name="M:MathNet.Numerics.NumberTheory.IntegerTheory.GreatestCommonDivisor(System.Int64,System.Int64)">
            <summary>
            Returns the greatest common divisor (<c>gcd</c>) of two integers using Euclid's algorithm.
            </summary>
            <param name="a">First Integer: a.</param>
            <param name="b">Second Integer: b.</param>
            <returns>Greatest common divisor <c>gcd</c>(a,b)</returns>
        </member>
        <member name="M:MathNet.Numerics.NumberTheory.IntegerTheory.GreatestCommonDivisor(System.Collections.Generic.IList{System.Int64})">
            <summary>
            Returns the greatest common divisor (<c>gcd</c>) of a set of integers using Euclid's
            algorithm.
            </summary>
            <param name="integers">List of Integers.</param>
            <returns>Greatest common divisor <c>gcd</c>(list of integers)</returns>
        </member>
        <member name="M:MathNet.Numerics.NumberTheory.IntegerTheory.GreatestCommonDivisor(System.Int64[])">
            <summary>
            Returns the greatest common divisor (<c>gcd</c>) of a set of integers using Euclid's algorithm.
            </summary>
            <param name="integers">List of Integers.</param>
            <returns>Greatest common divisor <c>gcd</c>(list of integers)</returns>
        </member>
        <member name="M:MathNet.Numerics.NumberTheory.IntegerTheory.ExtendedGreatestCommonDivisor(System.Int64,System.Int64,System.Int64@,System.Int64@)">
            <summary>
            Computes the extended greatest common divisor, such that a*x + b*y = <c>gcd</c>(a,b).
            </summary>
            <param name="a">First Integer: a.</param>
            <param name="b">Second Integer: b.</param>
            <param name="x">Resulting x, such that a*x + b*y = <c>gcd</c>(a,b).</param>
            <param name="y">Resulting y, such that a*x + b*y = <c>gcd</c>(a,b)</param>
            <returns>Greatest common divisor <c>gcd</c>(a,b)</returns>
            <example>
            <code>
            long x,y,d;
            d = Fn.GreatestCommonDivisor(45,18,out x, out y);
            -> d == 9 &amp;&amp; x == 1 &amp;&amp; y == -2
            </code>
            The <c>gcd</c> of 45 and 18 is 9: 18 = 2*9, 45 = 5*9. 9 = 1*45 -2*18, therefore x=1 and y=-2.
            </example>
        </member>
        <member name="M:MathNet.Numerics.NumberTheory.IntegerTheory.LeastCommonMultiple(System.Int64,System.Int64)">
            <summary>
            Returns the least common multiple (<c>lcm</c>) of two integers using Euclid's algorithm.
            </summary>
            <param name="a">First Integer: a.</param>
            <param name="b">Second Integer: b.</param>
            <returns>Least common multiple <c>lcm</c>(a,b)</returns>
        </member>
        <member name="M:MathNet.Numerics.NumberTheory.IntegerTheory.LeastCommonMultiple(System.Collections.Generic.IList{System.Int64})">
            <summary>
            Returns the least common multiple (<c>lcm</c>) of a set of integers using Euclid's algorithm.
            </summary>
            <param name="integers">List of Integers.</param>
            <returns>Least common multiple <c>lcm</c>(list of integers)</returns>
        </member>
        <member name="M:MathNet.Numerics.NumberTheory.IntegerTheory.LeastCommonMultiple(System.Int64[])">
            <summary>
            Returns the least common multiple (<c>lcm</c>) of a set of integers using Euclid's algorithm.
            </summary>
            <param name="integers">List of Integers.</param>
            <returns>Least common multiple <c>lcm</c>(list of integers)</returns>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation">
            <summary>
            Third-Degree Spline Interpolation Algorithm.
            </summary>
            <remarks>
            This algorithm supports both differentiation and integration.
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation._points">
            <summary>
            Sample Points t.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation._coefficients">
            <summary>
            Spline Coefficients c(t).
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation._sampleCount">
            <summary>
            Number of samples.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation.#ctor">
            <summary>
            Initializes a new instance of the SplineInterpolation class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation.#ctor(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initializes a new instance of the SplineInterpolation class.
            </summary>
            <param name="samplePoints">Sample Points t (length: N), sorted ascending.</param>
            <param name="splineCoefficients">Spline Coefficients (length: 4*(N-1)).</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation.Initialize(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initialize the interpolation method with the given spline coefficients (sorted by the sample points t).
            </summary>
            <param name="samplePoints">Sample Points t (length: N), sorted ascending.</param>
            <param name="splineCoefficients">Spline Coefficients (length: 4*(N-1)).</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation.Differentiate(System.Double)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated first derivative at point t.</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsDifferentiation"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation.Differentiate(System.Double,System.Double@,System.Double@)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <param name="interpolatedValue">Interpolated value x(t)</param>
            <param name="secondDerivative">Interpolated second derivative at point t.</param>
            <returns>Interpolated first derivative at point t.</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsDifferentiation"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation.Differentiate(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation.Integrate(System.Double)">
            <summary>
            Integrate up to point t.
            </summary>
            <param name="t">Right bound of the integration interval [a,t].</param>
            <returns>Interpolated definite integral over the interval [a,t].</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsIntegration"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation.IndexOfClosestPointLeftOf(System.Double)">
            <summary>
            Find the index of the greatest sample point smaller than t.
            </summary>
            <param name="t">The value to look for.</param>
            <returns>The sample point index.</returns>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation.MathNet#Numerics#Interpolation#IInterpolation#SupportsDifferentiation">
            <summary>
            Gets a value indicating whether the algorithm supports differentiation (interpolated derivative).
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation.Differentiate(System.Double)"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation.MathNet#Numerics#Interpolation#IInterpolation#SupportsIntegration">
            <summary>
            Gets a value indicating whether the algorithm supports integration (interpolated quadrature).
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation.Integrate(System.Double)"/>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.Algorithms.NevillePolynomialInterpolation">
            <summary>
            Lagrange Polynomial Interpolation using Neville's Algorithm.
            </summary>
            <remarks>
            <para>
            This algorithm supports differentiation, but doesn't support integration.
            </para>
            <para>
            When working with equidistant or Chebyshev sample points it is
            recommended to use the barycentric algorithms specialized for
            these cases instead of this arbitrary Neville algorithm.
            </para>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.Algorithms.NevillePolynomialInterpolation._points">
            <summary>
            Sample Points t.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.Algorithms.NevillePolynomialInterpolation._values">
            <summary>
            Spline Values x(t).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.NevillePolynomialInterpolation.#ctor">
            <summary>
            Initializes a new instance of the NevillePolynomialInterpolation class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.NevillePolynomialInterpolation.#ctor(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initializes a new instance of the NevillePolynomialInterpolation class.
            </summary>
            <param name="samplePoints">Sample Points t</param>
            <param name="sampleValues">Sample Values x(t)</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.NevillePolynomialInterpolation.Initialize(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initialize the interpolation method with the given sample pairs.
            </summary>
            <param name="samplePoints">Sample Points t</param>
            <param name="sampleValues">Sample Values x(t)</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.NevillePolynomialInterpolation.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.NevillePolynomialInterpolation.Differentiate(System.Double)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated first derivative at point t.</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsDifferentiation"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.NevillePolynomialInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.NevillePolynomialInterpolation.Differentiate(System.Double,System.Double@,System.Double@)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <param name="interpolatedValue">Interpolated value x(t)</param>
            <param name="secondDerivative">Interpolated second derivative at point t.</param>
            <returns>Interpolated first derivative at point t.</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsDifferentiation"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.NevillePolynomialInterpolation.Differentiate(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.NevillePolynomialInterpolation.MathNet#Numerics#Interpolation#IInterpolation#Integrate(System.Double)">
            <summary>
            Integrate up to point t.
            </summary>
            <param name="t">Right bound of the integration interval [a,t].</param>
            <returns>Interpolated definite integral over the interval [a,t].</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsIntegration"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.NevillePolynomialInterpolation.MathNet#Numerics#Interpolation#IInterpolation#SupportsDifferentiation">
            <summary>
            Gets a value indicating whether the algorithm supports differentiation (interpolated derivative).
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.NevillePolynomialInterpolation.Differentiate(System.Double)"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.NevillePolynomialInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.NevillePolynomialInterpolation.MathNet#Numerics#Interpolation#IInterpolation#SupportsIntegration">
            <summary>
            Gets a value indicating whether the algorithm supports integration (interpolated quadrature).
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Integrate(System.Double)"/>
        </member>
        <member name="T:MathNet.Numerics.Distributions.ContinuousUniform">
            <summary>
            The continuous uniform distribution is a distribution over real numbers. For details about this distribution, see 
            <a href="http://en.wikipedia.org/wiki/Uniform_distribution_%28continuous%29">Wikipedia - Continuous uniform distribution</a>.
            </summary>
            <remarks><para>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can get/set the random number generator by using the <see cref="P:MathNet.Numerics.Distributions.ContinuousUniform.RandomSource"/> property.</para>
            <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to false, all parameter checks can be turned off.</para></remarks>
        </member>
        <member name="F:MathNet.Numerics.Distributions.ContinuousUniform._lower">
            <summary>
            The distribution's lower bound.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.ContinuousUniform._upper">
            <summary>
            The distribution's upper bound.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.ContinuousUniform._random">
            <summary>
            The distribution's random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.#ctor">
            <summary>
            Initializes a new instance of the ContinuousUniform class with lower bound 0 and upper bound 1.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the ContinuousUniform class with given lower and upper bounds.
            </summary>
            <param name="lower">Lower bound.</param>
            <param name="upper">Upper bound; must be at least as large as <paramref name="lower"/>.</param>
            <exception cref="T:System.ArgumentException">If the upper bound is smaller than the lower bound.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.IsValidParameterSet(System.Double,System.Double)">
            <summary>
            Checks whether the parameters of the distribution are valid. 
            </summary>
            <param name="lower">Lower bound.</param>
            <param name="upper">Upper bound; must be at least as large as <paramref name="lower"/>.</param>
            <returns>True when the parameters are valid, false otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.SetParameters(System.Double,System.Double)">
            <summary>
            Sets the parameters of the distribution after checking their validity.
            </summary>
            <param name="lower">Lower bound.</param>
            <param name="upper">Upper bound; must be at least as large as <paramref name="lower"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the parameters don't pass the <see cref="M:MathNet.Numerics.Distributions.ContinuousUniform.IsValidParameterSet(System.Double,System.Double)"/> function.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.Density(System.Double)">
            <summary>
            Computes the density of the distribution.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.DensityLn(System.Double)">
            <summary>
            Computes the log density of the distribution.
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution function of the distribution.
            </summary>
            <param name="x">The location at which to compute the cumulative density.</param>
            <returns>the cumulative density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.Sample">
            <summary>
            Generates a sample from the ContinuousUniform distribution.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.Samples">
            <summary>
            Generates a sequence of samples from the ContinuousUniform distribution.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.Sample(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sample from the ContinuousUniform distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="lower">The lower bound of the uniform random variable.</param>
            <param name="upper">The upper bound of the uniform random variable.</param>
            <returns>a uniformly distributed sample.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.Samples(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the ContinuousUniform distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="lower">The lower bound of the uniform random variable.</param>
            <param name="upper">The upper bound of the uniform random variable.</param>
            <returns>a sequence of uniformly distributed samples.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.DoSample(System.Random,System.Double,System.Double)">
            <summary>
            Generates one sample from the ContinuousUniform distribution without parameter checking.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="lower">The lower bound of the uniform random variable.</param>
            <param name="upper">The upper bound of the uniform random variable.</param>
            <returns>a uniformly distributed random number.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousUniform.Lower">
            <summary>
            Gets or sets the lower bound of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousUniform.Upper">
            <summary>
            Gets or sets the upper bound of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousUniform.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousUniform.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousUniform.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousUniform.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousUniform.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousUniform.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousUniform.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousUniform.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousUniform.Minimum">
            <summary>
            Gets the minimum of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousUniform.Maximum">
            <summary>
            Gets the maximum of the distribution.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Algorithms.LinearAlgebra.Transpose">
            <summary>
            How to transpose a matrix.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Algorithms.LinearAlgebra.Transpose.DontTranspose">
            <summary>
            Don't transpose a matrix.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Algorithms.LinearAlgebra.Transpose.Transpose">
            <summary>
            Transpose a matrix.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Algorithms.LinearAlgebra.Transpose.ConjugateTranspose">
            <summary>
            Conjugate transpose a complex matrix.
            </summary>
            <remarks>If a conjugate transpose is used with a real matrix, then the matrix is just transposed.</remarks>
        </member>
        <member name="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm">
            <summary>
            Types of matrix norms.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Algorithms.LinearAlgebra.Norm.OneNorm">
            <summary>
            The 1-norm.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Algorithms.LinearAlgebra.Norm.FrobeniusNorm">
            <summary>
            The Frobenius norm.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Algorithms.LinearAlgebra.Norm.InfinityNorm">
            <summary>
            The infinity norm.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Algorithms.LinearAlgebra.Norm.LargestAbsoluteValue">
            <summary>
            The largest absolute value norm.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Random.Mrg32k3a">
             <summary>
             A 32-bit combined multiple recursive generator with 2 components of order 3.
             </summary>
            <remarks>Based off of P. L'Ecuyer, "Combined Multiple Recursive Random Number Generators," Operations Research, 44, 5 (1996), 816--822. </remarks>
        </member>
        <member name="M:MathNet.Numerics.Random.Mrg32k3a.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.Mcg31m1"/> class using
            the current time as the seed.
            </summary>
            <remarks>If the seed value is zero, it is set to one. Uses the
            value of <see cref="P:MathNet.Numerics.Control.ThreadSafeRandomNumberGenerators"/> to
            set whether the instance is thread safe.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Random.Mrg32k3a.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.Mcg31m1"/> class using
            the current time as the seed.
            </summary>
            <param name="threadSafe">if set to <c>true</c> , the class is thread safe.</param>
        </member>
        <member name="M:MathNet.Numerics.Random.Mrg32k3a.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.Mrg32k3a"/> class.
            </summary>
            <param name="seed">The seed value.</param>
            <remarks>If the seed value is zero, it is set to one. Uses the
            value of <see cref="P:MathNet.Numerics.Control.ThreadSafeRandomNumberGenerators"/> to
            set whether the instance is thread safe.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Random.Mrg32k3a.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.Mrg32k3a"/> class.
            </summary>
            <param name="seed">The seed value.</param>
            <param name="threadSafe">if set to <c>true</c>, the class is thread safe.</param>
        </member>
        <member name="M:MathNet.Numerics.Random.Mrg32k3a.DoSample">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0.
            </returns>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation">
            <summary>
            Akima Spline Interpolation Algorithm.
            </summary>
            <remarks>
            This algorithm supports both differentiation and integration.
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation._spline">
            <summary>
            Internal Spline Interpolation
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation.#ctor">
            <summary>
            Initializes a new instance of the AkimaSplineInterpolation class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation.#ctor(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initializes a new instance of the AkimaSplineInterpolation class.
            </summary>
            <param name="samplePoints">Sample Points t, sorted ascending.</param>
            <param name="sampleValues">Sample Values x(t)</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation.Initialize(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initialize the interpolation method with the given spline coefficients (sorted by the sample points t).
            </summary>
            <param name="samplePoints">Sample Points t, sorted ascending.</param>
            <param name="sampleValues">Sample Values x(t)</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation.EvaluateSplineDerivatives(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Evaluate the spline derivatives as used
            internally by this interpolation algorithm.
            </summary>
            <param name="samplePoints">Sample Points t, sorted ascending.</param>
            <param name="sampleValues">Sample Values x(t)</param>
            <returns>Spline Derivative Vector</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation.EvaluateSplineCoefficients(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Evaluate the spline coefficients as used
            internally by this interpolation algorithm.
            </summary>
            <param name="samplePoints">Sample Points t, sorted ascending.</param>
            <param name="sampleValues">Sample Values x(t)</param>
            <returns>Spline Coefficient Vector</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation.DifferentiateThreePoint(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Three-Point Differentiation Helper.
            </summary>
            <param name="samplePoints">Sample Points t.</param>
            <param name="sampleValues">Sample Values x(t).</param>
            <param name="indexT">Index of the point of the differentiation.</param>
            <param name="index0">Index of the first sample.</param>
            <param name="index1">Index of the second sample.</param>
            <param name="index2">Index of the third sample.</param>
            <returns>The derivative approximation.</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation.Differentiate(System.Double)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated first derivative at point t.</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsDifferentiation"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation.Differentiate(System.Double,System.Double@,System.Double@)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <param name="interpolatedValue">Interpolated value x(t)</param>
            <param name="secondDerivative">Interpolated second derivative at point t.</param>
            <returns>Interpolated first derivative at point t.</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsDifferentiation"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation.Differentiate(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation.Integrate(System.Double)">
            <summary>
            Integrate up to point t.
            </summary>
            <param name="t">Right bound of the integration interval [a,t].</param>
            <returns>Interpolated definite integral over the interval [a,t].</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsIntegration"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation.MathNet#Numerics#Interpolation#IInterpolation#SupportsDifferentiation">
            <summary>
            Gets a value indicating whether the algorithm supports differentiation (interpolated derivative).
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation.Differentiate(System.Double)"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation.MathNet#Numerics#Interpolation#IInterpolation#SupportsIntegration">
            <summary>
            Gets a value indicating whether the algorithm supports integration (interpolated quadrature).
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation.Integrate(System.Double)"/>
        </member>
        <member name="T:MathNet.Numerics.IntegralTransforms.HartleyOptions">
            <summary>
            Hartley Transform Convention
            </summary>
        </member>
        <member name="F:MathNet.Numerics.IntegralTransforms.HartleyOptions.AsymmetricScaling">
            <summary>
            Only scale by 1/N in the inverse direction; No scaling in forward direction.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.IntegralTransforms.HartleyOptions.NoScaling">
            <summary>
            Don't scale at all (neither on forward nor on inverse transformation).
            </summary>
        </member>
        <member name="F:MathNet.Numerics.IntegralTransforms.HartleyOptions.Default">
            <summary>
            Universal; Symmetric scaling.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.LogNormal">
            <summary>
            Implements the univariate Log-Normal distribution. For details about this distribution, see 
            <a href="http://en.wikipedia.org/wiki/Log-normal_distribution">Wikipedia - Log-Normal distribution</a>.
            </summary>
            <remarks><para>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can get/set the random number generator by using the <see cref="P:MathNet.Numerics.Distributions.LogNormal.RandomSource"/> property.</para>
            <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to false, all parameter checks can be turned off.</para></remarks>
        </member>
        <member name="F:MathNet.Numerics.Distributions.LogNormal._mu">
            <summary>
            Keeps track of the mu of the logarithm of the log-log-normal distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.LogNormal._sigma">
            <summary>
            Keeps track of the standard deviation of the logarithm of the log-log-normal distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.LogNormal._random">
            <summary>
            The distribution's random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LogNormal.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Log-Normal class. The distribution will
            be initialized with the default <seealso cref="T:System.Random"/> random number generator.
            </summary>
            <param name="mu">The mu of the logarithm of the distribution.</param>
            <param name="sigma">The standard deviation of the logarithm of the distribution.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LogNormal.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LogNormal.IsValidParameterSet(System.Double,System.Double)">
            <summary>
            Checks whether the parameters of the distribution are valid. 
            </summary>
            <param name="mu">The mu of the logarithm of the distribution.</param>
            <param name="sigma">The standard deviation of the logarithm of the distribution.</param>
            <returns>True when the parameters are valid, false otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LogNormal.SetParameters(System.Double,System.Double)">
            <summary>
            Sets the parameters of the distribution after checking their validity.
            </summary>
            <param name="mu">The mu of the logarithm of the distribution.</param>
            <param name="sigma">The standard deviation of the logarithm of the distribution.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the parameters don't pass the <see cref="M:MathNet.Numerics.Distributions.LogNormal.IsValidParameterSet(System.Double,System.Double)"/> function.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LogNormal.Density(System.Double)">
            <summary>
            Computes the density of the log-normal distribution.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LogNormal.DensityLn(System.Double)">
            <summary>
            Computes the log density of the log-normal distribution.
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LogNormal.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution function of the log-normal distribution.
            </summary>
            <param name="x">The location at which to compute the cumulative density.</param>
            <returns>the cumulative density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LogNormal.Sample">
            <summary>
            Generates a sample from the log-normal distribution using the <i>Box-Muller</i> algorithm.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LogNormal.Samples">
            <summary>
            Generates a sequence of samples from the log-normal distribution using the <i>Box-Muller</i> algorithm.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LogNormal.Sample(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sample from the log-normal distribution using the <i>Box-Muller</i> algorithm.
            </summary>
            <param name="rng">The random number generator to use.</param>
            <param name="mu">The mu of the logarithm of the distribution.</param>
            <param name="sigma">The standard deviation of the logarithm of the distribution.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LogNormal.Samples(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the log-normal distribution using the <i>Box-Muller</i> algorithm.
            </summary>
            <param name="rng">The random number generator to use.</param>
            <param name="mu">The mu of the logarithm of the distribution.</param>
            <param name="sigma">The standard deviation of the logarithm of the distribution.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LogNormal.Mu">
            <summary>
            Gets or sets the mean of the logarithm of the log-normal.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LogNormal.Sigma">
            <summary>
            Gets or sets the standard deviation of the logarithm of the log-normal.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LogNormal.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LogNormal.Mean">
            <summary>
            Gets the mu of the log-normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LogNormal.Variance">
            <summary>
            Gets the variance of the log-normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LogNormal.StdDev">
            <summary>
            Gets the standard deviation of the log-normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LogNormal.Entropy">
            <summary>
            Gets the entropy of the log-normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LogNormal.Skewness">
            <summary>
            Gets the skewness of the log-normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LogNormal.Mode">
            <summary>
            Gets the mode of the log-normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LogNormal.Median">
            <summary>
            Gets the median of the log-normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LogNormal.Minimum">
            <summary>
            Gets the minimum of the log-normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LogNormal.Maximum">
            <summary>
            Gets the maximum of the log-normal distribution.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Trig">
            <summary>
            Double-precision trigonometry toolkit.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Trig.DegreeToGradConstant">
            <summary>
            Constant to convert a degree to grad.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Cosecant(System.Double)">
            <summary>
            Trigonometric Cosecant of an angle in radian.
            </summary>
            <param name="radian">
            The angle in radian.
            </param>
            <returns>
            Cosecant of an angle in radian.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.Cosecant(MathNet.Numerics.Complex)">
            <summary>
            Trigonometric Cosecant of a <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The cosecant of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.Cosine(System.Double)">
            <summary>
            Trigonometric Cosine of an angle in radian.
            </summary>
            <param name="radian">
            The angle in radian.
            </param>
            <returns>
            The cosine of an angle in radian.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.Cosine(MathNet.Numerics.Complex)">
            <summary>
            Trigonometric Cosine of a <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The cosine of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.Cotangent(System.Double)">
            <summary>
            Trigonometric Cotangent of an angle in radian.
            </summary>
            <param name="radian">
            The angle in radian.
            </param>
            <returns>
            The cotangent of an angle in radian.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.Cotangent(MathNet.Numerics.Complex)">
            <summary>
            Trigonometric Cotangent of a <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The cotangent of the complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.DegreeToGrad(System.Double)">
            <summary>
            Converts a degree (360-periodic) angle to a grad (400-periodic) angle.
            </summary>
            <param name="degree">
            The degree to convert.
            </param>
            <returns>
            The converted grad angle.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.DegreeToRadian(System.Double)">
            <summary>
            Converts a degree (360-periodic) angle to a radian (2*Pi-periodic) angle.
            </summary>
            <param name="degree">
            The degree to convert.
            </param>
            <returns>
            The converted radian angle.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.GradToDegree(System.Double)">
            <summary>
            Converts a grad (400-periodic) angle to a degree (360-periodic) angle.
            </summary>
            <param name="grad">
            The grad to convert.
            </param>
            <returns>
            The converted degree.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.GradToRadian(System.Double)">
            <summary>
            Converts a grad (400-periodic) angle to a radian (2*Pi-periodic) angle.
            </summary>
            <param name="grad">
            The grad to convert.
            </param>
            <returns>
            The converted radian.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.HyperbolicCosecant(System.Double)">
            <summary>
            Trigonometric Hyperbolic Cosecant 
            </summary>
            <param name="radian">
            The angle in radian.
            </param>
            <returns>
            The hyperbolic cosecant of the radian angle.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.HyperbolicCosecant(MathNet.Numerics.Complex)">
            <summary>
            Trigonometric Hyperbolic Cosecant of a <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The hyperbolic cosecant of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.HyperbolicCosine(System.Double)">
            <summary>
            Trigonometric Hyperbolic Cosine
            </summary>
            <param name="radian">
            The angle in radian.
            </param>
            <returns>
            The hyperbolic Cosine of the radian angle.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.HyperbolicCosine(MathNet.Numerics.Complex)">
            <summary>
            Trigonometric Hyperbolic Cosine of a <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The hyperbolic cosine of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.HyperbolicCotangent(System.Double)">
            <summary>
            Trigonometric Hyperbolic Cotangent 
            </summary>
            <param name="radian">
            The angle in radian angle.
            </param>
            <returns>
            The hyperbolic cotangent of the radian angle.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.HyperbolicCotangent(MathNet.Numerics.Complex)">
            <summary>
            Trigonometric Hyperbolic Cotangent of a <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The hyperbolic cotangent of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.HyperbolicSecant(System.Double)">
            <summary>
            Trigonometric Hyperbolic Secant
            </summary>
            <param name="radian">
            The angle in radian angle.
            </param>
            <returns>
            The hyperbolic secant of the radian angle. 
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.HyperbolicSecant(MathNet.Numerics.Complex)">
            <summary>
            Trigonometric Hyperbolic Secant of a <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The hyperbolic secant of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.HyperbolicSine(System.Double)">
            <summary>
            Trigonometric Hyperbolic Sine
            </summary>
            <param name="radian">
            The angle in radian angle.
            </param>
            <returns>
            The hyperbolic sine of the radian angle.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.HyperbolicSine(MathNet.Numerics.Complex)">
            <summary>
            Trigonometric Hyperbolic Sine of a <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The hyperbolic sine of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.HyperbolicTangent(System.Double)">
            <summary>
            Trigonometric Hyperbolic Tangent in radian
            </summary>
            <param name="radian">
            The angle in radian angle.
            </param>
            <returns>
            The hyperbolic tangent of the radian angle.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.HyperbolicTangent(MathNet.Numerics.Complex)">
            <summary>
            Trigonometric Hyperbolic Tangent of a <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The hyperbolic tangent of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseCosecant(System.Double)">
            <summary>
            Trigonometric Arc Cosecant in radian
            </summary>
            <param name="radian">
            The angle in radian angle.
            </param>
            <returns>
            The inverse cosecant of the radian angle.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if -1 &lt; <paramref name="radian"/> &lt; 1.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseCosecant(MathNet.Numerics.Complex)">
            <summary>
            Trigonometric Arc Cosecant of this <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The arc cosecant of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseCosine(System.Double)">
            <summary>
            Trigonometric Arc Cosine in radian
            </summary>
            <param name="radian">
            The angle in radian angle.
            </param>
            <returns>
            The inverse cosine of the radian angle.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if 1 &lt; <paramref name="radian"/>  or  <paramref name="radian"/> &lt; -1.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseCosine(MathNet.Numerics.Complex)">
            <summary>
            Trigonometric Arc Cosine of this <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The arc cosine of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseCotangent(System.Double)">
            <summary>
            Trigonometric Arc Cotangent in radian
            </summary>
            <param name="radian">
            The angle in radian angle.
            </param>
            <returns>
            The inverse cotangent of the radian angle.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseCotangent(MathNet.Numerics.Complex)">
            <summary>
            Trigonometric Arc Cotangent of this <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The arc cotangent of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseHyperbolicCosecant(System.Double)">
            <summary>
            Trigonometric Hyperbolic Arc Cosecant 
            </summary>
            <param name="radian">
            The angle in radian angle.
            </param>
            <returns>
            The inverse hyperbolic cosecant of the radian angle.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseHyperbolicCosecant(MathNet.Numerics.Complex)">
            <summary>
            Trigonometric Hyperbolic Arc Cosecant of this <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The hyperbolic arc cosecant of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseHyperbolicCosine(System.Double)">
            <summary>
            Trigonometric Hyperbolic Area Cosine 
            </summary>
            <param name="radian">
            The angle in radian angle.
            </param>
            <returns>
            The inverse hyperbolic cosine of the radian angle.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseHyperbolicCosine(MathNet.Numerics.Complex)">
            <summary>
            Trigonometric Hyperbolic Arc Cosine of this <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The hyperbolic arc cosine of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseHyperbolicCotangent(System.Double)">
            <summary>
            Trigonometric Hyperbolic Arc Cotangent
            </summary>
            <param name="radian">
            The angle in radian angle.
            </param>
            <returns>
            The inverse hyperbolic cotangent of the radian angle.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseHyperbolicCotangent(MathNet.Numerics.Complex)">
            <summary>
            Trigonometric Hyperbolic Arc Cotangent of this <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The hyperbolic arc cotangent of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseHyperbolicSecant(System.Double)">
            <summary>
            Trigonometric Hyperbolic Area Secant 
            </summary>
            <param name="radian">
            The angle in radian angle.
            </param>
            <returns>
            The inverse hyperbolic secant of the radian angle.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseHyperbolicSecant(MathNet.Numerics.Complex)">
            <summary>
            Trigonometric Hyperbolic Arc Secant of this <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The hyperbolic arc secant of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseHyperbolicSine(System.Double)">
            <summary>
            Trigonometric Hyperbolic Area Sine 
            </summary>
            <param name="radian">
            The angle in radian angle.
            </param>
            <returns>
            The inverse hyperbolic sine of the radian angle.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseHyperbolicSine(MathNet.Numerics.Complex)">
            <summary>
            Trigonometric Hyperbolic Arc Sine of this <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The hyperbolic arc sine of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseHyperbolicTangent(System.Double)">
            <summary>
            Trigonometric Hyperbolic Area Tangent
            </summary>
            <param name="radian">
            The angle in radian angle.
            </param>
            <returns>
            The inverse hyperbolic tangent of the radian angle.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseHyperbolicTangent(MathNet.Numerics.Complex)">
            <summary>
            Trigonometric Hyperbolic Arc Tangent of this <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The hyperbolic arc tangent of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseSecant(System.Double)">
            <summary>
            Trigonometric Arc Secant in radian
            </summary>
            <param name="radian">
            The angle in radian angle.
            </param>
            <returns>
            The inverse secant of the radian angle.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseSecant(MathNet.Numerics.Complex)">
            <summary>
            Trigonometric Arc Secant of this <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The arc secant of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseSine(System.Double)">
            <summary>
            Trigonometric Arc Sine in radian
            </summary>
            <param name="radian">
            The angle in radian angle.
            </param>
            <returns>
            The inverse sine of the radian angle.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseSine(MathNet.Numerics.Complex)">
            <summary>
            Trigonometric Arc Sine of this <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The arc sine of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseTangent(System.Double)">
            <summary>
            Trigonometric Arc Tangent  in radian
            </summary>
            <param name="radian">
            The angle in radian angle.
            </param>
            <returns>
            The inverse tangent of the radian angle.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseTangent(MathNet.Numerics.Complex)">
            <summary>
            Trigonometric Arc Tangent of this <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The arc tangent of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.RadianToDegree(System.Double)">
            <summary>
            Converts a radian (2*Pi-periodic) angle to a degree (360-periodic) angle.
            </summary>
            <param name="radian">
            The radian to convert.
            </param>
            <returns>
            The converted degree.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.RadianToGrad(System.Double)">
            <summary>
            Converts a radian (2*Pi-periodic) angle to a grad (400-periodic) angle.
            </summary>
            <param name="radian">
            The radian to convert.
            </param>
            <returns>
            The converted grad.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.Secant(System.Double)">
            <summary>
            Trigonometric Secant of an angle in radian
            </summary>
            <param name="radian">
            The angle in radian.
            </param>
            <returns>
            The secant of the radian angle.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.Secant(MathNet.Numerics.Complex)">
            <summary>
            Trigonometric Secant of a <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The secant of the complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.Sine(System.Double)">
            <summary>
            Trigonometric Sine of an angle in radian
            </summary>
            <param name="radian">
            The angle in radian.
            </param>
            <returns>
            The sine of the radian angle.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.Sine(MathNet.Numerics.Complex)">
            <summary>
            Trigonometric Sine of a <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The sine of the complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.Tangent(System.Double)">
            <summary>
            Trigonometric Tangent of an angle in radian
            </summary>
            <param name="radian">
            The angle in radian.
            </param>
            <returns>
            The tangent of the radian angle.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.Tangent(MathNet.Numerics.Complex)">
            <summary>
            Trigonometric Tangent of a <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The tangent of the complex number.
            </returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Matrix">
            <summary>
            Defines the base class for <c>Matrix</c> classes.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Matrix"/> class.
            </summary>
            <param name="rows">
            The number of rows.
            </param>
            <param name="columns">
            The number of columns.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Matrix"/> class.
            </summary>
            <param name="order">
            The order of the matrix.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.At(System.Int32,System.Int32)">
            <summary>
            Retrieves the requested element without range checking.
            </summary>
            <param name="row">
            The row of the element.
            </param>
            <param name="column">
            The column of the element.
            </param>
            <returns>
            The requested element.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.At(System.Int32,System.Int32,System.Double)">
            <summary>
            Sets the value of the given element.
            </summary>
            <param name="row">
            The row of the element.
            </param>
            <param name="column">
            The column of the element.
            </param>
            <param name="value">
            The value to set the element to.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.Clone">
            <summary>
            Creates a clone of this instance.
            </summary>
            <returns>
            A clone of the instance.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.CopyTo(MathNet.Numerics.LinearAlgebra.Double.Matrix)">
            <summary>
            Copies the elements of this matrix to the given matrix.
            </summary>
            <param name="target">
            The matrix to copy values into.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If target is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If this and the target matrix do not have the same dimensions..
            </exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.CreateMatrix(System.Int32,System.Int32)">
            <summary>
            Creates a <strong>Matrix</strong> for the given number of rows and columns.
            </summary>
            <param name="numberOfRows">
            The number of rows.
            </param>
            <param name="numberOfColumns">
            The number of columns.
            </param>
            <returns>
            A <strong>Matrix</strong> with the given dimensions.
            </returns>
            <remarks>
            Creates a matrix of the same matrix type as the current matrix.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.Equals(MathNet.Numerics.LinearAlgebra.Double.Matrix)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">
            An object to compare with this object.
            </param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format to use.
            </param>
            <param name="formatProvider">
            The format provider to use.
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.RangeCheck(System.Int32,System.Int32)">
            <summary>
            Ranges the check.
            </summary>
            <param name="row">
            The row of the element.
            </param>
            <param name="column">
            The column of the element.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Matrix.ColumnCount">
            <summary>
            Gets the number of columns.
            </summary>
            <value>The number of columns.</value>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Matrix.RowCount">
            <summary>
            Gets the number of rows.
            </summary>
            <value>The number of rows.</value>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the value at the given row and column.
            </summary>
            <param name="row">
            The row of the element.
            </param>
            <param name="column">
            The column of the element.
            </param>
            <value>The double value to get or set.</value>
            <remarks>This method is ranged checked. <see cref="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.At(System.Int32,System.Int32)"/> and <see cref="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.At(System.Int32,System.Int32,System.Double)"/>
            to get and set values without range checking.</remarks>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.Algorithms.CubicHermiteSplineInterpolation">
            <summary>
            Cubic Hermite Spline Interpolation Algorithm.
            </summary>
            <remarks>
            This algorithm supports both differentiation and integration.
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.Algorithms.CubicHermiteSplineInterpolation._spline">
            <summary>
            Internal Spline Interpolation
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicHermiteSplineInterpolation.#ctor">
            <summary>
            Initializes a new instance of the CubicHermiteSplineInterpolation class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicHermiteSplineInterpolation.#ctor(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initializes a new instance of the CubicHermiteSplineInterpolation class.
            </summary>
            <param name="samplePoints">Sample Points t, sorted ascending.</param>
            <param name="sampleValues">Sample Values x(t)</param>
            <param name="sampleDerivatives">Sample Derivatives x'(t)</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicHermiteSplineInterpolation.Initialize(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initialize the interpolation method with the given spline coefficients (sorted by the sample points t).
            </summary>
            <param name="samplePoints">Sample Points t, sorted ascending.</param>
            <param name="sampleValues">Sample Values x(t)</param>
            <param name="sampleDerivatives">Sample Derivatives x'(t)</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicHermiteSplineInterpolation.EvaluateSplineCoefficients(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Evaluate the spline coefficients as used
            internally by this interpolation algorithm.
            </summary>
            <param name="samplePoints">Sample Points t, sorted ascending.</param>
            <param name="sampleValues">Sample Values x(t)</param>
            <param name="sampleDerivatives">Sample Derivatives x'(t)</param>
            <returns>Spline Coefficient Vector</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicHermiteSplineInterpolation.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicHermiteSplineInterpolation.Differentiate(System.Double)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated first derivative at point t.</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsDifferentiation"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.CubicHermiteSplineInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicHermiteSplineInterpolation.Differentiate(System.Double,System.Double@,System.Double@)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <param name="interpolatedValue">Interpolated value x(t)</param>
            <param name="secondDerivative">Interpolated second derivative at point t.</param>
            <returns>Interpolated first derivative at point t.</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsDifferentiation"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.CubicHermiteSplineInterpolation.Differentiate(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicHermiteSplineInterpolation.Integrate(System.Double)">
            <summary>
            Integrate up to point t.
            </summary>
            <param name="t">Right bound of the integration interval [a,t].</param>
            <returns>Interpolated definite integral over the interval [a,t].</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsIntegration"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.CubicHermiteSplineInterpolation.MathNet#Numerics#Interpolation#IInterpolation#SupportsDifferentiation">
            <summary>
            Gets a value indicating whether the algorithm supports differentiation (interpolated derivative).
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.CubicHermiteSplineInterpolation.Differentiate(System.Double)"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.CubicHermiteSplineInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.CubicHermiteSplineInterpolation.MathNet#Numerics#Interpolation#IInterpolation#SupportsIntegration">
            <summary>
            Gets a value indicating whether the algorithm supports integration (interpolated quadrature).
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.CubicHermiteSplineInterpolation.Integrate(System.Double)"/>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix">
            <summary>
            A Matrix class with dense storage. The underlying storage is a one dimensional array in column-major order.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix"/> class. This matrix is square with a given size.
            </summary>
            <param name="order">the size of the square matrix.</param>
            <exception cref="T:System.ArgumentException">
            If <paramref name="order"/> is less than one.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix"/> class.
            </summary>
            <param name="rows">
            The number of rows.
            </param>
            <param name="columns">
            The number of columns.
            </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.#ctor(System.Int32,System.Int32,System.Double)" -->
        <!-- Badly formed XML comment ignored for member "M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.#ctor(System.Int32,System.Int32,System.Double[])" -->
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix"/> class from a 2D array. This constructor
            will allocate a completely new memory block for storing the dense matrix.
            </summary>
            <param name="array">The 2D array to create this matrix from.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.CreateMatrix(System.Int32,System.Int32)">
            <summary>
            Creates a <strong>DenseMatrix</strong> for the given number of rows and columns.
            </summary>
            <param name="numberOfRows">
            The number of rows.
            </param>
            <param name="numberOfColumns">
            The number of columns.
            </param>
            <returns>
            A <strong>DenseMatrix</strong> with the given dimensions.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.At(System.Int32,System.Int32)">
            <summary>
            Retrieves the requested element without range checking.
            </summary>
            <param name="row">
            The row of the element.
            </param>
            <param name="column">
            The column of the element.
            </param>
            <returns>
            The requested element.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.At(System.Int32,System.Int32,System.Double)">
            <summary>
            Sets the value of the given element.
            </summary>
            <param name="row">
            The row of the element.
            </param>
            <param name="column">
            The column of the element.
            </param>
            <param name="value">
            The value to set the element to.
            </param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.Data">
            <summary>
            Gets or sets the matrix's data.
            </summary>
            <value>The matrix's data.</value>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.Algorithms.LinearSplineInterpolation">
            <summary>
            Linear Spline Interpolation Algorithm.
            </summary>
            <remarks>
            This algorithm supports both differentiation and integration.
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.Algorithms.LinearSplineInterpolation._spline">
            <summary>
            Internal Spline Interpolation
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.LinearSplineInterpolation.#ctor">
            <summary>
            Initializes a new instance of the LinearSplineInterpolation class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.LinearSplineInterpolation.#ctor(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initializes a new instance of the LinearSplineInterpolation class.
            </summary>
            <param name="samplePoints">Sample Points t, sorted ascending.</param>
            <param name="sampleValues">Sample Values x(t)</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.LinearSplineInterpolation.Initialize(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initialize the interpolation method with the given spline coefficients (sorted by the sample points t).
            </summary>
            <param name="samplePoints">Sample Points t, sorted ascending.</param>
            <param name="sampleValues">Sample Values x(t)</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.LinearSplineInterpolation.EvaluateSplineCoefficients(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Evaluate the spline coefficients as used
            internally by this interpolation algorithm.
            </summary>
            <param name="samplePoints">Sample Points t, sorted ascending.</param>
            <param name="sampleValues">Sample Values x(t)</param>
            <returns>Spline Coefficient Vector</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.LinearSplineInterpolation.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.LinearSplineInterpolation.Differentiate(System.Double)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated first derivative at point t.</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsDifferentiation"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.LinearSplineInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.LinearSplineInterpolation.Differentiate(System.Double,System.Double@,System.Double@)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <param name="interpolatedValue">Interpolated value x(t)</param>
            <param name="secondDerivative">Interpolated second derivative at point t.</param>
            <returns>Interpolated first derivative at point t.</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsDifferentiation"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.LinearSplineInterpolation.Differentiate(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.LinearSplineInterpolation.Integrate(System.Double)">
            <summary>
            Integrate up to point t.
            </summary>
            <param name="t">Right bound of the integration interval [a,t].</param>
            <returns>Interpolated definite integral over the interval [a,t].</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsIntegration"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.LinearSplineInterpolation.MathNet#Numerics#Interpolation#IInterpolation#SupportsDifferentiation">
            <summary>
            Gets a value indicating whether the algorithm supports differentiation (interpolated derivative).
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.LinearSplineInterpolation.Differentiate(System.Double)"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.LinearSplineInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.LinearSplineInterpolation.MathNet#Numerics#Interpolation#IInterpolation#SupportsIntegration">
            <summary>
            Gets a value indicating whether the algorithm supports integration (interpolated quadrature).
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.LinearSplineInterpolation.Integrate(System.Double)"/>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation">
            <summary>
            Cubic Spline Interpolation Algorithm with continuous first and second derivatives.
            </summary>
            <remarks>
            This algorithm supports both differentiation and integration.
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation._spline">
            <summary>
            Internal Spline Interpolation
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.#ctor">
            <summary>
            Initializes a new instance of the CubicSplineInterpolation class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.#ctor(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initializes a new instance of the CubicSplineInterpolation class.
            </summary>
            <param name="samplePoints">Sample Points t, sorted ascending.</param>
            <param name="sampleValues">Sample Values x(t)</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.#ctor(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},MathNet.Numerics.Interpolation.SplineBoundaryCondition,System.Double,MathNet.Numerics.Interpolation.SplineBoundaryCondition,System.Double)">
            <summary>
            Initializes a new instance of the CubicSplineInterpolation class.
            </summary>
            <param name="samplePoints">Sample Points t, sorted ascending.</param>
            <param name="sampleValues">Sample Values x(t)</param>
            <param name="leftBoundaryCondition">Condition of the left boundary.</param>
            <param name="leftBoundary">Left boundary value. Ignored in the parabolic case.</param>
            <param name="rightBoundaryCondition">Condition of the right boundary.</param>
            <param name="rightBoundary">Right boundary value. Ignored in the parabolic case.</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.Initialize(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initialize the interpolation method with the given spline coefficients (sorted by the sample points t).
            </summary>
            <param name="samplePoints">Sample Points t, sorted ascending.</param>
            <param name="sampleValues">Sample Values x(t)</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.Initialize(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},MathNet.Numerics.Interpolation.SplineBoundaryCondition,System.Double,MathNet.Numerics.Interpolation.SplineBoundaryCondition,System.Double)">
            <summary>
            Initialize the interpolation method with the given spline coefficients (sorted by the sample points t).
            </summary>
            <param name="samplePoints">Sample Points t, sorted ascending.</param>
            <param name="sampleValues">Sample Values x(t)</param>
            <param name="leftBoundaryCondition">Condition of the left boundary.</param>
            <param name="leftBoundary">Left boundary value. Ignored in the parabolic case.</param>
            <param name="rightBoundaryCondition">Condition of the right boundary.</param>
            <param name="rightBoundary">Right boundary value. Ignored in the parabolic case.</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.EvaluateSplineDerivatives(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},MathNet.Numerics.Interpolation.SplineBoundaryCondition,System.Double,MathNet.Numerics.Interpolation.SplineBoundaryCondition,System.Double)">
            <summary>
            Evaluate the spline derivatives as used
            internally by this interpolation algorithm.
            </summary>
            <param name="samplePoints">Sample Points t, sorted ascending.</param>
            <param name="sampleValues">Sample Values x(t)</param>
            <param name="leftBoundaryCondition">Condition of the left boundary.</param>
            <param name="leftBoundary">Left boundary value. Ignored in the parabolic case.</param>
            <param name="rightBoundaryCondition">Condition of the right boundary.</param>
            <param name="rightBoundary">Right boundary value. Ignored in the parabolic case.</param>
            <returns>Spline Derivative Vector</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.EvaluateSplineCoefficients(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},MathNet.Numerics.Interpolation.SplineBoundaryCondition,System.Double,MathNet.Numerics.Interpolation.SplineBoundaryCondition,System.Double)">
            <summary>
            Evaluate the spline coefficients as used
            internally by this interpolation algorithm.
            </summary>
            <param name="samplePoints">Sample Points t, sorted ascending.</param>
            <param name="sampleValues">Sample Values x(t)</param>
            <param name="leftBoundaryCondition">Condition of the left boundary.</param>
            <param name="leftBoundary">Left boundary value. Ignored in the parabolic case.</param>
            <param name="rightBoundaryCondition">Condition of the right boundary.</param>
            <param name="rightBoundary">Right boundary value. Ignored in the parabolic case.</param>
            <returns>Spline Coefficient Vector</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.SolveTridiagonal(System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>
            Tridiagonal Solve Helper.
            </summary>
            <param name="a">The a-vector[n].</param>
            <param name="b">The b-vector[n], will be modified by this function.</param>
            <param name="c">The c-vector[n].</param>
            <param name="d">The d-vector[n], will be modified by this function.</param>
            <returns>The x-vector[n]</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.Differentiate(System.Double)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated first derivative at point t.</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsDifferentiation"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.Differentiate(System.Double,System.Double@,System.Double@)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <param name="interpolatedValue">Interpolated value x(t)</param>
            <param name="secondDerivative">Interpolated second derivative at point t.</param>
            <returns>Interpolated first derivative at point t.</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsDifferentiation"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.Differentiate(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.Integrate(System.Double)">
            <summary>
            Integrate up to point t.
            </summary>
            <param name="t">Right bound of the integration interval [a,t].</param>
            <returns>Interpolated definite integral over the interval [a,t].</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsIntegration"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.MathNet#Numerics#Interpolation#IInterpolation#SupportsDifferentiation">
            <summary>
            Gets a value indicating whether the algorithm supports differentiation (interpolated derivative).
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.Differentiate(System.Double)"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.MathNet#Numerics#Interpolation#IInterpolation#SupportsIntegration">
            <summary>
            Gets a value indicating whether the algorithm supports integration (interpolated quadrature).
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.Integrate(System.Double)"/>
        </member>
        <member name="T:MathNet.Numerics.Integration.Integrate">
            <summary>
            Numeric Integration (Quadrature).
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Integration.Integrate.Det">
            <summary>
            Shared internal DET algorithm.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Integration.Integrate.OnClosedInterval(System.Func{System.Double,System.Double},System.Double,System.Double,System.Double)">
            <summary>
            Approximation of the definite interval of an analytic smooth function on a closed interval.
            </summary>
            <param name="f">The analytic smooth function to integrate.</param>
            <param name="intervalBegin">Where the interval starts, inclusive and finite.</param>
            <param name="intervalEnd">Where the interval stops, inclusive and finite.</param>
            <param name="targetAbsoluteError">The expected relative accuracy of the approximation.</param>
            <returns>Approximation of the finite integral in the given interval.</returns>
        </member>
        <member name="M:MathNet.Numerics.Integration.Integrate.OnClosedInterval(System.Func{System.Double,System.Double},System.Double,System.Double)">
            <summary>
            Approximation of the definite interval of an analytic smooth function on a closed interval.
            </summary>
            <param name="f">The analytic smooth function to integrate.</param>
            <param name="intervalBegin">Where the interval starts, inclusive and finite.</param>
            <param name="intervalEnd">Where the interval stops, inclusive and finite.</param>
            <returns>Approximation of the finite integral in the given interval.</returns>
        </member>
        <member name="T:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteHartleyTransform">
            <summary>
            Fast (FHT) Implementation of the Discrete Hartley Transform (DHT).
            </summary>
            <summary>
            Fast (FHT) Implementation of the Discrete Hartley Transform (DHT).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteHartleyTransform.ForwardScaleByOptions(MathNet.Numerics.IntegralTransforms.HartleyOptions,System.Double[])">
            <summary>
            Rescale FFT-the resulting vector according to the provided convention options.
            </summary>
            <param name="options">Fourier Transform Convention Options.</param>
            <param name="samples">Sample Vector.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteHartleyTransform.InverseScaleByOptions(MathNet.Numerics.IntegralTransforms.HartleyOptions,System.Double[])">
            <summary>
            Rescale the iFFT-resulting vector according to the provided convention options.
            </summary>
            <param name="options">Fourier Transform Convention Options.</param>
            <param name="samples">Sample Vector.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteHartleyTransform.Naive(System.Double[])">
            <summary>
            Naive generic DHT, useful e.g. to verify faster algorithms.
            </summary>
            <param name="samples">Time-space sample vector.</param>
            <returns>Corresponding frequency-space vector.</returns>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteHartleyTransform.NaiveForward(System.Double[],MathNet.Numerics.IntegralTransforms.HartleyOptions)">
            <summary>
            Naive forward DHT, useful e.g. to verify faster algorithms.
            </summary>
            <param name="timeSpace">Time-space sample vector.</param>
            <param name="options">Hartley Transform Convention Options.</param>
            <returns>Corresponding frequency-space vector.</returns>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteHartleyTransform.NaiveInverse(System.Double[],MathNet.Numerics.IntegralTransforms.HartleyOptions)">
            <summary>
            Naive inverse DHT, useful e.g. to verify faster algorithms.
            </summary>
            <param name="frequencySpace">Frequency-space sample vector.</param>
            <param name="options">Hartley Transform Convention Options.</param>
            <returns>Corresponding time-space vector.</returns>
        </member>
        <member name="T:MathNet.Numerics.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentBetween0And1">
            <summary>
              Looks up a localized string similar to The argument must be between 0 and 1..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentCannotBeBetweenOneAndNegativeOne">
            <summary>
              Looks up a localized string similar to Value cannot be in the range -1 &lt; x &lt; 1..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentEven">
            <summary>
              Looks up a localized string similar to Value must be even..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentHistogramContainsNot">
            <summary>
              Looks up a localized string similar to The histogram does not contains the value..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentInIntervalXYInclusive">
            <summary>
              Looks up a localized string similar to Value is expected to be between {0} and {1} (including {0} and {1})..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentItemNull">
            <summary>
              Looks up a localized string similar to At least one item of {0} is a null reference (Nothing in Visual Basic)..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentLessThanOne">
            <summary>
              Looks up a localized string similar to Value must be greater than or equal to one..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentLowerBoundLargerThanUpperBound">
            <summary>
              Looks up a localized string similar to han the given upper bound..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentMatrixIndexOutOfRange">
            <summary>
              Looks up a localized string similar to The matrix indices must not be out of range of the given matrix..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentMatrixNotRankDeficient">
            <summary>
              Looks up a localized string similar to Matrix must not be rank deficient..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentMatrixNotSingular">
            <summary>
              Looks up a localized string similar to Matrix must not be singular..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentMatrixSameColumnDimension">
            <summary>
              Looks up a localized string similar to Matrix column dimensions must agree..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentMatrixSameDimensions">
            <summary>
              Looks up a localized string similar to Matrix dimensions must agree..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentMatrixSameRowDimension">
            <summary>
              Looks up a localized string similar to Matrix row dimensions must agree..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentMatrixSingleColumn">
            <summary>
              Looks up a localized string similar to Matrix must have exactly one column..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentMatrixSingleColumnRow">
            <summary>
              Looks up a localized string similar to Matrix must have exactly one column and row, thus have only one cell..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentMatrixSingleRow">
            <summary>
              Looks up a localized string similar to Matrix must have exactly one row..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentMatrixSquare">
            <summary>
              Looks up a localized string similar to Matrix must be square..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentMatrixSymmetric">
            <summary>
              Looks up a localized string similar to Matrix must be symmetric..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentMatrixSymmetricPositiveDefinite">
            <summary>
              Looks up a localized string similar to Matrix must be symmetric positive definite..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentMinValueGreaterThanMaxValue">
            <summary>
              Looks up a localized string similar to In the specified range, the minimum is greater than maximum..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentMustBePositive">
            <summary>
              Looks up a localized string similar to Value must be positive..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentNotInfinityNaN">
            <summary>
              Looks up a localized string similar to Value must neither be infinite nor NaN..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentNotNegative">
            <summary>
              Looks up a localized string similar to Value must not be negative (zero is ok)..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentNull">
            <summary>
              Looks up a localized string similar to {0} is a null reference (Nothing in Visual Basic)..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentOdd">
            <summary>
              Looks up a localized string similar to Value must be odd..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentOutOfRangeGreater">
            <summary>
              Looks up a localized string similar to {0} must be greater than {1}..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentOutOfRangeGreaterEqual">
            <summary>
              Looks up a localized string similar to {0} must be greater than or equal to {1}..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentParameterSetInvalid">
            <summary>
              Looks up a localized string similar to The chosen parameter set is invalid (probably some value is out of range)..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentParseComplexNumber">
            <summary>
              Looks up a localized string similar to The given expression does not represent a complex number..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentPositive">
            <summary>
              Looks up a localized string similar to Value must be positive (and not zero)..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentPowerOfTwo">
            <summary>
              Looks up a localized string similar to Size must be a Power of Two..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentPowerOfTwoEveryDimension">
            <summary>
              Looks up a localized string similar to Size must be a Power of Two in every dimension..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentRangeLessEqual">
            <summary>
              Looks up a localized string similar to The range between {0} and {1} must be less than or equal to {2}..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentSingleDimensionArray">
            <summary>
              Looks up a localized string similar to Array must have exactly one dimension (and not be null)..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentTooLarge">
            <summary>
              Looks up a localized string similar to Value is too large..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentTooLargeForIterationLimit">
            <summary>
              Looks up a localized string similar to Value is too large for the current iteration limit..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentTypeMismatch">
            <summary>
              Looks up a localized string similar to Type mismatch..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentVectorLengthsMultipleOf">
            <summary>
              Looks up a localized string similar to Array length must be a multiple of {0}..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentVectorsSameLength">
            <summary>
              Looks up a localized string similar to All vectors must have the same dimensionality..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentVectorThreeDimensional">
            <summary>
              Looks up a localized string similar to The vector must have 3 dimensions..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.CollectionEmpty">
            <summary>
              Looks up a localized string similar to The supplied collection is empty..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.FeaturePlannedButNotImplementedYet">
            <summary>
              Looks up a localized string similar to This feature is not implemented yet (but is planned)..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.InvalidDistributionParameters">
            <summary>
              Looks up a localized string similar to Invalid parameterization for the distribution..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.InvalidLeftBoundaryCondition">
            <summary>
              Looks up a localized string similar to Invalid Left Boundary Condition..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.InvalidOperationAccumulatorEmpty">
            <summary>
              Looks up a localized string similar to The operation could not be performed because the accumulator is empty..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.InvalidOperationHistogramEmpty">
            <summary>
              Looks up a localized string similar to The operation could not be performed because the histogram is empty..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.InvalidOperationHistogramNotEnoughPoints">
            <summary>
              Looks up a localized string similar to Not enough points in the distribution..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.InvalidOperationNoSamplesProvided">
            <summary>
              Looks up a localized string similar to No Samples Provided. Preparation Required..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.InvalidRightBoundaryCondition">
            <summary>
              Looks up a localized string similar to Invalid Right Boundary Condition..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.MatrixColumnsMustBePositive">
            <summary>
              Looks up a localized string similar to The number of columns of a matrix must be positive..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.MatrixRowsMustBePositive">
            <summary>
              Looks up a localized string similar to The number of rows of a matrix must be positive..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.MatrixRowsOrColumnsMustBePositive">
            <summary>
              Looks up a localized string similar to The number of rows or columns of a matrix must be positive..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.PartialOrderException">
            <summary>
              Looks up a localized string similar to The two arguments can&apos;t be compared (maybe they are part of a partial ordering?).
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.SpecialCasePlannedButNotImplementedYet">
            <summary>
              Looks up a localized string similar to This special case is not supported yet (but is planned)..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.UserDefinedProviderNotSpecified">
            <summary>
              Looks up a localized string similar to A user defined provider has not been specified..
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Complex">
            <summary>
            Complex numbers class.
            </summary>
            <remarks>
            <para>
            The class <c>Complex</c> provides all elementary operations
            on complex numbers. All the operators <c>+</c>, <c>-</c>,
            <c>*</c>, <c>/</c>, <c>==</c>, <c>!=</c> are defined in the
            canonical way. Additional complex trigonometric functions such 
            as <see cref="M:MathNet.Numerics.Trig.Cosine(MathNet.Numerics.Complex)"/>, ... 
            are also provided. Note that the <c>Complex</c> structures 
            has two special constant values <see cref="P:MathNet.Numerics.Complex.NaN"/> and 
            <see cref="P:MathNet.Numerics.Complex.Infinity"/>.
            </para>
            <para>
            In order to avoid possible ambiguities resulting from a 
            <c>Complex(double, double)</c> constructor, the static methods 
            <see cref="M:MathNet.Numerics.Complex.WithRealImaginary(System.Double,System.Double)"/> and <see cref="M:MathNet.Numerics.Complex.WithModulusArgument(System.Double,System.Double)"/>
            are provided instead.
            </para>
            <para>
            <code>
            Complex x = Complex.FromRealImaginary(1d, 2d);
            Complex y = Complex.FromModulusArgument(1d, Math.Pi);
            Complex z = (x + y) / (x - y);
            </code>
            </para>
            <para>
            For mathematical details about complex numbers, please
            have a look at the <a href="http://en.wikipedia.org/wiki/Complex_number">
            Wikipedia</a>
            </para>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.Complex._i">
            <summary>
            Represents imaginary unit number.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Complex._infinity">
            <summary>
            Represents a infinite complex number
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Complex._nan">
            <summary>
            Represents not-a-number.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Complex._one">
            <summary>
            Representing the one value.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Complex._zero">
            <summary>
            Representing the zero value.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Complex._real">
            <summary>
            The real component of the complex number.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Complex._imag">
            <summary>
            The imaginary component of the complex number.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Complex structure with the given real
            and imaginary parts.
            </summary>
            <param name="real">
            The value for the real component.
            </param>
            <param name="imaginary">
            The value for the imaginary component.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Complex.Exponential">
            <summary>
            Exponential of this <c>Complex</c> (exp(x), E^x).
            </summary>
            <returns>
            The exponential of this complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex.NaturalLogarithm">
            <summary>
            Natural Logarithm of this <c>Complex</c> (Base E).
            </summary>
            <returns>
            The natural logarithm of this complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex.Power(MathNet.Numerics.Complex)">
            <summary>
            Raise this <c>Complex</c> to the given value.
            </summary>
            <param name="exponent">
            The exponent.
            </param>
            <returns>
            The complex number raised to the given exponent.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex.Root(MathNet.Numerics.Complex)">
            <summary>
            Raise this <c>Complex</c> to the inverse of the given value.
            </summary>
            <param name="rootExponent">
            The root exponent.
            </param>
            <returns>
            The complex raised to the inverse of the given exponent.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex.Square">
            <summary>
            The Square (power 2) of this <c>Complex</c>
            </summary>
            <returns>
            The square of this complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex.SquareRoot">
            <summary>
            The Square Root (power 1/2) of this <c>Complex</c>
            </summary>
            <returns>
            The square root of this complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex.WithRealImaginary(System.Double,System.Double)">
            <summary>
            Constructs a <c>Complex</c> from its real
            and imaginary parts.
            </summary>
            <param name="real">
            The value for the real component.
            </param>
            <param name="imaginary">
            The value for the imaginary component.
            </param>
            <returns>
            A new <c>Complex</c> with the given values.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex.WithModulusArgument(System.Double,System.Double)">
            <summary>
            Constructs a <c>Complex</c> from its modulus and
            argument.
            </summary>
            <param name="modulus">
            Must be non-negative.
            </param>
            <param name="argument">
            Real number.
            </param>
            <returns>
            A new <c>Complex</c> from the given values.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex.ToString">
            <summary>
            A string representation of this complex number.
            </summary>
            <returns>
            The string representation of this complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex.ToString(System.String)">
            <summary>
            A string representation of this complex number.
            </summary>
            <returns>
            The string representation of this complex number formatted as specified by the
            format string.
            </returns>
            <param name="format">
            A format specification.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Complex.ToString(System.IFormatProvider)">
            <summary>
            A string representation of this complex number.
            </summary>
            <returns>
            The string representation of this complex number formatted as specified by the
            format provider.
            </returns>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Complex.ToString(System.String,System.IFormatProvider)">
            <summary>
            A string representation of this complex number.
            </summary>
            <returns>
            The string representation of this complex number formatted as specified by the
            format string and format provider.
            </returns>
            <exception cref="T:System.FormatException">
            if the n, is not a number.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            if s, is <see langword="null"/>.
            </exception>
            <param name="format">
            A format specification.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Complex.Equals(MathNet.Numerics.Complex)">
            <summary>
            Checks if two complex numbers are equal. Two complex numbers are equal if their
            corresponding real and imaginary components are equal.
            </summary>
            <returns>
            Returns <c>true</c> if the two objects are the same object, or if their corresponding
            real and imaginary components are equal, <c>false</c> otherwise.
            </returns>
            <param name="other">
            The complex number to compare to with.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Complex.GetHashCode">
            <summary>
            The hash code for the complex number.
            </summary>
            <returns>
            The hash code of the complex number.
            </returns>
            <remarks>
            The hash code is calculated as
            System.Math.Exp(ComplexMath.Absolute(complexNumber)).
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Complex.Equals(System.Object)">
            <summary>
            Checks if two complex numbers are equal. Two complex numbers are equal if their
            corresponding real and imaginary components are equal.
            </summary>
            <returns>
            Returns <c>true</c> if the two objects are the same object, or if their corresponding
            real and imaginary components are equal, <c>false</c> otherwise.
            </returns>
            <param name="obj">
            The complex number to compare to with.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Equality(MathNet.Numerics.Complex,MathNet.Numerics.Complex)">
            <summary>
            Equality test.
            </summary>
            <param name="complex1">One of complex numbers to compare.</param>
            <param name="complex2">The other complex numbers to compare.</param>
            <returns><c>true</c> if the real and imaginary components of the two complex numbers are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Inequality(MathNet.Numerics.Complex,MathNet.Numerics.Complex)">
            <summary>
            Inequality test.
            </summary>
            <param name="complex1">One of complex numbers to compare.</param>
            <param name="complex2">The other complex numbers to compare.</param>
            <returns><c>true</c> if the real or imaginary components of the two complex numbers are not equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_UnaryPlus(MathNet.Numerics.Complex)">
            <summary>
            Unary addition.
            </summary>
            <param name="summand">The complex number to operate on.</param>
            <returns>Returns the same complex number.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_UnaryNegation(MathNet.Numerics.Complex)">
            <summary>
            Unary minus.
            </summary>
            <param name="subtrahend">The complex number to operate on.</param>
            <returns>The negated value of the <paramref name="subtrahend"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Addition(MathNet.Numerics.Complex,MathNet.Numerics.Complex)">
            <summary>Addition operator. Adds two complex numbers together.</summary>
            <returns>The result of the addition.</returns>
            <param name="summand1">One of the complex numbers to add.</param>
            <param name="summand2">The other complex numbers to add.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Subtraction(MathNet.Numerics.Complex,MathNet.Numerics.Complex)">
            <summary>Subtraction operator. Subtracts two complex numbers.</summary>
            <returns>The result of the subtraction.</returns>
            <param name="minuend">The complex number to subtract from.</param>
            <param name="subtrahend">The complex number to subtract.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Addition(MathNet.Numerics.Complex,System.Double)">
            <summary>Addition operator. Adds a complex number and double together.</summary>
            <returns>The result of the addition.</returns>
            <param name="summand1">The complex numbers to add.</param>
            <param name="summand2">The double value to add.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Subtraction(MathNet.Numerics.Complex,System.Double)">
            <summary>Subtraction operator. Subtracts double value from a complex value.</summary>
            <returns>The result of the subtraction.</returns>
            <param name="minuend">The complex number to subtract from.</param>
            <param name="subtrahend">The double value to subtract.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Addition(System.Double,MathNet.Numerics.Complex)">
            <summary>Addition operator. Adds a complex number and double together.</summary>
            <returns>The result of the addition.</returns>
            <param name="summand1">The double value to add.</param>
            <param name="summand2">The complex numbers to add.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Subtraction(System.Double,MathNet.Numerics.Complex)">
            <summary>Subtraction operator. Subtracts complex value from a double value.</summary>
            <returns>The result of the subtraction.</returns>
            <param name="minuend">The double vale to subtract from.</param>
            <param name="subtrahend">The complex value to subtract.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Multiply(MathNet.Numerics.Complex,MathNet.Numerics.Complex)">
            <summary>Multiplication operator. Multiplies two complex numbers.</summary>
            <returns>The result of the multiplication.</returns>
            <param name="multiplicand">One of the complex numbers to multiply.</param>
            <param name="multiplier">The other complex number to multiply.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Multiply(System.Double,MathNet.Numerics.Complex)">
            <summary>Multiplication operator. Multiplies a complex number with a double value.</summary>
            <returns>The result of the multiplication.</returns>
            <param name="multiplicand">The double value to multiply.</param>
            <param name="multiplier">The complex number to multiply.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Multiply(MathNet.Numerics.Complex,System.Double)">
            <summary>Multiplication operator. Multiplies a complex number with a double value.</summary>
            <returns>The result of the multiplication.</returns>
            <param name="multiplicand">The complex number to multiply.</param>
            <param name="multiplier">The double value to multiply.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Division(MathNet.Numerics.Complex,MathNet.Numerics.Complex)">
            <summary>Division operator. Divides a complex number by another.</summary>
            <returns>The result of the division.</returns>
            <param name="dividend">The dividend.</param>
            <param name="divisor">The divisor.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Division(System.Double,MathNet.Numerics.Complex)">
            <summary>Division operator. Divides a double value by a complex number.</summary>
            <returns>The result of the division.</returns>
            <param name="dividend">The dividend.</param>
            <param name="divisor">The divisor.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Division(MathNet.Numerics.Complex,System.Double)">
            <summary>Division operator. Divides a complex number by a double value.</summary>
            <returns>The result of the division.</returns>
            <param name="dividend">The dividend.</param>
            <param name="divisor">The divisor.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex.Plus">
            <summary>
            Unary addition.
            </summary>
            <returns>
            Returns the same complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex.Negate">
            <summary>
            Unary minus.
            </summary>
            <returns>
            The negated value of this complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex.Add(MathNet.Numerics.Complex)">
            <summary>
            Adds a complex number to this one.
            </summary>
            <returns>
            The result of the addition.
            </returns>
            <param name="other">
            The other complex number to add.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Complex.Subtract(MathNet.Numerics.Complex)">
            <summary>
            Subtracts a complex number from this one.
            </summary>
            <returns>
            The result of the subtraction.
            </returns>
            <param name="other">
            The other complex number to subtract from this one.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Complex.Multiply(MathNet.Numerics.Complex)">
            <summary>
            Multiplies this complex number with this one.
            </summary>
            <returns>
            The result of the multiplication.
            </returns>
            <param name="multiplier">
            The complex number to multiply.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Complex.Divide(MathNet.Numerics.Complex)">
            <summary>
            Divides this complex number by another.
            </summary>
            <returns>
            The result of the division.
            </returns>
            <param name="divisor">
            The divisor.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Complex.MathNet#Numerics#IPrecisionSupport{MathNet#Numerics#Complex}#Norm">
            <summary>
            Returns a Norm of a value of this type, which is appropriate for measuring how
            close this value is to zero.
            </summary>
            <returns>
            A norm of this value.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex.MathNet#Numerics#IPrecisionSupport{MathNet#Numerics#Complex}#NormOfDifference(MathNet.Numerics.Complex)">
            <summary>
            Returns a Norm of the difference of two values of this type, which is
            appropriate for measuring how close together these two values are.
            </summary>
            <param name="otherValue">
            The value to compare with.
            </param>
            <returns>
            A norm of the difference between this and the other value.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex.Parse(System.String)">
            <summary>
            Creates a complex number based on a string. The string can be in the
            following formats (without the quotes): 'n', 'ni', 'n +/- ni',
            'ni +/- n', 'n,n', 'n,ni,' '(n,n)', or '(n,ni)', where n is a double.
            </summary>
            <returns>
            A complex number containing the value specified by the given string.
            </returns>
            <param name="value">
            The string to parse.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Complex.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates a complex number based on a string. The string can be in the
            following formats (without the quotes): 'n', 'ni', 'n +/- ni',
            'ni +/- n', 'n,n', 'n,ni,' '(n,n)', or '(n,ni)', where n is a double.
            </summary>
            <returns>
            A complex number containing the value specified by the given string.
            </returns>
            <param name="value">
            the string to parse.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific
            formatting information.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Complex.ParsePart(System.Collections.Generic.LinkedListNode{System.String}@,System.Boolean@,System.IFormatProvider)">
            <summary>
            Parse a part (real or complex) from a complex number.
            </summary>
            <param name="token">Start Token.</param>
            <param name="imaginary">Is set to <c>true</c> if the part identified itself as being imaginary.</param>
            <param name="format">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific
            formatting information.
            </param>
            <returns>Resulting part as double.</returns>
            <exception cref="T:System.FormatException"/>
        </member>
        <member name="M:MathNet.Numerics.Complex.TryParse(System.String,MathNet.Numerics.Complex@)">
            <summary>
            Converts the string representation of a complex number to a double-precision complex number equivalent. 
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A string containing a complex number to convert. 
            </param>
            <param name="result">
            The parsed value.
            </param>
            <returns>
            If the conversion succeeds, the result will contain a complex number equivalent to value. 
            Otherwise the result will contain complex32.Zero.  This parameter is passed uninitialized
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex.TryParse(System.String,System.IFormatProvider,MathNet.Numerics.Complex@)">
            <summary>
            Converts the string representation of a complex number to double-precision complex number equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A string containing a complex number to convert.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about value.
            </param>
            <param name="result">
            The parsed value.
            </param>
            <returns>
            If the conversion succeeds, the result will contain a complex number equivalent to value.
            Otherwise the result will contain complex32.Zero.  This parameter is passed uninitialized
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Implicit(MathNet.Numerics.Complex32)~MathNet.Numerics.Complex">
            <summary>
            Explicit conversion of a <c>Complex32</c> to a <c>Complex</c>.
            </summary>
            <param name="value">The decimal value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Explicit(System.Decimal)~MathNet.Numerics.Complex">
            <summary>
            Explicit conversion of a real decimal to a <c>Complex</c>.
            </summary>
            <param name="value">The decimal value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Implicit(System.Byte)~MathNet.Numerics.Complex">
            <summary>
            Implicit conversion of a real byte to a <c>Complex</c>.
            </summary>
            <param name="value">The byte value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Implicit(System.Int16)~MathNet.Numerics.Complex">
            <summary>
            Implicit conversion of a real short to a <c>Complex</c>.
            </summary>
            <param name="value">The short value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Implicit(System.Int32)~MathNet.Numerics.Complex">
            <summary>
            Implicit conversion of a real int to a <c>Complex</c>.
            </summary>
            <param name="value">The int value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Implicit(System.Int64)~MathNet.Numerics.Complex">
            <summary>
            Implicit conversion of a real long to a <c>Complex</c>.
            </summary>
            <param name="value">The long value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Implicit(System.UInt32)~MathNet.Numerics.Complex">
            <summary>
            Implicit conversion of a real uint to a <c>Complex</c>.
            </summary>
            <param name="value">The uint value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Implicit(System.UInt64)~MathNet.Numerics.Complex">
            <summary>
            Implicit conversion of a real ulong to a <c>Complex</c>.
            </summary>
            <param name="value">The ulong value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Implicit(System.Single)~MathNet.Numerics.Complex">
            <summary>
            Implicit conversion of a real float to a <c>Complex</c>.
            </summary>
            <param name="value">The float value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Implicit(System.Double)~MathNet.Numerics.Complex">
            <summary>
            Implicit conversion of a real double to a <c>Complex</c>.
            </summary>
            <param name="value">The double value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex.Abs(MathNet.Numerics.Complex)">
            <summary>
            Gets the absolute value (or magnitude) of a complex number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The absolute value (or magnitude) of a complex number.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex.Acos(MathNet.Numerics.Complex)">
            <summary>
            Trigonometric Arc Cosine of a <c>Complex</c> number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>
            The arc cosine of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex.Asin(MathNet.Numerics.Complex)">
            <summary>
            Trigonometric Arc Sine of a <c>Complex</c> number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>
            The arc sine of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex.Atan(MathNet.Numerics.Complex)">
            <summary>
            Trigonometric Arc Tangent of a <c>Complex</c> number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>
            The arc tangent of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex.Cos(MathNet.Numerics.Complex)">
            <summary>
            Trigonometric Cosine of a <c>Complex</c> number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>
            The cosine of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex.Sin(MathNet.Numerics.Complex)">
            <summary>
            Trigonometric Sine of a <c>Complex</c> number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>
            The Sine of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex.Tan(MathNet.Numerics.Complex)">
            <summary>
            Trigonometric Tangent of a <c>Complex</c> number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>
            The tangent of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex.Cosh(MathNet.Numerics.Complex)">
            <summary>
            Trigonometric Hyperbolic Cosine of a <c>Complex</c> number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>
            The hyperbolic cosine of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex.Sinh(MathNet.Numerics.Complex)">
            <summary>
            Trigonometric Hyperbolic Sine of a <c>Complex</c> number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>
            The hyperbolic sine of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex.Tanh(MathNet.Numerics.Complex)">
            <summary>
            Trigonometric Hyperbolic Tangent of a <c>Complex</c> number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>
            The hyperbolic tangent of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex.Exp(MathNet.Numerics.Complex)">
            <summary>
            Exponential of a <c>Complex</c> number (exp(x), E^x).
            </summary>
            <param name="value">A complex number.</param>
            <returns>
            The exponential of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex.FromPolarCoordinates(System.Double,System.Double)">
            <summary>
            Constructs a <c>Complex</c> from its magnitude and phase.
            </summary>
            <param name="magnitude">
            Must be non-negative.
            </param>
            <param name="phase">
            Real number.
            </param>
            <returns>
            A new <c>Complex</c> from the given values.
            </returns>
            <seealso cref="M:MathNet.Numerics.Complex.WithModulusArgument(System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Complex.Log(MathNet.Numerics.Complex)">
            <summary>
            Natural Logarithm  of a <c>Complex</c> number (exp(x), E^x).
            </summary>
            <param name="value">A complex number.</param>
            <returns>
            The natural logarithm of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex.Log(MathNet.Numerics.Complex,System.Double)">
            <summary>
            Returns the logarithm of a specified complex number in a specified base
            </summary>
            <param name="value">A complex number.</param>
            <param name="baseValue">The base of the logarithm.</param>
            <returns>The logarithm of value in base baseValue.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex.Log10(MathNet.Numerics.Complex)">
            <summary>
            Returns the base-10 logarithm of a specified complex number in a specified base
            </summary>
            <param name="value">A complex number.</param>
            <returns>The base-10 logarithm of the complex number.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex.Pow(MathNet.Numerics.Complex,MathNet.Numerics.Complex)">
            <summary>
            Raise this a <c>Complex</c>number to the given value.
            </summary>
            <param name="value">A complex number.</param>
            <param name="power">The exponent.</param>
            <returns>
            The complex number raised to the given exponent.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex.Pow(MathNet.Numerics.Complex,System.Double)">
            <summary>
            Raise this a <c>Complex</c>number to the given value.
            </summary>
            <param name="value">A complex number.</param>
            <param name="power">The exponent.</param>
            <returns>
            The complex number raised to the given exponent.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex.Reciprocal(MathNet.Numerics.Complex)">
            <summary>
            Returns the multiplicative inverse of a complex number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The reciprocal of value.</returns>
            <remarks>If value is <see cref="P:MathNet.Numerics.Complex.Zero"/>, the method returns <see cref="P:MathNet.Numerics.Complex.Zero"/>. Otherwise, it returns the result of the expression <see cref="P:MathNet.Numerics.Complex.One"/> / value. </remarks>
        </member>
        <member name="M:MathNet.Numerics.Complex.Sqrt(MathNet.Numerics.Complex)">
            <summary>
            The Square Root (power 1/2) of a <c>Complex</c> number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>
            The square root of a complex number.
            </returns>
        </member>
        <member name="P:MathNet.Numerics.Complex.Infinity">
            <summary>
            Gets a value representing the infinity value. This field is constant.
            </summary>
            <value>The infinity.</value>
            <remarks>
            The semantic associated to this value is a <c>Complex</c> of
            infinite real and imaginary part. If you need more formal complex
            number handling (according to the Riemann Sphere and the extended
            complex plane C*, or using directed infinity) please check out the
            alternative Math.NET symbolics packages instead.
            </remarks>
            <value>A value representing the infinity value.</value>
        </member>
        <member name="P:MathNet.Numerics.Complex.NaN">
            <summary>
            Gets a value representing not-a-number. This field is constant.
            </summary>
            <value>A value representing not-a-number.</value>
        </member>
        <member name="P:MathNet.Numerics.Complex.ImaginaryOne">
            <summary>
            Gets a value representing the imaginary unit number. This field is constant.
            </summary>
            <value>A value representing the imaginary unit number.</value>
        </member>
        <member name="P:MathNet.Numerics.Complex.Zero">
            <summary>
            Gets a value representing the zero value. This field is constant.
            </summary>
            <value>A value representing the zero value.</value>
        </member>
        <member name="P:MathNet.Numerics.Complex.One">
            <summary>
            Gets a value representing the <c>1</c> value. This field is constant.
            </summary>
            <value>A value representing the <c>1</c> value.</value>
        </member>
        <member name="P:MathNet.Numerics.Complex.Real">
            <summary>
            Gets the real component of the complex number.
            </summary>
            <value>The real component of the complex number.</value>
        </member>
        <member name="P:MathNet.Numerics.Complex.Imaginary">
            <summary>
            Gets the real imaginary component of the complex number.
            </summary>
            <value>The real imaginary component of the complex number.</value>
        </member>
        <member name="P:MathNet.Numerics.Complex.IsZero">
            <summary>
            Gets a value indicating whether the <c>Complex</c> is zero.
            </summary>
            <value><c>true</c> if this instance is zero; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MathNet.Numerics.Complex.IsOne">
            <summary>
            Gets a value indicating whether the <c>Complex</c> is one.
            </summary>
            <value><c>true</c> if this instance is one; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MathNet.Numerics.Complex.IsImaginaryOne">
            <summary>
            Gets a value indicating whether the <c>Complex</c> is the imaginary unit.
            </summary>
            <value><c>true</c> if this instance is ImaginaryOne; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MathNet.Numerics.Complex.IsNaN">
            <summary>
            Gets a value indicating whether the provided <c>Complex</c>evaluates
            to a value that is not a number.
            </summary>
            <value>
            <c>true</c> if this instance is <see cref="P:MathNet.Numerics.Complex.NaN"/>; otherwise,
            <c>false</c>.
            </value>
        </member>
        <member name="P:MathNet.Numerics.Complex.IsInfinity">
            <summary>
            Gets a value indicating whether the provided <c>Complex</c> evaluates to an
            infinite value.
            </summary>
            <value>
                <c>true</c> if this instance is infinite; otherwise, <c>false</c>.
            </value>
            <remarks>
            True if it either evaluates to a complex infinity
            or to a directed infinity.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.Complex.IsReal">
            <summary>
            Gets a value indicating whether the provided <c>Complex</c> is real.
            </summary>
            <value><c>true</c> if this instance is a real number; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MathNet.Numerics.Complex.IsRealNonNegative">
            <summary>
            Gets a value indicating whether the provided <c>Complex</c> is real and not negative, that is &gt;= 0.
            </summary>
            <value>
                <c>true</c> if this instance is real nonnegative number; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MathNet.Numerics.Complex.Conjugate">
            <summary>
            Gets the conjugate of this <c>Complex</c>.
            </summary>
            <remarks>
            The semantic of <i>setting the conjugate</i> is such that
            <code>
            // a, b of type Complex
            a.Conjugate = b;
            </code>
            is equivalent to
            <code>
            // a, b of type Complex
            a = b.Conjugate
            </code>
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.Complex.Magnitude">
            <summary>
            Gets the magnitude or modulus of this <c>Complex</c>.
            </summary>
            <seealso cref="P:MathNet.Numerics.Complex.Phase"/>
        </member>
        <member name="P:MathNet.Numerics.Complex.MagnitudeSquared">
            <summary>
            Gets the squared magnitude of this <c>Complex</c>.
            </summary>
            <seealso cref="P:MathNet.Numerics.Complex.Phase"/>
        </member>
        <member name="P:MathNet.Numerics.Complex.Phase">
            <summary>
            Gets phase or argument of this <c>Complex</c>.
            </summary>
            <remarks>
            Phase always returns a value bigger than negative Pi and
            smaller or equal to Pi. If this <c>Complex</c> is zero, the Complex
            is assumed to be positive real with an argument of zero.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.Complex.Sign">
            <summary>
            Gets the unity of this complex (same argument, but on the unit circle; exp(I*arg))
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Combinatorics">
            <summary>
            Enumerative Combinatorics and Counting.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Combinatorics.Variations(System.Int32,System.Int32)">
            <summary>
            Counts the number of possible variations without repetition.
            The order matters and each object can be chosen only once.
            </summary>
            <param name="n">Number of elements in the set.</param>
            <param name="k">Number of elements to choose from the set. Each element is chosen at most once.</param>
            <returns>Maximum number of distinct variations.</returns>
        </member>
        <member name="M:MathNet.Numerics.Combinatorics.VariationsWithRepetition(System.Int32,System.Int32)">
            <summary>
            Counts the number of possible variations with repetition.
            The order matters and each object can be chosen more than once.
            </summary>
            <param name="n">Number of elements in the set.</param>
            <param name="k">Number of elements to choose from the set. Each element is chosen 0, 1 or multiple times.</param>
            <returns>Maximum number of distinct variations with repetition.</returns>
        </member>
        <member name="M:MathNet.Numerics.Combinatorics.Combinations(System.Int32,System.Int32)">
            <summary>
            Counts the number of possible combinations without repetition.
            The order does not matter and each object can be chosen only once.
            </summary>
            <param name="n">Number of elements in the set.</param>
            <param name="k">Number of elements to choose from the set. Each element is chosen at most once.</param>
            <returns>Maximum number of combinations.</returns>
        </member>
        <member name="M:MathNet.Numerics.Combinatorics.CombinationsWithRepetition(System.Int32,System.Int32)">
            <summary>
            Counts the number of possible combinations with repetition.
            The order does not matter and an object can be chosen more than once.
            </summary>
            <param name="n">Number of elements in the set.</param>
            <param name="k">Number of elements to choose from the set. Each element is chosen 0, 1 or multiple times.</param>
            <returns>Maximum number of combinations with repetition.</returns>
        </member>
        <member name="M:MathNet.Numerics.Combinatorics.Permutations(System.Int32)">
            <summary>
            Counts the number of possible permutations (without repetition). 
            </summary>
            <param name="n">Number of (distinguishable) elements in the set.</param>
            <returns>Maximum number of permutations without repetition.</returns>
        </member>
        <member name="T:MathNet.Numerics.Random.WH2006">
            <summary>
            Wichmann-Hill’s 2006 combined multiplicative congruential generator. 
            </summary>
            <remarks>See: Wichmann, B. A. &amp; Hill, I. D. (2006), "Generating good pseudo-random numbers".
            Computational Statistics &amp; Data Analysis 51:3 (2006) 1614-1622
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Random.WH2006.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.WH2006"/> class using
            the current time as the seed.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Random.WH2006.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.WH2006"/> class using
            the current time as the seed.
            </summary>
            <param name="threadSafe">if set to <c>true</c> , the class is thread safe.</param>
        </member>
        <member name="M:MathNet.Numerics.Random.WH2006.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.WH2006"/> class.
            </summary>
            <param name="seed">The seed value.</param>
            <remarks>If the seed value is zero, it is set to one. Uses the
            value of <see cref="P:MathNet.Numerics.Control.ThreadSafeRandomNumberGenerators"/> to
            set whether the instance is thread safe.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Random.WH2006.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.WH2006"/> class.
            </summary>
            <param name="seed">The seed value.</param>
            <remarks>The seed is set to 1, if the zero is used as the seed.</remarks>
            <param name="threadSafe">if set to <c>true</c> , the class is thread safe.</param>
        </member>
        <member name="M:MathNet.Numerics.Random.WH2006.DoSample">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0.
            </returns>
        </member>
        <member name="T:MathNet.Numerics.Random.SystemRandomExtensions">
            <summary>
            This class implements extension methods for the System.Random class. The extension methods generate
            pseudo-random distributed numbers for types other than double and int32.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Random.SystemRandomExtensions.NextInt64(System.Random)">
            <summary>
            Returns a nonnegative random number less than <see cref="F:System.Int64.MaxValue"/>.
            </summary>
            <returns>
            A 64-bit signed integer greater than or equal to 0, and less than <see cref="F:System.Int64.MaxValue"/>; that is, 
            the range of return values includes 0 but not <paramref name="Int64.MaxValue"/>.
            </returns>
            <seealso cref="M:MathNet.Numerics.Random.SystemRandomExtensions.NextFullRangeInt64(System.Random)"/>
        </member>
        <member name="M:MathNet.Numerics.Random.SystemRandomExtensions.NextFullRangeInt32(System.Random)">
            <summary>
            Returns a random number of the full Int32 range.
            </summary>
            <returns>
            A 32-bit signed integer of the full range, including 0, negative numbers,
            <see cref="F:System.Int32.MaxValue"/> and <see cref="F:System.Int32.MinValue"/>.
            </returns>
            <seealso cref="M:System.Random.Next"/>
        </member>
        <member name="M:MathNet.Numerics.Random.SystemRandomExtensions.NextFullRangeInt64(System.Random)">
            <summary>
            Returns a random number of the full Int64 range.
            </summary>
            <returns>
            A 64-bit signed integer of the full range, including 0, negative numbers,
            <see cref="F:System.Int64.MaxValue"/> and <see cref="F:System.Int64.MinValue"/>.
            </returns>
            <seealso cref="M:MathNet.Numerics.Random.SystemRandomExtensions.NextInt64(System.Random)"/>
        </member>
        <member name="M:MathNet.Numerics.Random.SystemRandomExtensions.NextDecimal(System.Random)">
            <summary>
            Returns a nonnegative decimal floating point random number less than 1.0.
            </summary>
            <returns>
            A decimal floating point number greater than or equal to 0.0, and less than 1.0; that is, 
            the range of return values includes 0.0 but not 1.0.
            </returns>
        </member>
        <member name="T:MathNet.Numerics.Random.MersenneTwister">
            <summary>
            Random number generator using Mersenne Twister 19937 algorithm.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Random.MersenneTwister._lower_mask">
            <summary>
            Mersenne twister constant.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Random.MersenneTwister._m">
            <summary>
            Mersenne twister constant.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Random.MersenneTwister._matrix_a">
            <summary>
            Mersenne twister constant.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Random.MersenneTwister._n">
            <summary>
            Mersenne twister constant.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Random.MersenneTwister._reciprocal">
            <summary>
            Mersenne twister constant.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Random.MersenneTwister._upper_mask">
            <summary>
            Mersenne twister constant.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Random.MersenneTwister._mag01">
            <summary>
            Mersenne twister constant.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Random.MersenneTwister._mt">
            <summary>
            Mersenne twister constant.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Random.MersenneTwister.mti">
            <summary>
            Mersenne twister constant.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Random.MersenneTwister.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.MersenneTwister"/> class using
            the current time as the seed.
            </summary>
            <remarks>If the seed value is zero, it is set to one. Uses the
            value of <see cref="P:MathNet.Numerics.Control.ThreadSafeRandomNumberGenerators"/> to
            set whether the instance is thread safe.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Random.MersenneTwister.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.MersenneTwister"/> class using
            the current time as the seed.
            </summary>
            <param name="threadSafe">if set to <c>true</c> , the class is thread safe.</param>
        </member>
        <member name="M:MathNet.Numerics.Random.MersenneTwister.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.MersenneTwister"/> class.
            </summary>
            <param name="seed">The seed value.</param>
            <remarks>Uses the value of <see cref="P:MathNet.Numerics.Control.ThreadSafeRandomNumberGenerators"/> to
            set whether the instance is thread safe.</remarks>        
        </member>
        <member name="M:MathNet.Numerics.Random.MersenneTwister.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.MersenneTwister"/> class.
            </summary>
            <param name="seed">The seed value.</param>
            <param name="threadSafe">if set to <c>true</c>, the class is thread safe.</param>
        </member>
        <member name="M:MathNet.Numerics.Random.MersenneTwister.DoSample">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Random.MersenneTwister.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.SplineBoundaryCondition">
            <summary>
            Left and right boundary conditions.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.SplineBoundaryCondition.Natural">
            <summary>
            Natural Boundary (Zero second derivative).
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.SplineBoundaryCondition.ParabolicallyTerminated">
            <summary>
            Parabolically Terminated boundary.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.SplineBoundaryCondition.FirstDerivative">
            <summary>
            Fixed first derivative at the boundary.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.SplineBoundaryCondition.SecondDerivative">
            <summary>
            Fixed second derivative at the boundary.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Statistics.Statistics">
            <summary>
            Extension methods to return basic statistics on set of data.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.Mean(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates the sample mean.
            </summary>
            <param name="data">The data to calculate the mean of.</param>
            <returns>The mean of the sample.</returns>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.Mean(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Calculates the sample mean.
            </summary>
            <param name="data">The data to calculate the mean of.</param>
            <returns>The mean of the sample.</returns>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.Variance(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates the unbiased population variance estimator (on a dataset of size N will use an N-1 normalizer).
            </summary>
            <param name="data">The data to calculate the variance of.</param>
            <returns>The unbiased population variance of the sample.</returns>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.Variance(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Computes the unbiased population variance estimator (on a dataset of size N will use an N-1 normalizer) for nullable data.
            </summary>
            <param name="data">The data to calculate the variance of.</param>
            <returns>The population variance of the sample.</returns>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.PopulationVariance(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates the biased population variance estimator (on a dataset of size N will use an N normalizer).
            </summary>
            <param name="data">The data to calculate the variance of.</param>
            <returns>The biased population variance of the sample.</returns>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.PopulationVariance(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Computes the biased population variance estimator (on a dataset of size N will use an N normalizer) for nullable data.
            </summary>
            <param name="data">The data to calculate the variance of.</param>
            <returns>The population variance of the sample.</returns>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.StandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates the unbiased sample standard deviation (on a dataset of size N will use an N-1 normalizer).
            </summary>
            <param name="data">The data to calculate the standard deviation of.</param>
            <returns>The standard deviation of the sample.</returns>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Calculates the unbiased sample standard deviation (on a dataset of size N will use an N-1 normalizer).
            </summary>
            <param name="data">The data to calculate the standard deviation of.</param>
            <returns>The standard deviation of the sample.</returns>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.PopulationStandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates the biased sample standard deviation (on a dataset of size N will use an N normalizer).
            </summary>
            <param name="data">The data to calculate the standard deviation of.</param>
            <returns>The standard deviation of the sample.</returns>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.PopulationStandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Calculates the biased sample standard deviation (on a dataset of size N will use an N normalizer).
            </summary>
            <param name="data">The data to calculate the standard deviation of.</param>
            <returns>The standard deviation of the sample.</returns>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.Minimum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Returns the minimum value in the sample data.
            </summary>
            <param name="data">The sample data.</param>
            <returns>The minimum value in the sample data.</returns>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.Maximum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Returns the maximum value in the sample data.
            </summary>
            <param name="data">The sample data.</param>
            <returns>The maximum value in the sample data.</returns>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.Minimum(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the minimum value in the sample data.
            </summary>
            <param name="data">The sample data.</param>
            <returns>The minimum value in the sample data.</returns>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.Maximum(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the maximum value in the sample data.
            </summary>
            <param name="data">The sample data.</param>
            <returns>The maximum value in the sample data.</returns>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.Median(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates the sample median.
            </summary>
            <param name="data">The data to calculate the median of.</param>
            <returns>The median of the sample.</returns>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.Median(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Calculates the sample median.
            </summary>
            <param name="data">The data to calculate the median of.</param>
            <returns>The median of the sample.</returns>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.OrderStatistic(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Evaluate the i-order (1..N) statistic of the provided samples.
            </summary>
            <param name="samples">The sample data.</param>
            <param name="order">Order of the statistic to evaluate.</param>
            <returns>The i'th order statistic in the sample data.</returns>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.OrderSelect(System.Collections.Generic.IList{System.Double},System.Int32,System.Int32,System.Int32)">
            <summary>
            Implementation of the order statistics finding algorithm based on the algorithm in
            "Introduction to Algorithms", Cormen et al. section 7.1.
            </summary>
            <param name="samples">The sample data.</param>
            <param name="left">The left bound in which to order select.</param>
            <param name="right">The right bound in which to order select.</param>
            <param name="order">The order we are trying to find.</param>
            <returns>The <paramref name="order"/> order statistic.</returns>
        </member>
        <member name="T:MathNet.Numerics.Statistics.Bucket">
            <summary>
            A <see cref="T:MathNet.Numerics.Statistics.Histogram"/> consists of a series of <see cref="T:MathNet.Numerics.Statistics.Bucket"/>s, 
            each representing a region limited by a lower bound (inclusive) and an upper bound (exclusive).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Bucket.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Bucket class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Bucket.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Bucket class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Bucket.Contains(System.Double)">
            <summary>
            This method check whether a point is contained within this bucket.
            </summary>
            <param name="x">The point to check.</param>
            <returns>0 if the point falls within the bucket boundaries; -1 if the point is
            smaller than the bucket, +1 if the point is larger than the bucket.</returns>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Bucket.CompareTo(MathNet.Numerics.Statistics.Bucket)">
            <summary>
            Comparison of two disjoint buckets.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Bucket.Equals(System.Object)">
            <summary>
            Checks whether two Buckets are equal; this method tolerates a difference in lowerbound, upperbound
            and count given by <seealso cref="!:Precsion.AlmostEqual"/>. 
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Bucket.GetHashCode">
            <summary>
            Provides a hash code for this bucket.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Bucket.ToString">
            <summary>
            Formats a human-readable string for this bucket.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Bucket.LowerBound">
            <summary>
            Lower Bound of the Bucket.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Bucket.UpperBound">
            <summary>
            Upper Bound of the Bucket.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Bucket.Count">
            <summary>
            The number of datapoints in the bucket.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Bucket.Width">
            <summary>
            Width of the Bucket.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Bucket.DefaultPointComparer">
            <summary>
            Default comparer.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Statistics.Bucket.PointComparer">
            <summary>
            This <c>IComparer</c> performs comparisons between a point and a bucket.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Bucket.PointComparer.Compare(MathNet.Numerics.Statistics.Bucket,MathNet.Numerics.Statistics.Bucket)">
            <summary>
            Compares a point and a bucket. The point will be encapsulated in a bucket with width 0.
            </summary>
            <param name="bkt1">The first bucket to compare.</param>
            <param name="bkt2">The second bucket to compare.</param>
            <returns>-1 when the point is less than this bucket, 0 when it is in this bucket and 1 otherwise.</returns>
        </member>
        <member name="T:MathNet.Numerics.Statistics.Histogram">
            <summary>
            A class which computes histograms of data.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Histogram.buckets">
            <summary>
            Contains all the <c>Bucket</c>s of the <c>Histogram</c>.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Histogram.areBucketsSorted">
            <summary>
            Indicates whether the elements of <c>buckets</c> are currently sorted.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Histogram.#ctor">
            <summary>
            Initializes a new instance of the Histogram class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Histogram.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Constructs a Histogram with a specific number of equally sized buckets. The upper and lower bound of the histogram
            will be set to the smallest and largest datapoint.
            </summary>
            <param name="data">The datasequence to build a histogram on.</param>
            <param name="nbuckets">The number of buckets to use.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Histogram.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Int32,System.Double,System.Double)">
            <summary>
            Constructs a Histogram with a specific number of equally sized buckets.
            </summary>
            <param name="data">The datasequence to build a histogram on.</param>
            <param name="nbuckets">The number of buckets to use.</param>
            <param name="lower">The histogram lower bound.</param>
            <param name="upper">The histogram upper bound.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Histogram.AddData(System.Double)">
            <summary>
            Add one data point to the histogram. If the datapoint falls outside the range of the histogram,
            the lowerbound or upperbound will automatically adapt.
            </summary>
            <param name="d">The datapoint which we want to add.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Histogram.AddData(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Add a sequence of data point to the histogram. If the datapoint falls outside the range of the histogram,
            the lowerbound or upperbound will automatically adapt.
            </summary>
            <param name="data">The sequence of datapoints which we want to add.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Histogram.AddBucket(MathNet.Numerics.Statistics.Bucket)">
            <summary>
            Adds a <c>Bucket</c> to the <c>Histogram</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Histogram.LazySort">
            <summary>
            Sort the buckets if needed.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Histogram.GetBucketOf(System.Double)">
            <summary>
            Returns the <c>Bucket</c> that contains the value <c>v</c>. 
            </summary>
            <param name="v">The point to search the bucket for.</param>
            <returns>The bucket containing the point.</returns>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Histogram.GetBucketIndexOf(System.Double)">
            <summary>
            Returns the index in the <c>Histogram</c> of the <c>Bucket</c>
            that contains the value <c>v</c>.
            </summary>
            <param name="v">The point to search the bucket index for.</param>
            <returns>The index of the bucket containing the point.</returns>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Histogram.ToString">
            <summary>
            Prints the buckets contained in the <see cref="T:MathNet.Numerics.Statistics.Histogram"/>.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Histogram.LowerBound">
            <summary>
            Returns the lower bound of the histogram.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Histogram.UpperBound">
            <summary>
            Returns the upper bound of the histogram.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Histogram.Item(System.Int32)">
            <summary>
            Gets the <c>n</c>'th bucket.
            </summary>
            <param name="n">The index of the bucket to be returned.</param>
            <returns>The <c>n</c>'th bucket.</returns>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Histogram.BucketCount">
            <summary>
            Gets the number of buckets.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Histogram.DataCount">
            <summary>
            Gets the total number of datapoints in the histogram.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Random.SystemCryptoRandomNumberGenerator">
            <summary>
            A random number generator based on the <see cref="T:System.Security.Cryptography.RandomNumberGenerator"/> class in the .NET library.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Random.SystemCryptoRandomNumberGenerator.#ctor">
            <summary>
            Construct a new random number generator with a random seed.
            </summary>
            <remarks>Uses <see cref="T:System.Security.Cryptography.RNGCryptoServiceProvider"/> and uses the value of 
            <see cref="P:MathNet.Numerics.Control.ThreadSafeRandomNumberGenerators"/> to set whether the instance is thread safe.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Random.SystemCryptoRandomNumberGenerator.#ctor(System.Security.Cryptography.RandomNumberGenerator)">
            <summary>
            Construct a new random number generator with random seed.
            </summary>
            <param name="rng">The <see cref="T:System.Security.Cryptography.RandomNumberGenerator"/> to use.</param>
            <remarks>Uses the value of  <see cref="P:MathNet.Numerics.Control.ThreadSafeRandomNumberGenerators"/> to set whether the instance is thread safe.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Random.SystemCryptoRandomNumberGenerator.#ctor(System.Boolean)">
            <summary>
            Construct a new random number generator with random seed.
            </summary>
            <remarks>Uses <see cref="T:System.Security.Cryptography.RNGCryptoServiceProvider"/></remarks>
            <param name="threadSafe">if set to <c>true</c> , the class is thread safe.</param>
        </member>
        <member name="M:MathNet.Numerics.Random.SystemCryptoRandomNumberGenerator.#ctor(System.Security.Cryptography.RandomNumberGenerator,System.Boolean)">
            <summary>
            Construct a new random number generator with random seed.
            </summary>
            <param name="rng">The <see cref="T:System.Security.Cryptography.RandomNumberGenerator"/> to use.</param>
            <param name="threadSafe">if set to <c>true</c> , the class is thread safe.</param>
        </member>
        <member name="M:MathNet.Numerics.Random.SystemCryptoRandomNumberGenerator.DoSample">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0.
            </returns>
        </member>
        <member name="T:MathNet.Numerics.Integration.Algorithms.SimpsonRule">
            <summary>
            Approximation algorithm for definite integrals by Simpson's rule.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Integration.Algorithms.SimpsonRule.IntegrateThreePoint(System.Func{System.Double,System.Double},System.Double,System.Double)">
            <summary>
            Direct 3-point approximation of the definite integral in the provided interval by Simpson's rule.
            </summary>
            <param name="f">The analytic smooth function to integrate.</param>
            <param name="intervalBegin">Where the interval starts, inclusive and finite.</param>
            <param name="intervalEnd">Where the interval stops, inclusive and finite.</param>
            <returns>Approximation of the finite integral in the given interval.</returns>
        </member>
        <member name="M:MathNet.Numerics.Integration.Algorithms.SimpsonRule.IntegrateComposite(System.Func{System.Double,System.Double},System.Double,System.Double,System.Int32)">
            <summary>
            Composite N-point approximation of the definite integral in the provided interval by Simpson's rule.
            </summary>
            <param name="f">The analytic smooth function to integrate.</param>
            <param name="intervalBegin">Where the interval starts, inclusive and finite.</param>
            <param name="intervalEnd">Where the interval stops, inclusive and finite.</param>
            <param name="numberOfPartitions">Even number of composite subdivision partitions.</param>
            <returns>Approximation of the finite integral in the given interval.</returns>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Binomial">
            <summary>
            Implements the binomial distribution. For details about this distribution, see 
            <a href="http://en.wikipedia.org/wiki/Binomial_distribution">Wikipedia - Binomial distribution</a>.
            </summary>
            <remarks><para>The distribution is parameterized by a probability (between 0.0 and 1.0).</para>
            <para>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can set the random number generator by using the <see cref="P:MathNet.Numerics.Distributions.Binomial.RandomSource"/> property.</para>
            <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to false, all parameter checks can be turned off.</para></remarks>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Binomial._p">
            <summary>
            Stores the normalized binomial probability.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Binomial._n">
            <summary>
            The number of trials.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Binomial._random">
            <summary>
            The distribution's random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Binomial.#ctor(System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the Binomial class.
            </summary>
            <param name="p">The success probability of a trial.</param>
            <param name="n">The number of trials.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="p"/> is not in the interval [0.0,1.0].</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="n"/> is negative.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Binomial.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MathNet.Numerics.Distributions.Binomial.IsValidParameterSet(System.Double,System.Int32)" -->
        <member name="M:MathNet.Numerics.Distributions.Binomial.SetParameters(System.Double,System.Int32)">
            <summary>
            Sets the parameters of the distribution after checking their validity.
            </summary>
            <param name="p">The success probability of a trial.</param>
            <param name="n">The number of trials.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="p"/> is not in the interval [0.0,1.0].</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="n"/> is negative.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Binomial.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution function of the Binomial distribution.
            </summary>
            <param name="x">The location at which to compute the cumulative density.</param>
            <returns>the cumulative density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Binomial.Probability(System.Int32)">
            <summary>
            Computes the probability of a specific value.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Binomial.ProbabilityLn(System.Int32)">
            <summary>
            Computes the log probability of a specific value.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Binomial.Sample">
            <summary>
            Samples a Binomially distributed random variable.
            </summary>
            <returns>The number of successful trials.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Binomial.Samples">
            <summary>
            Samples an array of Bernoulli distributed random variables.
            </summary>
            <returns>a sequence of successful trial counts.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Binomial.Sample(System.Random,System.Double,System.Int32)">
            <summary>
            Samples a binomially distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="p">The success probability of a trial; must be in the interval [0.0, 1.0].</param>
            <param name="n">The number of trials; must be positive.</param>
            <returns>The number of successes in <see cref="P:MathNet.Numerics.Distributions.Binomial.N"/> trials.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Binomial.Samples(System.Random,System.Double,System.Int32)">
            <summary>
            Samples a sequence of binomially distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="p">The success probability of a trial; must be in the interval [0.0, 1.0].</param>
            <param name="n">The number of trials; must be positive.</param>
            <returns>a sequence of successful trial counts.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Binomial.DoSample(System.Random,System.Double,System.Int32)">
            <summary>
            Generates a sample from the Binomial distribution without doing parameter checking.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="p">The success probability of a trial; must be in the interval [0.0, 1.0].</param>
            <param name="n">The number of trials; must be positive.</param>
            <returns>The number of successful trials.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Binomial.P">
            <summary>
            Gets or sets the success probability.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Binomial.N">
            <summary>
            Gets or sets the number of trials.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Binomial.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Binomial.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Binomial.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Binomial.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Binomial.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Binomial.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Binomial.Minimum">
            <summary>
            Gets the smallest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Binomial.Maximum">
            <summary>
            Gets the largest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Binomial.Mode">
            <summary>
            The mode of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Binomial.Median">
            <summary>
            The median of the distribution.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Statistics.Correlation">
            <summary>
            A class with correlation measures between two datasets.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Correlation.Pearson(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Computes the Pearson product-moment correlation coefficient.
            </summary>
            <param name="dataA">Sample data A.</param>
            <param name="dataB">Sample data B.</param>
            <returns>The Pearson product-moment correlation coefficient.</returns>
        </member>
        <member name="T:MathNet.Numerics.Random.WH1982">
             <summary>
             Wichmann-Hill’s 1982 combined multiplicative congruential generator. 
             </summary>
             <remarks>See: Wichmann, B. A. &amp; Hill, I. D. (1982), "Algorithm AS 183:
             An efficient and portable pseudo-random number generator". Applied Statistics 31 (1982) 188-190
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Random.WH1982.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.WH1982"/> class using
            the current time as the seed.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Random.WH1982.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.WH1982"/> class using
            the current time as the seed.
            </summary>
            <param name="threadSafe">if set to <c>true</c> , the class is thread safe.</param>
        </member>
        <member name="M:MathNet.Numerics.Random.WH1982.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.WH1982"/> class.
            </summary>
            <param name="seed">The seed value.</param>
            <remarks>If the seed value is zero, it is set to one. Uses the
            value of <see cref="P:MathNet.Numerics.Control.ThreadSafeRandomNumberGenerators"/> to
            set whether the instance is thread safe.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Random.WH1982.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.WH1982"/> class.
            </summary>
            <param name="seed">The seed value.</param>
            <remarks>The seed is set to 1, if the zero is used as the seed.</remarks>
            <param name="threadSafe">if set to <c>true</c> , the class is thread safe.</param>
        </member>
        <member name="M:MathNet.Numerics.Random.WH1982.DoSample">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0.
            </returns>
        </member>
        <member name="T:MathNet.Numerics.Random.Mcg31m1">
            <summary>
            Multiplicative congruential generator using a modulus of 2^31-1 and a multiplier of 1132489760.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Random.Mcg31m1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.Mcg31m1"/> class using
            the current time as the seed.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Random.Mcg31m1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.Mcg31m1"/> class using
            the current time as the seed.
            </summary>
            <param name="threadSafe">if set to <c>true</c> , the class is thread safe.</param>
        </member>
        <member name="M:MathNet.Numerics.Random.Mcg31m1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.Mcg31m1"/> class.
            </summary>
            <param name="seed">The seed value.</param>
            <remarks>If the seed value is zero, it is set to one. Uses the
            value of <see cref="P:MathNet.Numerics.Control.ThreadSafeRandomNumberGenerators"/> to
            set whether the instance is thread safe.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Random.Mcg31m1.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.Mcg31m1"/> class.
            </summary>
            <param name="seed">The seed value.</param>
            <param name="threadSafe">if set to <c>true</c>, the class is thread safe.</param>
        </member>
        <member name="M:MathNet.Numerics.Random.Mcg31m1.DoSample">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0.
            </returns>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Normal">
            <summary>
            Implements the univariate Normal (or Gaussian) distribution. For details about this distribution, see 
            <a href="http://en.wikipedia.org/wiki/Normal_distribution">Wikipedia - Normal distribution</a>.
            </summary>
            <remarks><para>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can get/set the random number generator by using the <see cref="P:MathNet.Numerics.Distributions.Normal.RandomSource"/> property.</para>
            <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to false, all parameter checks can be turned off.</para></remarks>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Normal._mean">
            <summary>
            Keeps track of the mean of the normal distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Normal._stdDev">
            <summary>
            Keeps track of the standard deviation of the normal distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Normal._random">
            <summary>
            The distribution's random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.#ctor">
            <summary>
            Initializes a new instance of the Normal class. This is a normal distribution with mean 0.0
            and standard deviation 1.0. The distribution will
            be initialized with the default <seealso cref="T:System.Random"/> random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Normal class with a particular mean and standard deviation. The distribution will
            be initialized with the default <seealso cref="T:System.Random"/> random number generator.
            </summary>
            <param name="mean">The mean of the normal distribution.</param>
            <param name="stddev">The standard deviation of the normal distribution.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.WithMeanStdDev(System.Double,System.Double)">
            <summary>
            Constructs a normal distribution from a mean and standard deviation. The distribution will
            be initialized with the default <seealso cref="T:System.Random"/> random number generator.
            </summary>
            <param name="mean">The mean of the normal distribution.</param>
            <param name="stddev">The standard deviation of the normal distribution.</param>
            <returns>a normal distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.WithMeanVariance(System.Double,System.Double)">
            <summary>
            Constructs a normal distribution from a mean and variance. The distribution will
            be initialized with the default <seealso cref="T:System.Random"/> random number generator.
            </summary>
            <param name="mean">The mean of the normal distribution.</param>
            <param name="var">The variance of the normal distribution.</param>
            <returns>a normal distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.WithMeanAndPrecision(System.Double,System.Double)">
            <summary>
            Constructs a normal distribution from a mean and precision. The distribution will
            be initialized with the default <seealso cref="T:System.Random"/> random number generator.
            </summary>
            <param name="mean">The mean of the normal distribution.</param>
            <param name="prec">The precision of the normal distribution.</param>
            <returns>a normal distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.IsValidParameterSet(System.Double,System.Double)">
            <summary>
            Checks whether the parameters of the distribution are valid. 
            </summary>
            <param name="mean">The mean of the normal distribution.</param>
            <param name="stddev">The standard deviation of the normal distribution.</param>
            <returns>True when the parameters are valid, false otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.SetParameters(System.Double,System.Double)">
            <summary>
            Sets the parameters of the distribution after checking their validity.
            </summary>
            <param name="mean">The mean of the normal distribution.</param>
            <param name="stddev">The standard deviation of the normal distribution.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the parameters don't pass the <see cref="M:MathNet.Numerics.Distributions.Normal.IsValidParameterSet(System.Double,System.Double)"/> function.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.Density(System.Double)">
            <summary>
            Computes the density of the normal distribution.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.DensityLn(System.Double)">
            <summary>
            Computes the log density of the normal distribution.
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution function of the normal distribution.
            </summary>
            <param name="x">The location at which to compute the cumulative density.</param>
            <returns>the cumulative density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.Sample">
            <summary>
            Generates a sample from the normal distribution using the <i>Box-Muller</i> algorithm.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.Samples">
            <summary>
            Generates a sequence of samples from the normal distribution using the <i>Box-Muller</i> algorithm.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.InverseCumulativeDistribution(System.Double)">
            <summary>
            Computes the inverse cumulative distribution function of the normal distribution.
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density.</param>
            <returns>the inverse cumulative density at <paramref name="p"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.Sample(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sample from the normal distribution using the <i>Box-Muller</i> algorithm.
            </summary>
            <param name="rng">The random number generator to use.</param>
            <param name="mean">The mean of the normal distribution from which to generate samples.</param>
            <param name="stddev">The standard deviation of the normal distribution from which to generate samples.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.Samples(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the normal distribution using the <i>Box-Muller</i> algorithm.
            </summary>
            <param name="rng">The random number generator to use.</param>
            <param name="mean">The mean of the normal distribution from which to generate samples.</param>
            <param name="stddev">The standard deviation of the normal distribution from which to generate samples.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.SampleBoxMuller(System.Random,System.Double@)">
            <summary>
            Samples a pair of standard normal distributed random variables using the <i>Box-Muller</i> algorithm.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="r2">A second random number from the standard normal distribution computed as a side product.</param>
            <returns>a random number from the standard normal distribution.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Normal.Precision">
            <summary>
            Gets or sets the precision of the normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Normal.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Normal.Mean">
            <summary>
            Gets or sets the mean of the normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Normal.Variance">
            <summary>
            Gets or sets the variance of the normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Normal.StdDev">
            <summary>
            Gets or sets the standard deviation of the normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Normal.Entropy">
            <summary>
            Gets the entropy of the normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Normal.Skewness">
            <summary>
            Gets the skewness of the normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Normal.Mode">
            <summary>
            Gets the mode of the normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Normal.Median">
            <summary>
            Gets the median of the normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Normal.Minimum">
            <summary>
            Gets the minimum of the normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Normal.Maximum">
            <summary>
            Gets the maximum of the normal distribution.
            </summary>
        </member>
    </members>
</doc>
